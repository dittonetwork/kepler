// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kepler/committee/randao.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CommitRandao struct {
	CommitmentHash []byte `protobuf:"bytes,1,opt,name=commitment_hash,json=commitmentHash,proto3" json:"commitment_hash,omitempty"`
}

func (m *CommitRandao) Reset()         { *m = CommitRandao{} }
func (m *CommitRandao) String() string { return proto.CompactTextString(m) }
func (*CommitRandao) ProtoMessage()    {}
func (*CommitRandao) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d92dc654cacc453, []int{0}
}
func (m *CommitRandao) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitRandao) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitRandao.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitRandao) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitRandao.Merge(m, src)
}
func (m *CommitRandao) XXX_Size() int {
	return m.Size()
}
func (m *CommitRandao) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitRandao.DiscardUnknown(m)
}

var xxx_messageInfo_CommitRandao proto.InternalMessageInfo

func (m *CommitRandao) GetCommitmentHash() []byte {
	if m != nil {
		return m.CommitmentHash
	}
	return nil
}

type RevealRandao struct {
	RandomSeed []byte `protobuf:"bytes,1,opt,name=random_seed,json=randomSeed,proto3" json:"random_seed,omitempty"`
}

func (m *RevealRandao) Reset()         { *m = RevealRandao{} }
func (m *RevealRandao) String() string { return proto.CompactTextString(m) }
func (*RevealRandao) ProtoMessage()    {}
func (*RevealRandao) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d92dc654cacc453, []int{1}
}
func (m *RevealRandao) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RevealRandao) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RevealRandao.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RevealRandao) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevealRandao.Merge(m, src)
}
func (m *RevealRandao) XXX_Size() int {
	return m.Size()
}
func (m *RevealRandao) XXX_DiscardUnknown() {
	xxx_messageInfo_RevealRandao.DiscardUnknown(m)
}

var xxx_messageInfo_RevealRandao proto.InternalMessageInfo

func (m *RevealRandao) GetRandomSeed() []byte {
	if m != nil {
		return m.RandomSeed
	}
	return nil
}

func init() {
	proto.RegisterType((*CommitRandao)(nil), "kepler.committee.CommitRandao")
	proto.RegisterType((*RevealRandao)(nil), "kepler.committee.RevealRandao")
}

func init() { proto.RegisterFile("kepler/committee/randao.proto", fileDescriptor_3d92dc654cacc453) }

var fileDescriptor_3d92dc654cacc453 = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcd, 0x4e, 0x2d, 0xc8,
	0x49, 0x2d, 0xd2, 0x4f, 0xce, 0xcf, 0xcd, 0xcd, 0x2c, 0x29, 0x49, 0x4d, 0xd5, 0x2f, 0x4a, 0xcc,
	0x4b, 0x49, 0xcc, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x80, 0x48, 0xeb, 0xc1, 0xa5,
	0xa5, 0xc4, 0x93, 0xf3, 0x8b, 0x73, 0xf3, 0x8b, 0xf5, 0x73, 0x8b, 0xd3, 0xf5, 0xcb, 0x0c, 0x41,
	0x14, 0x44, 0xa9, 0x94, 0x24, 0x44, 0x22, 0x1e, 0xcc, 0xd3, 0x87, 0x70, 0xa0, 0x52, 0x22, 0xe9,
	0xf9, 0xe9, 0xf9, 0x10, 0x71, 0x10, 0x0b, 0x2a, 0x8a, 0x69, 0x75, 0x41, 0x62, 0x51, 0x62, 0x2e,
	0x54, 0x93, 0x92, 0x2d, 0x17, 0x8f, 0x33, 0x58, 0x26, 0x08, 0xec, 0x20, 0x21, 0x75, 0x2e, 0x7e,
	0x88, 0xca, 0xdc, 0xd4, 0xbc, 0x92, 0xf8, 0x8c, 0xc4, 0xe2, 0x0c, 0x09, 0x46, 0x05, 0x46, 0x0d,
	0x9e, 0x20, 0x3e, 0x84, 0xb0, 0x47, 0x62, 0x71, 0x86, 0x15, 0xcb, 0x8b, 0x05, 0xf2, 0x0c, 0x4a,
	0xa6, 0x5c, 0x3c, 0x41, 0xa9, 0x65, 0xa9, 0x89, 0x39, 0x50, 0xed, 0xf2, 0x5c, 0xdc, 0x20, 0x9f,
	0xe5, 0xe7, 0xc6, 0x17, 0xa7, 0xa6, 0xa6, 0x40, 0xb5, 0x72, 0x41, 0x84, 0x82, 0x53, 0x53, 0x53,
	0x20, 0xda, 0x9c, 0x8c, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39,
	0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x02,
	0xea, 0xdc, 0x0a, 0x24, 0x07, 0x97, 0x54, 0x16, 0xa4, 0x16, 0x27, 0xb1, 0x81, 0x1d, 0x6c, 0x0c,
	0x08, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x99, 0x01, 0xb0, 0x4c, 0x01, 0x00, 0x00,
}

func (m *CommitRandao) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitRandao) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitRandao) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommitmentHash) > 0 {
		i -= len(m.CommitmentHash)
		copy(dAtA[i:], m.CommitmentHash)
		i = encodeVarintRandao(dAtA, i, uint64(len(m.CommitmentHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RevealRandao) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevealRandao) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RevealRandao) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RandomSeed) > 0 {
		i -= len(m.RandomSeed)
		copy(dAtA[i:], m.RandomSeed)
		i = encodeVarintRandao(dAtA, i, uint64(len(m.RandomSeed)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRandao(dAtA []byte, offset int, v uint64) int {
	offset -= sovRandao(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CommitRandao) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CommitmentHash)
	if l > 0 {
		n += 1 + l + sovRandao(uint64(l))
	}
	return n
}

func (m *RevealRandao) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RandomSeed)
	if l > 0 {
		n += 1 + l + sovRandao(uint64(l))
	}
	return n
}

func sovRandao(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRandao(x uint64) (n int) {
	return sovRandao(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommitRandao) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitRandao: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitRandao: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitmentHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRandao
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRandao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitmentHash = append(m.CommitmentHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CommitmentHash == nil {
				m.CommitmentHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRandao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRandao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RevealRandao) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevealRandao: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevealRandao: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomSeed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRandao
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRandao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandomSeed = append(m.RandomSeed[:0], dAtA[iNdEx:postIndex]...)
			if m.RandomSeed == nil {
				m.RandomSeed = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRandao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRandao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRandao(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRandao
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRandao
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRandao
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRandao
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRandao
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRandao
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRandao        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRandao          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRandao = fmt.Errorf("proto: unexpected end of group")
)
