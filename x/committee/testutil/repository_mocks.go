// Code generated by MockGen. DO NOT EDIT.
// Source: types/repository.go
//
// Generated by this command:
//
//	mockgen --source=types/repository.go --destination=testutil/repository_mocks.go --package=testutil
//

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	types0 "github.com/dittonetwork/kepler/x/committee/types"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetCommittee mocks base method.
func (m *MockRepository) GetCommittee(ctx types.Context, epoch uint32) (types0.Committee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommittee", ctx, epoch)
	ret0, _ := ret[0].(types0.Committee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommittee indicates an expected call of GetCommittee.
func (mr *MockRepositoryMockRecorder) GetCommittee(ctx, epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommittee", reflect.TypeOf((*MockRepository)(nil).GetCommittee), ctx, epoch)
}

// GetLastCommittee mocks base method.
func (m *MockRepository) GetLastCommittee(ctx types.Context) (types0.Committee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastCommittee", ctx)
	ret0, _ := ret[0].(types0.Committee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastCommittee indicates an expected call of GetLastCommittee.
func (mr *MockRepositoryMockRecorder) GetLastCommittee(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastCommittee", reflect.TypeOf((*MockRepository)(nil).GetLastCommittee), ctx)
}

// GetLastEpoch mocks base method.
func (m *MockRepository) GetLastEpoch(ctx types.Context) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastEpoch", ctx)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastEpoch indicates an expected call of GetLastEpoch.
func (mr *MockRepositoryMockRecorder) GetLastEpoch(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastEpoch", reflect.TypeOf((*MockRepository)(nil).GetLastEpoch), ctx)
}

// HasCommittee mocks base method.
func (m *MockRepository) HasCommittee(ctx types.Context, epoch uint32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasCommittee", ctx, epoch)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasCommittee indicates an expected call of HasCommittee.
func (mr *MockRepositoryMockRecorder) HasCommittee(ctx, epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasCommittee", reflect.TypeOf((*MockRepository)(nil).HasCommittee), ctx, epoch)
}

// IterateCommittees mocks base method.
func (m *MockRepository) IterateCommittees(ctx types.Context, fn func(types0.Committee) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IterateCommittees", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// IterateCommittees indicates an expected call of IterateCommittees.
func (mr *MockRepositoryMockRecorder) IterateCommittees(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IterateCommittees", reflect.TypeOf((*MockRepository)(nil).IterateCommittees), ctx, fn)
}

// SetCommittee mocks base method.
func (m *MockRepository) SetCommittee(ctx types.Context, epoch uint32, committee types0.Committee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCommittee", ctx, epoch, committee)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCommittee indicates an expected call of SetCommittee.
func (mr *MockRepositoryMockRecorder) SetCommittee(ctx, epoch, committee any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommittee", reflect.TypeOf((*MockRepository)(nil).SetCommittee), ctx, epoch, committee)
}

// SetLastEpoch mocks base method.
func (m *MockRepository) SetLastEpoch(ctx types.Context, epoch uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLastEpoch", ctx, epoch)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastEpoch indicates an expected call of SetLastEpoch.
func (mr *MockRepositoryMockRecorder) SetLastEpoch(ctx, epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastEpoch", reflect.TypeOf((*MockRepository)(nil).SetLastEpoch), ctx, epoch)
}
