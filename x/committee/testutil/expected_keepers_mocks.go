// Code generated by MockGen. DO NOT EDIT.
// Source: types/expected_keepers.go
//
// Generated by this command:
//
//	mockgen --source=types/expected_keepers.go --destination=testutil/expected_keepers_mocks.go --package=testutil
//

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	types0 "github.com/dittonetwork/kepler/x/restaking/types"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountKeeper is a mock of AccountKeeper interface.
type MockAccountKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockAccountKeeperMockRecorder
	isgomock struct{}
}

// MockAccountKeeperMockRecorder is the mock recorder for MockAccountKeeper.
type MockAccountKeeperMockRecorder struct {
	mock *MockAccountKeeper
}

// NewMockAccountKeeper creates a new mock instance.
func NewMockAccountKeeper(ctrl *gomock.Controller) *MockAccountKeeper {
	mock := &MockAccountKeeper{ctrl: ctrl}
	mock.recorder = &MockAccountKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountKeeper) EXPECT() *MockAccountKeeperMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockAccountKeeper) GetAccount(arg0 context.Context, arg1 types.AccAddress) types.AccountI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(types.AccountI)
	return ret0
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountKeeperMockRecorder) GetAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountKeeper)(nil).GetAccount), arg0, arg1)
}

// MockBankKeeper is a mock of BankKeeper interface.
type MockBankKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockBankKeeperMockRecorder
	isgomock struct{}
}

// MockBankKeeperMockRecorder is the mock recorder for MockBankKeeper.
type MockBankKeeperMockRecorder struct {
	mock *MockBankKeeper
}

// NewMockBankKeeper creates a new mock instance.
func NewMockBankKeeper(ctrl *gomock.Controller) *MockBankKeeper {
	mock := &MockBankKeeper{ctrl: ctrl}
	mock.recorder = &MockBankKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankKeeper) EXPECT() *MockBankKeeperMockRecorder {
	return m.recorder
}

// SpendableCoins mocks base method.
func (m *MockBankKeeper) SpendableCoins(arg0 context.Context, arg1 types.AccAddress) types.Coins {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpendableCoins", arg0, arg1)
	ret0, _ := ret[0].(types.Coins)
	return ret0
}

// SpendableCoins indicates an expected call of SpendableCoins.
func (mr *MockBankKeeperMockRecorder) SpendableCoins(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpendableCoins", reflect.TypeOf((*MockBankKeeper)(nil).SpendableCoins), arg0, arg1)
}

// MockRestakingKeeper is a mock of RestakingKeeper interface.
type MockRestakingKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockRestakingKeeperMockRecorder
	isgomock struct{}
}

// MockRestakingKeeperMockRecorder is the mock recorder for MockRestakingKeeper.
type MockRestakingKeeperMockRecorder struct {
	mock *MockRestakingKeeper
}

// NewMockRestakingKeeper creates a new mock instance.
func NewMockRestakingKeeper(ctrl *gomock.Controller) *MockRestakingKeeper {
	mock := &MockRestakingKeeper{ctrl: ctrl}
	mock.recorder = &MockRestakingKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestakingKeeper) EXPECT() *MockRestakingKeeperMockRecorder {
	return m.recorder
}

// GetActiveEmergencyValidators mocks base method.
func (m *MockRestakingKeeper) GetActiveEmergencyValidators(ctx types.Context) ([]types0.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveEmergencyValidators", ctx)
	ret0, _ := ret[0].([]types0.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveEmergencyValidators indicates an expected call of GetActiveEmergencyValidators.
func (mr *MockRestakingKeeperMockRecorder) GetActiveEmergencyValidators(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveEmergencyValidators", reflect.TypeOf((*MockRestakingKeeper)(nil).GetActiveEmergencyValidators), ctx)
}

// MockParamSubspace is a mock of ParamSubspace interface.
type MockParamSubspace struct {
	ctrl     *gomock.Controller
	recorder *MockParamSubspaceMockRecorder
	isgomock struct{}
}

// MockParamSubspaceMockRecorder is the mock recorder for MockParamSubspace.
type MockParamSubspaceMockRecorder struct {
	mock *MockParamSubspace
}

// NewMockParamSubspace creates a new mock instance.
func NewMockParamSubspace(ctrl *gomock.Controller) *MockParamSubspace {
	mock := &MockParamSubspace{ctrl: ctrl}
	mock.recorder = &MockParamSubspaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParamSubspace) EXPECT() *MockParamSubspaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockParamSubspace) Get(arg0 context.Context, arg1 []byte, arg2 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Get", arg0, arg1, arg2)
}

// Get indicates an expected call of Get.
func (mr *MockParamSubspaceMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockParamSubspace)(nil).Get), arg0, arg1, arg2)
}

// Set mocks base method.
func (m *MockParamSubspace) Set(arg0 context.Context, arg1 []byte, arg2 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", arg0, arg1, arg2)
}

// Set indicates an expected call of Set.
func (mr *MockParamSubspaceMockRecorder) Set(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockParamSubspace)(nil).Set), arg0, arg1, arg2)
}

// MockEpochsHooks is a mock of EpochsHooks interface.
type MockEpochsHooks struct {
	ctrl     *gomock.Controller
	recorder *MockEpochsHooksMockRecorder
	isgomock struct{}
}

// MockEpochsHooksMockRecorder is the mock recorder for MockEpochsHooks.
type MockEpochsHooksMockRecorder struct {
	mock *MockEpochsHooks
}

// NewMockEpochsHooks creates a new mock instance.
func NewMockEpochsHooks(ctrl *gomock.Controller) *MockEpochsHooks {
	mock := &MockEpochsHooks{ctrl: ctrl}
	mock.recorder = &MockEpochsHooksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEpochsHooks) EXPECT() *MockEpochsHooksMockRecorder {
	return m.recorder
}

// AfterEpochEnd mocks base method.
func (m *MockEpochsHooks) AfterEpochEnd(ctx context.Context, epochID string, epochNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterEpochEnd", ctx, epochID, epochNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterEpochEnd indicates an expected call of AfterEpochEnd.
func (mr *MockEpochsHooksMockRecorder) AfterEpochEnd(ctx, epochID, epochNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterEpochEnd", reflect.TypeOf((*MockEpochsHooks)(nil).AfterEpochEnd), ctx, epochID, epochNumber)
}

// BeforeEpochStart mocks base method.
func (m *MockEpochsHooks) BeforeEpochStart(ctx context.Context, epochID string, epochNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeEpochStart", ctx, epochID, epochNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// BeforeEpochStart indicates an expected call of BeforeEpochStart.
func (mr *MockEpochsHooksMockRecorder) BeforeEpochStart(ctx, epochID, epochNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeEpochStart", reflect.TypeOf((*MockEpochsHooks)(nil).BeforeEpochStart), ctx, epochID, epochNumber)
}
