// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kepler/beacon/finalized_block_info.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FinalizedBlockInfo struct {
	SlotNum        uint64 `protobuf:"varint,1,opt,name=slotNum,proto3" json:"slotNum,omitempty"`
	BlockTimestamp uint64 `protobuf:"varint,2,opt,name=blockTimestamp,proto3" json:"blockTimestamp,omitempty"`
	BlockNum       uint64 `protobuf:"varint,3,opt,name=blockNum,proto3" json:"blockNum,omitempty"`
	BlockHash      string `protobuf:"bytes,4,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	Creator        string `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *FinalizedBlockInfo) Reset()         { *m = FinalizedBlockInfo{} }
func (m *FinalizedBlockInfo) String() string { return proto.CompactTextString(m) }
func (*FinalizedBlockInfo) ProtoMessage()    {}
func (*FinalizedBlockInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86b6b52769e2750, []int{0}
}
func (m *FinalizedBlockInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinalizedBlockInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinalizedBlockInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinalizedBlockInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalizedBlockInfo.Merge(m, src)
}
func (m *FinalizedBlockInfo) XXX_Size() int {
	return m.Size()
}
func (m *FinalizedBlockInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalizedBlockInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FinalizedBlockInfo proto.InternalMessageInfo

func (m *FinalizedBlockInfo) GetSlotNum() uint64 {
	if m != nil {
		return m.SlotNum
	}
	return 0
}

func (m *FinalizedBlockInfo) GetBlockTimestamp() uint64 {
	if m != nil {
		return m.BlockTimestamp
	}
	return 0
}

func (m *FinalizedBlockInfo) GetBlockNum() uint64 {
	if m != nil {
		return m.BlockNum
	}
	return 0
}

func (m *FinalizedBlockInfo) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *FinalizedBlockInfo) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*FinalizedBlockInfo)(nil), "kepler.beacon.FinalizedBlockInfo")
}

func init() {
	proto.RegisterFile("kepler/beacon/finalized_block_info.proto", fileDescriptor_a86b6b52769e2750)
}

var fileDescriptor_a86b6b52769e2750 = []byte{
	// 221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0xc8, 0x4e, 0x2d, 0xc8,
	0x49, 0x2d, 0xd2, 0x4f, 0x4a, 0x4d, 0x4c, 0xce, 0xcf, 0xd3, 0x4f, 0xcb, 0xcc, 0x4b, 0xcc, 0xc9,
	0xac, 0x4a, 0x4d, 0x89, 0x4f, 0xca, 0xc9, 0x4f, 0xce, 0x8e, 0xcf, 0xcc, 0x4b, 0xcb, 0xd7, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x85, 0xa8, 0xd4, 0x83, 0xa8, 0x54, 0x5a, 0xc5, 0xc8, 0x25,
	0xe4, 0x06, 0x53, 0xed, 0x04, 0x52, 0xec, 0x99, 0x97, 0x96, 0x2f, 0x24, 0xc1, 0xc5, 0x5e, 0x9c,
	0x93, 0x5f, 0xe2, 0x57, 0x9a, 0x2b, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x12, 0x04, 0xe3, 0x0a, 0xa9,
	0x71, 0xf1, 0x81, 0xcd, 0x0c, 0xc9, 0xcc, 0x4d, 0x2d, 0x2e, 0x49, 0xcc, 0x2d, 0x90, 0x60, 0x02,
	0x2b, 0x40, 0x13, 0x15, 0x92, 0xe2, 0xe2, 0x00, 0x8b, 0x80, 0x8c, 0x60, 0x06, 0xab, 0x80, 0xf3,
	0x85, 0x64, 0xb8, 0x38, 0xc1, 0x6c, 0x8f, 0xc4, 0xe2, 0x0c, 0x09, 0x16, 0x05, 0x46, 0x0d, 0xce,
	0x20, 0x84, 0x00, 0xc8, 0xee, 0xe4, 0xa2, 0xd4, 0xc4, 0x92, 0xfc, 0x22, 0x09, 0x56, 0xb0, 0x1c,
	0x8c, 0xeb, 0xa4, 0x7f, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31,
	0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0xa2, 0x50,
	0xff, 0x57, 0xc0, 0x42, 0xa0, 0xa4, 0xb2, 0x20, 0xb5, 0x38, 0x89, 0x0d, 0xec, 0x67, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x37, 0x7c, 0x62, 0x06, 0x1f, 0x01, 0x00, 0x00,
}

func (m *FinalizedBlockInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinalizedBlockInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinalizedBlockInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintFinalizedBlockInfo(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintFinalizedBlockInfo(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.BlockNum != 0 {
		i = encodeVarintFinalizedBlockInfo(dAtA, i, uint64(m.BlockNum))
		i--
		dAtA[i] = 0x18
	}
	if m.BlockTimestamp != 0 {
		i = encodeVarintFinalizedBlockInfo(dAtA, i, uint64(m.BlockTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.SlotNum != 0 {
		i = encodeVarintFinalizedBlockInfo(dAtA, i, uint64(m.SlotNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFinalizedBlockInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovFinalizedBlockInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FinalizedBlockInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlotNum != 0 {
		n += 1 + sovFinalizedBlockInfo(uint64(m.SlotNum))
	}
	if m.BlockTimestamp != 0 {
		n += 1 + sovFinalizedBlockInfo(uint64(m.BlockTimestamp))
	}
	if m.BlockNum != 0 {
		n += 1 + sovFinalizedBlockInfo(uint64(m.BlockNum))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovFinalizedBlockInfo(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovFinalizedBlockInfo(uint64(l))
	}
	return n
}

func sovFinalizedBlockInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFinalizedBlockInfo(x uint64) (n int) {
	return sovFinalizedBlockInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FinalizedBlockInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFinalizedBlockInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalizedBlockInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalizedBlockInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotNum", wireType)
			}
			m.SlotNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinalizedBlockInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTimestamp", wireType)
			}
			m.BlockTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinalizedBlockInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNum", wireType)
			}
			m.BlockNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinalizedBlockInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinalizedBlockInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFinalizedBlockInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFinalizedBlockInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinalizedBlockInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFinalizedBlockInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFinalizedBlockInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFinalizedBlockInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFinalizedBlockInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFinalizedBlockInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFinalizedBlockInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFinalizedBlockInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFinalizedBlockInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFinalizedBlockInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFinalizedBlockInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFinalizedBlockInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFinalizedBlockInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFinalizedBlockInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFinalizedBlockInfo = fmt.Errorf("proto: unexpected end of group")
)
