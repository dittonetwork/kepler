// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kepler/restaking/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Empty message params for query/NeedValidatorsUpdate.
type QueryNeedValidatorsUpdateRequest struct {
}

func (m *QueryNeedValidatorsUpdateRequest) Reset()         { *m = QueryNeedValidatorsUpdateRequest{} }
func (m *QueryNeedValidatorsUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNeedValidatorsUpdateRequest) ProtoMessage()    {}
func (*QueryNeedValidatorsUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42c580f934388672, []int{0}
}
func (m *QueryNeedValidatorsUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNeedValidatorsUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNeedValidatorsUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNeedValidatorsUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNeedValidatorsUpdateRequest.Merge(m, src)
}
func (m *QueryNeedValidatorsUpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNeedValidatorsUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNeedValidatorsUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNeedValidatorsUpdateRequest proto.InternalMessageInfo

// QueryNeedValidatorsUpdateResponse returns bool result.
type QueryNeedValidatorsUpdateResponse struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *QueryNeedValidatorsUpdateResponse) Reset()         { *m = QueryNeedValidatorsUpdateResponse{} }
func (m *QueryNeedValidatorsUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNeedValidatorsUpdateResponse) ProtoMessage()    {}
func (*QueryNeedValidatorsUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42c580f934388672, []int{1}
}
func (m *QueryNeedValidatorsUpdateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNeedValidatorsUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNeedValidatorsUpdateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNeedValidatorsUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNeedValidatorsUpdateResponse.Merge(m, src)
}
func (m *QueryNeedValidatorsUpdateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNeedValidatorsUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNeedValidatorsUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNeedValidatorsUpdateResponse proto.InternalMessageInfo

func (m *QueryNeedValidatorsUpdateResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// QueryPendingValidatorsRequest is the request type for the Query/PendingValidators RPC method.
type QueryPendingValidatorsRequest struct {
}

func (m *QueryPendingValidatorsRequest) Reset()         { *m = QueryPendingValidatorsRequest{} }
func (m *QueryPendingValidatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPendingValidatorsRequest) ProtoMessage()    {}
func (*QueryPendingValidatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42c580f934388672, []int{2}
}
func (m *QueryPendingValidatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingValidatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingValidatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingValidatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingValidatorsRequest.Merge(m, src)
}
func (m *QueryPendingValidatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingValidatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingValidatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingValidatorsRequest proto.InternalMessageInfo

// QueryPendingValidatorsResponse is the response type for the Query/PendingValidators RPC method.
type QueryPendingValidatorsResponse struct {
	// Pending is the returned pending validators from the module.
	Pending []Validator `protobuf:"bytes,1,rep,name=pending,proto3" json:"pending"`
}

func (m *QueryPendingValidatorsResponse) Reset()         { *m = QueryPendingValidatorsResponse{} }
func (m *QueryPendingValidatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingValidatorsResponse) ProtoMessage()    {}
func (*QueryPendingValidatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42c580f934388672, []int{3}
}
func (m *QueryPendingValidatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingValidatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingValidatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingValidatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingValidatorsResponse.Merge(m, src)
}
func (m *QueryPendingValidatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingValidatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingValidatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingValidatorsResponse proto.InternalMessageInfo

func (m *QueryPendingValidatorsResponse) GetPending() []Validator {
	if m != nil {
		return m.Pending
	}
	return nil
}

// QueryValidatorsRequest is the request type for the Query/Validators RPC method.
type QueryValidatorsRequest struct {
}

func (m *QueryValidatorsRequest) Reset()         { *m = QueryValidatorsRequest{} }
func (m *QueryValidatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorsRequest) ProtoMessage()    {}
func (*QueryValidatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42c580f934388672, []int{4}
}
func (m *QueryValidatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorsRequest.Merge(m, src)
}
func (m *QueryValidatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorsRequest proto.InternalMessageInfo

// QueryValidatorsResponse is the response type for the Query/Validators RPC method.
type QueryValidatorsResponse struct {
	// validators is a list of validators.
	Validators []*Validator `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators,omitempty"`
}

func (m *QueryValidatorsResponse) Reset()         { *m = QueryValidatorsResponse{} }
func (m *QueryValidatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorsResponse) ProtoMessage()    {}
func (*QueryValidatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42c580f934388672, []int{5}
}
func (m *QueryValidatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorsResponse.Merge(m, src)
}
func (m *QueryValidatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorsResponse proto.InternalMessageInfo

func (m *QueryValidatorsResponse) GetValidators() []*Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryNeedValidatorsUpdateRequest)(nil), "kepler.restaking.QueryNeedValidatorsUpdateRequest")
	proto.RegisterType((*QueryNeedValidatorsUpdateResponse)(nil), "kepler.restaking.QueryNeedValidatorsUpdateResponse")
	proto.RegisterType((*QueryPendingValidatorsRequest)(nil), "kepler.restaking.QueryPendingValidatorsRequest")
	proto.RegisterType((*QueryPendingValidatorsResponse)(nil), "kepler.restaking.QueryPendingValidatorsResponse")
	proto.RegisterType((*QueryValidatorsRequest)(nil), "kepler.restaking.QueryValidatorsRequest")
	proto.RegisterType((*QueryValidatorsResponse)(nil), "kepler.restaking.QueryValidatorsResponse")
}

func init() { proto.RegisterFile("kepler/restaking/query.proto", fileDescriptor_42c580f934388672) }

var fileDescriptor_42c580f934388672 = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x3d, 0xef, 0xd2, 0x40,
	0x18, 0xef, 0xe9, 0x5f, 0x34, 0xe7, 0xa2, 0x17, 0x82, 0xa4, 0x62, 0xa9, 0x9d, 0x40, 0x4d, 0x0f,
	0x8a, 0x71, 0xc1, 0x89, 0xd1, 0xc1, 0x68, 0x13, 0x19, 0x4c, 0x0c, 0x29, 0xf6, 0x49, 0x6d, 0xa8,
	0x77, 0xa5, 0x77, 0x55, 0x59, 0x5d, 0x5d, 0x4c, 0xf4, 0x9b, 0xe8, 0x87, 0x60, 0x24, 0x71, 0x71,
	0x32, 0x06, 0xfc, 0x20, 0x86, 0x6b, 0x29, 0xc4, 0xf2, 0xe6, 0xd6, 0xe6, 0xf7, 0xfa, 0x3c, 0x79,
	0x0e, 0x37, 0x26, 0x10, 0x47, 0x90, 0xd0, 0x04, 0x84, 0xf4, 0x26, 0x21, 0x0b, 0xe8, 0x34, 0x85,
	0x64, 0x66, 0xc7, 0x09, 0x97, 0x9c, 0xdc, 0xc8, 0x50, 0xbb, 0x40, 0xf5, 0x6a, 0xc0, 0x03, 0xae,
	0x40, 0xba, 0xfe, 0xca, 0x78, 0x7a, 0x23, 0xe0, 0x3c, 0x88, 0x80, 0x7a, 0x71, 0x48, 0x3d, 0xc6,
	0xb8, 0xf4, 0x64, 0xc8, 0x99, 0xc8, 0x51, 0xb3, 0x94, 0xf1, 0xce, 0x8b, 0x42, 0xdf, 0x93, 0x3c,
	0xc9, 0x18, 0x96, 0x85, 0xcd, 0xe7, 0xeb, 0xd8, 0xa7, 0x00, 0xfe, 0x70, 0x83, 0x89, 0x17, 0xb1,
	0xef, 0x49, 0x70, 0x61, 0x9a, 0x82, 0x90, 0x56, 0x1f, 0xdf, 0x3d, 0xc2, 0x11, 0x31, 0x67, 0x02,
	0x48, 0x0d, 0x57, 0x12, 0x10, 0x69, 0x24, 0xeb, 0xc8, 0x44, 0xad, 0x6b, 0x6e, 0xfe, 0x67, 0x35,
	0xf1, 0x1d, 0x25, 0x7e, 0x06, 0xcc, 0x0f, 0x59, 0xb0, 0xd5, 0x6f, 0xdc, 0x5f, 0x61, 0xe3, 0x10,
	0x21, 0xb7, 0xee, 0xe3, 0xab, 0x71, 0x06, 0xd6, 0x91, 0x79, 0xb9, 0x75, 0xdd, 0xb9, 0x6d, 0xff,
	0xbb, 0x1d, 0xbb, 0x90, 0x0d, 0x2e, 0xe6, 0xbf, 0x9a, 0x9a, 0xbb, 0x51, 0x58, 0x75, 0x5c, 0x53,
	0xf6, 0xe5, 0xe0, 0x21, 0xbe, 0x55, 0x42, 0x8a, 0x44, 0x5c, 0x2c, 0x4a, 0x9c, 0x11, 0xea, 0xee,
	0xd0, 0x9d, 0x4f, 0x17, 0xf8, 0x8a, 0x32, 0x26, 0xdf, 0x11, 0xbe, 0x59, 0x1a, 0x8b, 0xd0, 0xb2,
	0xd1, 0xd1, 0x0d, 0xe9, 0x9d, 0xf3, 0x05, 0x59, 0x7f, 0xeb, 0xf1, 0xc7, 0x1f, 0x7f, 0xbe, 0x5c,
	0x7a, 0x44, 0x1e, 0x52, 0x3f, 0x94, 0x92, 0x33, 0x90, 0xef, 0x79, 0x32, 0xa1, 0xe5, 0x6b, 0xe8,
	0xd2, 0x7c, 0x4f, 0xa3, 0xed, 0x00, 0xe4, 0x2b, 0xc2, 0x78, 0xa7, 0x6f, 0xeb, 0x40, 0x7c, 0xb9,
	0x68, 0xfb, 0x0c, 0x66, 0xde, 0xb0, 0xab, 0x1a, 0xde, 0x27, 0xed, 0x53, 0x0d, 0xb7, 0x3d, 0xbe,
	0x21, 0x5c, 0xdd, 0x77, 0x82, 0xc4, 0x39, 0x10, 0x7b, 0xe4, 0xa6, 0xf5, 0xde, 0x7f, 0x69, 0xf2,
	0xd2, 0x8e, 0x2a, 0xfd, 0x80, 0xdc, 0x3b, 0x51, 0x9a, 0x01, 0xf8, 0xa3, 0x54, 0x69, 0x07, 0x4f,
	0xe6, 0x4b, 0x03, 0x2d, 0x96, 0x06, 0xfa, 0xbd, 0x34, 0xd0, 0xe7, 0x95, 0xa1, 0x2d, 0x56, 0x86,
	0xf6, 0x73, 0x65, 0x68, 0x2f, 0x3b, 0x41, 0x28, 0xdf, 0xa4, 0x63, 0xfb, 0x35, 0x7f, 0xbb, 0xd7,
	0xef, 0xc3, 0x8e, 0xa3, 0x9c, 0xc5, 0x20, 0xc6, 0x15, 0xf5, 0x66, 0x7b, 0x7f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x06, 0x7c, 0x43, 0x99, 0x3b, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// PendingValidators returns currently pending validators of the module.
	PendingValidators(ctx context.Context, in *QueryPendingValidatorsRequest, opts ...grpc.CallOption) (*QueryPendingValidatorsResponse, error)
	// Retrieve a list of all validators.
	Validators(ctx context.Context, in *QueryValidatorsRequest, opts ...grpc.CallOption) (*QueryValidatorsResponse, error)
	// Return true if need update validators set
	NeedValidatorsUpdate(ctx context.Context, in *QueryNeedValidatorsUpdateRequest, opts ...grpc.CallOption) (*QueryNeedValidatorsUpdateResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) PendingValidators(ctx context.Context, in *QueryPendingValidatorsRequest, opts ...grpc.CallOption) (*QueryPendingValidatorsResponse, error) {
	out := new(QueryPendingValidatorsResponse)
	err := c.cc.Invoke(ctx, "/kepler.restaking.Query/PendingValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Validators(ctx context.Context, in *QueryValidatorsRequest, opts ...grpc.CallOption) (*QueryValidatorsResponse, error) {
	out := new(QueryValidatorsResponse)
	err := c.cc.Invoke(ctx, "/kepler.restaking.Query/Validators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NeedValidatorsUpdate(ctx context.Context, in *QueryNeedValidatorsUpdateRequest, opts ...grpc.CallOption) (*QueryNeedValidatorsUpdateResponse, error) {
	out := new(QueryNeedValidatorsUpdateResponse)
	err := c.cc.Invoke(ctx, "/kepler.restaking.Query/NeedValidatorsUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// PendingValidators returns currently pending validators of the module.
	PendingValidators(context.Context, *QueryPendingValidatorsRequest) (*QueryPendingValidatorsResponse, error)
	// Retrieve a list of all validators.
	Validators(context.Context, *QueryValidatorsRequest) (*QueryValidatorsResponse, error)
	// Return true if need update validators set
	NeedValidatorsUpdate(context.Context, *QueryNeedValidatorsUpdateRequest) (*QueryNeedValidatorsUpdateResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) PendingValidators(ctx context.Context, req *QueryPendingValidatorsRequest) (*QueryPendingValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingValidators not implemented")
}
func (*UnimplementedQueryServer) Validators(ctx context.Context, req *QueryValidatorsRequest) (*QueryValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validators not implemented")
}
func (*UnimplementedQueryServer) NeedValidatorsUpdate(ctx context.Context, req *QueryNeedValidatorsUpdateRequest) (*QueryNeedValidatorsUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NeedValidatorsUpdate not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_PendingValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kepler.restaking.Query/PendingValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingValidators(ctx, req.(*QueryPendingValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Validators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Validators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kepler.restaking.Query/Validators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Validators(ctx, req.(*QueryValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NeedValidatorsUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNeedValidatorsUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NeedValidatorsUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kepler.restaking.Query/NeedValidatorsUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NeedValidatorsUpdate(ctx, req.(*QueryNeedValidatorsUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kepler.restaking.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PendingValidators",
			Handler:    _Query_PendingValidators_Handler,
		},
		{
			MethodName: "Validators",
			Handler:    _Query_Validators_Handler,
		},
		{
			MethodName: "NeedValidatorsUpdate",
			Handler:    _Query_NeedValidatorsUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kepler/restaking/query.proto",
}

func (m *QueryNeedValidatorsUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNeedValidatorsUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNeedValidatorsUpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryNeedValidatorsUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNeedValidatorsUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNeedValidatorsUpdateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result {
		i--
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingValidatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingValidatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingValidatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPendingValidatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingValidatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingValidatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pending) > 0 {
		for iNdEx := len(m.Pending) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pending[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryValidatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryNeedValidatorsUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryNeedValidatorsUpdateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *QueryPendingValidatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPendingValidatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pending) > 0 {
		for _, e := range m.Pending {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryValidatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryValidatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryNeedValidatorsUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNeedValidatorsUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNeedValidatorsUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNeedValidatorsUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNeedValidatorsUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNeedValidatorsUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingValidatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingValidatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingValidatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingValidatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingValidatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingValidatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pending", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pending = append(m.Pending, Validator{})
			if err := m.Pending[len(m.Pending)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, &Validator{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
