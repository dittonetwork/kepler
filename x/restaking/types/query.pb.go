// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kepler/restaking/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// status of the validator.
type QueryOperatorStatusResponse_Status int32

const (
	// UnspecifiedStatus is the default status.
	UnknownOperatorStatus QueryOperatorStatusResponse_Status = 0
	// ActiveStatus - validator is active and participate in chain.
	ActiveOperatorStatus QueryOperatorStatusResponse_Status = 1
	// PendingStatus - validator is pending and waiting for BondValidator tx.
	PendingOperatorStatus QueryOperatorStatusResponse_Status = 2
	// InactiveStatus - validator is inactive and not participate in chain.
	InactiveOperatorStatus QueryOperatorStatusResponse_Status = 3
)

var QueryOperatorStatusResponse_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_ACTIVE",
	2: "STATUS_PENDING",
	3: "STATUS_INACTIVE",
}

var QueryOperatorStatusResponse_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"STATUS_ACTIVE":      1,
	"STATUS_PENDING":     2,
	"STATUS_INACTIVE":    3,
}

func (x QueryOperatorStatusResponse_Status) String() string {
	return proto.EnumName(QueryOperatorStatusResponse_Status_name, int32(x))
}

func (QueryOperatorStatusResponse_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_42c580f934388672, []int{1, 0}
}

// QueryValidatorStatusRequest is the request type for the Query/ValidatorStatus RPC method.
type QueryOperatorStatusRequest struct {
	// evm_address is the EVM address on L1.
	EvmAddress string `protobuf:"bytes,1,opt,name=evm_address,json=evmAddress,proto3" json:"evm_address,omitempty"`
}

func (m *QueryOperatorStatusRequest) Reset()         { *m = QueryOperatorStatusRequest{} }
func (m *QueryOperatorStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorStatusRequest) ProtoMessage()    {}
func (*QueryOperatorStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42c580f934388672, []int{0}
}
func (m *QueryOperatorStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorStatusRequest.Merge(m, src)
}
func (m *QueryOperatorStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorStatusRequest proto.InternalMessageInfo

func (m *QueryOperatorStatusRequest) GetEvmAddress() string {
	if m != nil {
		return m.EvmAddress
	}
	return ""
}

// QueryValidatorStatusResponse is the response type for the Query/ValidatorStatus RPC method.
type QueryOperatorStatusResponse struct {
	// status is the status of the validator.
	Status QueryOperatorStatusResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=kepler.restaking.QueryOperatorStatusResponse_Status" json:"status,omitempty"`
	// operator info
	Info Operator `protobuf:"bytes,2,opt,name=info,proto3" json:"info"`
}

func (m *QueryOperatorStatusResponse) Reset()         { *m = QueryOperatorStatusResponse{} }
func (m *QueryOperatorStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorStatusResponse) ProtoMessage()    {}
func (*QueryOperatorStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42c580f934388672, []int{1}
}
func (m *QueryOperatorStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorStatusResponse.Merge(m, src)
}
func (m *QueryOperatorStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorStatusResponse proto.InternalMessageInfo

func (m *QueryOperatorStatusResponse) GetStatus() QueryOperatorStatusResponse_Status {
	if m != nil {
		return m.Status
	}
	return UnknownOperatorStatus
}

func (m *QueryOperatorStatusResponse) GetInfo() Operator {
	if m != nil {
		return m.Info
	}
	return Operator{}
}

// Empty message params for query/NeedValidatorsUpdate.
type QueryNeedValidatorsUpdateRequest struct {
}

func (m *QueryNeedValidatorsUpdateRequest) Reset()         { *m = QueryNeedValidatorsUpdateRequest{} }
func (m *QueryNeedValidatorsUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNeedValidatorsUpdateRequest) ProtoMessage()    {}
func (*QueryNeedValidatorsUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42c580f934388672, []int{2}
}
func (m *QueryNeedValidatorsUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNeedValidatorsUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNeedValidatorsUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNeedValidatorsUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNeedValidatorsUpdateRequest.Merge(m, src)
}
func (m *QueryNeedValidatorsUpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNeedValidatorsUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNeedValidatorsUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNeedValidatorsUpdateRequest proto.InternalMessageInfo

// QueryNeedValidatorsUpdateResponse returns bool result.
type QueryNeedValidatorsUpdateResponse struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *QueryNeedValidatorsUpdateResponse) Reset()         { *m = QueryNeedValidatorsUpdateResponse{} }
func (m *QueryNeedValidatorsUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNeedValidatorsUpdateResponse) ProtoMessage()    {}
func (*QueryNeedValidatorsUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42c580f934388672, []int{3}
}
func (m *QueryNeedValidatorsUpdateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNeedValidatorsUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNeedValidatorsUpdateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNeedValidatorsUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNeedValidatorsUpdateResponse.Merge(m, src)
}
func (m *QueryNeedValidatorsUpdateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNeedValidatorsUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNeedValidatorsUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNeedValidatorsUpdateResponse proto.InternalMessageInfo

func (m *QueryNeedValidatorsUpdateResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// QueryPendingValidatorsRequest is the request type for the Query/PendingValidators RPC method.
type QueryPendingOperatorsRequest struct {
}

func (m *QueryPendingOperatorsRequest) Reset()         { *m = QueryPendingOperatorsRequest{} }
func (m *QueryPendingOperatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPendingOperatorsRequest) ProtoMessage()    {}
func (*QueryPendingOperatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42c580f934388672, []int{4}
}
func (m *QueryPendingOperatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingOperatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingOperatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingOperatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingOperatorsRequest.Merge(m, src)
}
func (m *QueryPendingOperatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingOperatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingOperatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingOperatorsRequest proto.InternalMessageInfo

// QueryPendingValidatorsResponse is the response type for the Query/PendingValidators RPC method.
type QueryPendingOperatorsResponse struct {
	// Pending is the returned pending validators from the module.
	Pending []Operator `protobuf:"bytes,1,rep,name=pending,proto3" json:"pending"`
}

func (m *QueryPendingOperatorsResponse) Reset()         { *m = QueryPendingOperatorsResponse{} }
func (m *QueryPendingOperatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingOperatorsResponse) ProtoMessage()    {}
func (*QueryPendingOperatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42c580f934388672, []int{5}
}
func (m *QueryPendingOperatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingOperatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingOperatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingOperatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingOperatorsResponse.Merge(m, src)
}
func (m *QueryPendingOperatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingOperatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingOperatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingOperatorsResponse proto.InternalMessageInfo

func (m *QueryPendingOperatorsResponse) GetPending() []Operator {
	if m != nil {
		return m.Pending
	}
	return nil
}

// QueryValidatorsRequest is the request type for the Query/Validators RPC method.
type QueryValidatorsRequest struct {
	// status enables to query for validators matching a given status.
	Status BondStatus `protobuf:"varint,1,opt,name=status,proto3,enum=kepler.restaking.BondStatus" json:"status,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryValidatorsRequest) Reset()         { *m = QueryValidatorsRequest{} }
func (m *QueryValidatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorsRequest) ProtoMessage()    {}
func (*QueryValidatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42c580f934388672, []int{6}
}
func (m *QueryValidatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorsRequest.Merge(m, src)
}
func (m *QueryValidatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorsRequest proto.InternalMessageInfo

func (m *QueryValidatorsRequest) GetStatus() BondStatus {
	if m != nil {
		return m.Status
	}
	return UnspecifiedStatus
}

func (m *QueryValidatorsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryValidatorsResponse is the response type for the Query/Validators RPC method.
type QueryValidatorsResponse struct {
	// validators is a list of validators.
	Validators []Validator `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators"`
	// pagination defines an optional pagination for the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryValidatorsResponse) Reset()         { *m = QueryValidatorsResponse{} }
func (m *QueryValidatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorsResponse) ProtoMessage()    {}
func (*QueryValidatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42c580f934388672, []int{7}
}
func (m *QueryValidatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorsResponse.Merge(m, src)
}
func (m *QueryValidatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorsResponse proto.InternalMessageInfo

func (m *QueryValidatorsResponse) GetValidators() []Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *QueryValidatorsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterEnum("kepler.restaking.QueryOperatorStatusResponse_Status", QueryOperatorStatusResponse_Status_name, QueryOperatorStatusResponse_Status_value)
	proto.RegisterType((*QueryOperatorStatusRequest)(nil), "kepler.restaking.QueryOperatorStatusRequest")
	proto.RegisterType((*QueryOperatorStatusResponse)(nil), "kepler.restaking.QueryOperatorStatusResponse")
	proto.RegisterType((*QueryNeedValidatorsUpdateRequest)(nil), "kepler.restaking.QueryNeedValidatorsUpdateRequest")
	proto.RegisterType((*QueryNeedValidatorsUpdateResponse)(nil), "kepler.restaking.QueryNeedValidatorsUpdateResponse")
	proto.RegisterType((*QueryPendingOperatorsRequest)(nil), "kepler.restaking.QueryPendingOperatorsRequest")
	proto.RegisterType((*QueryPendingOperatorsResponse)(nil), "kepler.restaking.QueryPendingOperatorsResponse")
	proto.RegisterType((*QueryValidatorsRequest)(nil), "kepler.restaking.QueryValidatorsRequest")
	proto.RegisterType((*QueryValidatorsResponse)(nil), "kepler.restaking.QueryValidatorsResponse")
}

func init() { proto.RegisterFile("kepler/restaking/query.proto", fileDescriptor_42c580f934388672) }

var fileDescriptor_42c580f934388672 = []byte{
	// 798 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0xe3, 0xb4, 0x0d, 0x74, 0x2a, 0x4a, 0x18, 0x95, 0x12, 0xdc, 0xd4, 0x35, 0x3e, 0x40,
	0x7f, 0xda, 0x24, 0x2d, 0x17, 0x0a, 0x48, 0x49, 0x9b, 0x56, 0x41, 0x28, 0x84, 0xa4, 0xe9, 0x01,
	0x0e, 0x91, 0x53, 0x0f, 0xc6, 0x4a, 0x32, 0xe3, 0x7a, 0x26, 0x29, 0x15, 0xe2, 0xc2, 0x09, 0xf5,
	0x84, 0x04, 0xe2, 0xd6, 0x13, 0x17, 0xc4, 0xa9, 0x12, 0xe7, 0xbd, 0xf7, 0xb4, 0xaa, 0xb4, 0x97,
	0x3d, 0xad, 0x56, 0xed, 0x4a, 0x7b, 0xdf, 0xbf, 0x60, 0x95, 0xf1, 0xe4, 0xc7, 0xda, 0x49, 0x93,
	0x5e, 0xa2, 0x78, 0xde, 0xf7, 0xfb, 0xe6, 0xe3, 0x79, 0xef, 0x8d, 0x41, 0xb2, 0x8e, 0xdc, 0x06,
	0xf2, 0x0c, 0x0f, 0x51, 0x66, 0xd6, 0x1d, 0x6c, 0x1b, 0xa7, 0x2d, 0xe4, 0x9d, 0xeb, 0xae, 0x47,
	0x18, 0x81, 0x71, 0x3f, 0xaa, 0xf7, 0xa2, 0xf2, 0x7b, 0x66, 0xd3, 0xc1, 0xc4, 0xe0, 0xbf, 0xbe,
	0x48, 0x5e, 0x3f, 0x21, 0xb4, 0x49, 0xa8, 0x51, 0x33, 0x29, 0xf2, 0xdd, 0x46, 0x3b, 0x55, 0x43,
	0xcc, 0x4c, 0x19, 0xae, 0x69, 0x3b, 0xd8, 0x64, 0x0e, 0xc1, 0x42, 0xbb, 0x60, 0x13, 0x9b, 0xf0,
	0xbf, 0x46, 0xe7, 0x9f, 0x58, 0x4d, 0xda, 0x84, 0xd8, 0x0d, 0x64, 0x98, 0xae, 0x63, 0x98, 0x18,
	0x13, 0xc6, 0x2d, 0x54, 0x44, 0x97, 0x43, 0x88, 0x2d, 0xd7, 0x32, 0x19, 0x12, 0x61, 0x35, 0x14,
	0x6e, 0x9b, 0x0d, 0xc7, 0x32, 0x19, 0xf1, 0x7c, 0x85, 0xf6, 0x25, 0x90, 0xbf, 0xeb, 0x60, 0x7d,
	0xeb, 0x22, 0xaf, 0xb3, 0x5c, 0x66, 0x26, 0x6b, 0xd1, 0x12, 0x3a, 0x6d, 0x21, 0xca, 0xe0, 0x0a,
	0x98, 0x43, 0xed, 0x66, 0xd5, 0xb4, 0x2c, 0x0f, 0x51, 0x9a, 0x90, 0x54, 0x69, 0x75, 0xb6, 0x04,
	0x50, 0xbb, 0x99, 0xf1, 0x57, 0xb4, 0x57, 0x51, 0xb0, 0x34, 0xd4, 0x4f, 0x5d, 0x82, 0x29, 0x82,
	0xdf, 0x80, 0x18, 0xe5, 0x2b, 0xdc, 0x3b, 0x9f, 0xde, 0xd1, 0x83, 0xa7, 0xa6, 0xdf, 0x63, 0xd7,
	0xc5, 0xa3, 0xc8, 0x01, 0x77, 0xc0, 0xb4, 0x83, 0x7f, 0x24, 0x89, 0xa8, 0x2a, 0xad, 0xce, 0xa5,
	0xe5, 0x70, 0xae, 0x6e, 0x9a, 0xec, 0xf4, 0xf5, 0xb3, 0x95, 0x48, 0x89, 0xab, 0xb5, 0xc7, 0x12,
	0x88, 0xf9, 0x89, 0x60, 0x0a, 0xc0, 0xf2, 0x51, 0xe6, 0xa8, 0x52, 0xae, 0x56, 0x0a, 0xe5, 0x62,
	0x6e, 0x2f, 0x7f, 0x90, 0xcf, 0xed, 0xc7, 0x23, 0xf2, 0x87, 0x17, 0x97, 0xea, 0xfb, 0x15, 0x5c,
	0xc7, 0xe4, 0x0c, 0xbf, 0x89, 0x02, 0x37, 0xc0, 0x3b, 0xc2, 0x92, 0xd9, 0x3b, 0xca, 0x1f, 0xe7,
	0xe2, 0x92, 0x9c, 0xb8, 0xb8, 0x54, 0x17, 0x32, 0x27, 0xcc, 0x69, 0xa3, 0x80, 0x78, 0x0b, 0xcc,
	0x0b, 0x71, 0x31, 0x57, 0xd8, 0xcf, 0x17, 0x0e, 0xe3, 0x51, 0x3f, 0x77, 0x11, 0x61, 0xcb, 0xc1,
	0x76, 0x40, 0x6e, 0x80, 0x77, 0x85, 0x3c, 0x5f, 0x10, 0xd9, 0xa7, 0x64, 0xf9, 0xe2, 0x52, 0x5d,
	0xcc, 0x63, 0x73, 0x48, 0x7e, 0x79, 0xfa, 0xf7, 0x7f, 0x94, 0x88, 0xa6, 0x01, 0x95, 0x1f, 0x5a,
	0x01, 0x21, 0xeb, 0xb8, 0x5b, 0x4f, 0x5a, 0xe1, 0x85, 0x17, 0x95, 0xd3, 0x76, 0xc1, 0x47, 0xf7,
	0x68, 0x44, 0x75, 0x16, 0x41, 0xcc, 0x43, 0xb4, 0xd5, 0x60, 0xbc, 0x3a, 0x6f, 0x97, 0xc4, 0x93,
	0xa6, 0x80, 0x24, 0x37, 0x07, 0xa8, 0xbb, 0x6d, 0xa1, 0xfd, 0x00, 0x96, 0x47, 0xc4, 0x45, 0xe2,
	0xcf, 0xc1, 0x5b, 0xae, 0x1f, 0x4b, 0x48, 0xea, 0xd4, 0x44, 0xb5, 0xea, 0x1a, 0xb4, 0xbf, 0x25,
	0xb0, 0xc8, 0xb3, 0xf7, 0xb1, 0xbb, 0xed, 0xb8, 0x13, 0xe8, 0xa6, 0x64, 0x38, 0x6b, 0x96, 0x60,
	0x2b, 0xd0, 0x35, 0x07, 0x00, 0xf4, 0x67, 0x4d, 0xf4, 0xce, 0xc7, 0xba, 0x3f, 0x98, 0x7a, 0x67,
	0x30, 0x75, 0x7f, 0xac, 0xc5, 0x60, 0xea, 0x45, 0xd3, 0xee, 0x1e, 0x63, 0x69, 0xc0, 0xa9, 0xfd,
	0x27, 0x81, 0x0f, 0x42, 0x60, 0xe2, 0x85, 0x0f, 0x00, 0xe8, 0x4d, 0x16, 0x15, 0xef, 0xbc, 0x14,
	0xa6, 0xeb, 0x39, 0xb3, 0xb3, 0x9d, 0x97, 0xfe, 0xf7, 0xe5, 0xd5, 0xba, 0x54, 0x1a, 0x70, 0xc2,
	0xc3, 0x21, 0xac, 0x9f, 0x8c, 0x65, 0xf5, 0x21, 0x06, 0x61, 0xd3, 0x8f, 0x66, 0xc0, 0x0c, 0x87,
	0x85, 0x57, 0x12, 0x88, 0x07, 0x0b, 0x05, 0xf5, 0x11, 0x73, 0x38, 0xa2, 0xe2, 0xb2, 0x31, 0xb1,
	0xde, 0x67, 0xd1, 0x76, 0x7f, 0x7b, 0xf2, 0xe2, 0xcf, 0xe8, 0x67, 0x70, 0xdb, 0xb0, 0x1c, 0xc6,
	0x08, 0x46, 0xec, 0x8c, 0x78, 0x75, 0x23, 0x7c, 0x1f, 0xa5, 0x0c, 0x51, 0xf8, 0x2a, 0xe9, 0xd1,
	0xfd, 0x25, 0x01, 0xd0, 0x3f, 0x64, 0xb8, 0x3a, 0x62, 0xf3, 0x50, 0x83, 0xc8, 0x6b, 0x13, 0x28,
	0x05, 0x60, 0x8a, 0x03, 0x6e, 0xc0, 0xb5, 0x71, 0x80, 0x7d, 0x8e, 0xff, 0x25, 0xb0, 0x30, 0x6c,
	0x9e, 0x60, 0x7a, 0xc4, 0xb6, 0xf7, 0x0c, 0xa8, 0xbc, 0xfd, 0x20, 0x8f, 0x80, 0x4e, 0x73, 0xe8,
	0x4d, 0xb8, 0x3e, 0x06, 0x1a, 0x23, 0x64, 0x55, 0xfd, 0x2f, 0x41, 0x87, 0x7a, 0x3e, 0x70, 0xef,
	0x6c, 0x4e, 0x78, 0x0b, 0xfb, 0xa4, 0x5b, 0x0f, 0xba, 0xb3, 0xb5, 0x7d, 0xce, 0xf8, 0x15, 0xfc,
	0x62, 0x0c, 0x63, 0xb7, 0xdc, 0x55, 0x7f, 0x4c, 0x8d, 0x5f, 0x06, 0xbe, 0x34, 0xbf, 0x66, 0xbf,
	0xbe, 0xbe, 0x55, 0xa4, 0x9b, 0x5b, 0x45, 0x7a, 0x7e, 0xab, 0x48, 0x7f, 0xdc, 0x29, 0x91, 0x9b,
	0x3b, 0x25, 0xf2, 0xf4, 0x4e, 0x89, 0x7c, 0xff, 0xa9, 0xed, 0xb0, 0x9f, 0x5a, 0x35, 0xfd, 0x84,
	0x34, 0x87, 0xee, 0xf0, 0xf3, 0xc0, 0x1e, 0xec, 0xdc, 0x45, 0xb4, 0x16, 0xe3, 0x9f, 0xba, 0xed,
	0xd7, 0x01, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x71, 0x20, 0x02, 0xd0, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// PendingValidators returns currently pending validators of the module.
	PendingOperators(ctx context.Context, in *QueryPendingOperatorsRequest, opts ...grpc.CallOption) (*QueryPendingOperatorsResponse, error)
	// Retrieve a list of all validators.
	Validators(ctx context.Context, in *QueryValidatorsRequest, opts ...grpc.CallOption) (*QueryValidatorsResponse, error)
	// Return true if need update validators set
	NeedValidatorsUpdate(ctx context.Context, in *QueryNeedValidatorsUpdateRequest, opts ...grpc.CallOption) (*QueryNeedValidatorsUpdateResponse, error)
	// Retrieve the status of a validator by its operator address.
	OperatorStatus(ctx context.Context, in *QueryOperatorStatusRequest, opts ...grpc.CallOption) (*QueryOperatorStatusResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) PendingOperators(ctx context.Context, in *QueryPendingOperatorsRequest, opts ...grpc.CallOption) (*QueryPendingOperatorsResponse, error) {
	out := new(QueryPendingOperatorsResponse)
	err := c.cc.Invoke(ctx, "/kepler.restaking.Query/PendingOperators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Validators(ctx context.Context, in *QueryValidatorsRequest, opts ...grpc.CallOption) (*QueryValidatorsResponse, error) {
	out := new(QueryValidatorsResponse)
	err := c.cc.Invoke(ctx, "/kepler.restaking.Query/Validators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NeedValidatorsUpdate(ctx context.Context, in *QueryNeedValidatorsUpdateRequest, opts ...grpc.CallOption) (*QueryNeedValidatorsUpdateResponse, error) {
	out := new(QueryNeedValidatorsUpdateResponse)
	err := c.cc.Invoke(ctx, "/kepler.restaking.Query/NeedValidatorsUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OperatorStatus(ctx context.Context, in *QueryOperatorStatusRequest, opts ...grpc.CallOption) (*QueryOperatorStatusResponse, error) {
	out := new(QueryOperatorStatusResponse)
	err := c.cc.Invoke(ctx, "/kepler.restaking.Query/OperatorStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// PendingValidators returns currently pending validators of the module.
	PendingOperators(context.Context, *QueryPendingOperatorsRequest) (*QueryPendingOperatorsResponse, error)
	// Retrieve a list of all validators.
	Validators(context.Context, *QueryValidatorsRequest) (*QueryValidatorsResponse, error)
	// Return true if need update validators set
	NeedValidatorsUpdate(context.Context, *QueryNeedValidatorsUpdateRequest) (*QueryNeedValidatorsUpdateResponse, error)
	// Retrieve the status of a validator by its operator address.
	OperatorStatus(context.Context, *QueryOperatorStatusRequest) (*QueryOperatorStatusResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) PendingOperators(ctx context.Context, req *QueryPendingOperatorsRequest) (*QueryPendingOperatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingOperators not implemented")
}
func (*UnimplementedQueryServer) Validators(ctx context.Context, req *QueryValidatorsRequest) (*QueryValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validators not implemented")
}
func (*UnimplementedQueryServer) NeedValidatorsUpdate(ctx context.Context, req *QueryNeedValidatorsUpdateRequest) (*QueryNeedValidatorsUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NeedValidatorsUpdate not implemented")
}
func (*UnimplementedQueryServer) OperatorStatus(ctx context.Context, req *QueryOperatorStatusRequest) (*QueryOperatorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorStatus not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_PendingOperators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingOperatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingOperators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kepler.restaking.Query/PendingOperators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingOperators(ctx, req.(*QueryPendingOperatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Validators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Validators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kepler.restaking.Query/Validators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Validators(ctx, req.(*QueryValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NeedValidatorsUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNeedValidatorsUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NeedValidatorsUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kepler.restaking.Query/NeedValidatorsUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NeedValidatorsUpdate(ctx, req.(*QueryNeedValidatorsUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OperatorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OperatorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kepler.restaking.Query/OperatorStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OperatorStatus(ctx, req.(*QueryOperatorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kepler.restaking.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PendingOperators",
			Handler:    _Query_PendingOperators_Handler,
		},
		{
			MethodName: "Validators",
			Handler:    _Query_Validators_Handler,
		},
		{
			MethodName: "NeedValidatorsUpdate",
			Handler:    _Query_NeedValidatorsUpdate_Handler,
		},
		{
			MethodName: "OperatorStatus",
			Handler:    _Query_OperatorStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kepler/restaking/query.proto",
}

func (m *QueryOperatorStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EvmAddress) > 0 {
		i -= len(m.EvmAddress)
		copy(dAtA[i:], m.EvmAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EvmAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryNeedValidatorsUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNeedValidatorsUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNeedValidatorsUpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryNeedValidatorsUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNeedValidatorsUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNeedValidatorsUpdateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result {
		i--
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingOperatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingOperatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingOperatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPendingOperatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingOperatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingOperatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pending) > 0 {
		for iNdEx := len(m.Pending) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pending[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryOperatorStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EvmAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOperatorStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	l = m.Info.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryNeedValidatorsUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryNeedValidatorsUpdateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *QueryPendingOperatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPendingOperatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pending) > 0 {
		for _, e := range m.Pending {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryValidatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryOperatorStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvmAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= QueryOperatorStatusResponse_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNeedValidatorsUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNeedValidatorsUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNeedValidatorsUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNeedValidatorsUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNeedValidatorsUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNeedValidatorsUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingOperatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingOperatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingOperatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingOperatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingOperatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingOperatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pending", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pending = append(m.Pending, Operator{})
			if err := m.Pending[len(m.Pending)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BondStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, Validator{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
