// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kepler/restaking/validator.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ValidatorStatus is the status of a validator
type ValidatorStatus int32

const (
	// VALIDATOR_STATUS_UNSPECIFIED indicates that the status of the validator is unknown
	ValidatorStatus_VALIDATOR_STATUS_UNSPECIFIED ValidatorStatus = 0
	// VALIDATOR_STATUS_BONDING indicates that the validator is in the process of bonding
	ValidatorStatus_VALIDATOR_STATUS_BONDING ValidatorStatus = 1
	// VALIDATOR_STATUS_BONDED indicates that the validator is connected to the network
	ValidatorStatus_VALIDATOR_STATUS_BONDED ValidatorStatus = 2
	// VALIDATOR_STATUS_UNBONDING indicates that the validator is in the process of unbonding from L1
	ValidatorStatus_VALIDATOR_STATUS_UNBONDING ValidatorStatus = 3
	// VALIDATOR_STATUS_UNBONDED indicates that the validator is not connected to the network
	ValidatorStatus_VALIDATOR_STATUS_UNBONDED ValidatorStatus = 4
)

var ValidatorStatus_name = map[int32]string{
	0: "VALIDATOR_STATUS_UNSPECIFIED",
	1: "VALIDATOR_STATUS_BONDING",
	2: "VALIDATOR_STATUS_BONDED",
	3: "VALIDATOR_STATUS_UNBONDING",
	4: "VALIDATOR_STATUS_UNBONDED",
}

var ValidatorStatus_value = map[string]int32{
	"VALIDATOR_STATUS_UNSPECIFIED": 0,
	"VALIDATOR_STATUS_BONDING":     1,
	"VALIDATOR_STATUS_BONDED":      2,
	"VALIDATOR_STATUS_UNBONDING":   3,
	"VALIDATOR_STATUS_UNBONDED":    4,
}

func (x ValidatorStatus) String() string {
	return proto.EnumName(ValidatorStatus_name, int32(x))
}

func (ValidatorStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a36da287b66aa06c, []int{0}
}

// Validator is a validator that is eligible for restaking
type Validator struct {
	// Address of the validator operator on L1
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Address of the validator on Kepler
	CosmosAddress string `protobuf:"bytes,2,opt,name=cosmos_address,json=cosmosAddress,proto3" json:"cosmos_address,omitempty"`
	// Public key of the validator (may change, e.g. on key rotation)
	PublicKey []byte `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// Flag to indicate if this validator is an emergency validator
	IsEmergency bool `protobuf:"varint,4,opt,name=is_emergency,json=isEmergency,proto3" json:"is_emergency,omitempty"`
	// Voting power of the validator
	VotingPower uint64 `protobuf:"varint,5,opt,name=voting_power,json=votingPower,proto3" json:"voting_power,omitempty"`
	// Status of the validator
	Status ValidatorStatus `protobuf:"varint,6,opt,name=status,proto3,enum=kepler.restaking.ValidatorStatus" json:"status,omitempty"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_a36da287b66aa06c, []int{0}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

func (m *Validator) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Validator) GetCosmosAddress() string {
	if m != nil {
		return m.CosmosAddress
	}
	return ""
}

func (m *Validator) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *Validator) GetIsEmergency() bool {
	if m != nil {
		return m.IsEmergency
	}
	return false
}

func (m *Validator) GetVotingPower() uint64 {
	if m != nil {
		return m.VotingPower
	}
	return 0
}

func (m *Validator) GetStatus() ValidatorStatus {
	if m != nil {
		return m.Status
	}
	return ValidatorStatus_VALIDATOR_STATUS_UNSPECIFIED
}

func init() {
	proto.RegisterEnum("kepler.restaking.ValidatorStatus", ValidatorStatus_name, ValidatorStatus_value)
	proto.RegisterType((*Validator)(nil), "kepler.restaking.Validator")
}

func init() { proto.RegisterFile("kepler/restaking/validator.proto", fileDescriptor_a36da287b66aa06c) }

var fileDescriptor_a36da287b66aa06c = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x8e, 0x93, 0x40,
	0x18, 0xc7, 0x99, 0x6e, 0xad, 0x76, 0x76, 0x5d, 0xc9, 0xc4, 0xc4, 0xd9, 0x75, 0x97, 0xb0, 0x9e,
	0x88, 0x89, 0x60, 0xf4, 0xe4, 0xc9, 0x50, 0x41, 0x83, 0x9a, 0xee, 0x06, 0xda, 0x1e, 0xbc, 0x10,
	0x0a, 0x13, 0x9c, 0xd0, 0x32, 0x64, 0x66, 0xda, 0xca, 0x0b, 0x78, 0xf6, 0x45, 0xbc, 0xf9, 0x10,
	0x1e, 0x1b, 0x4f, 0x1e, 0x4d, 0xfb, 0x22, 0xa6, 0x05, 0x1a, 0x53, 0xbb, 0xc7, 0xef, 0xf7, 0xff,
	0x7d, 0xff, 0x64, 0x26, 0x1f, 0xd4, 0x33, 0x52, 0x4c, 0x08, 0xb7, 0x38, 0x11, 0x32, 0xca, 0x68,
	0x9e, 0x5a, 0xf3, 0x68, 0x42, 0x93, 0x48, 0x32, 0x6e, 0x16, 0x9c, 0x49, 0x86, 0xd4, 0xca, 0x30,
	0x77, 0xc6, 0xf9, 0x59, 0xcc, 0xc4, 0x94, 0x89, 0x70, 0x9b, 0x5b, 0xd5, 0x50, 0xc9, 0x4f, 0xbe,
	0xb6, 0x60, 0x77, 0xd4, 0x14, 0x20, 0x0c, 0xef, 0x46, 0x49, 0xc2, 0x89, 0x10, 0x18, 0xe8, 0xc0,
	0xe8, 0xfa, 0xcd, 0x88, 0x5e, 0xc3, 0xd3, 0xba, 0xa4, 0x11, 0x5a, 0x1b, 0xa1, 0x87, 0x7f, 0xfd,
	0x78, 0xf6, 0xb0, 0x6e, 0xb4, 0xab, 0x24, 0x90, 0x9c, 0xe6, 0xa9, 0x7f, 0xbf, 0xa2, 0x35, 0x44,
	0x97, 0x10, 0x16, 0xb3, 0xf1, 0x84, 0xc6, 0x61, 0x46, 0x4a, 0x7c, 0xa4, 0x03, 0xe3, 0xc4, 0xef,
	0x56, 0xe4, 0x03, 0x29, 0xd1, 0x15, 0x3c, 0xa1, 0x22, 0x24, 0x53, 0xc2, 0x53, 0x92, 0xc7, 0x25,
	0x6e, 0xeb, 0xc0, 0xb8, 0xe7, 0x1f, 0x53, 0xe1, 0x36, 0x68, 0xa3, 0xcc, 0x99, 0xa4, 0x79, 0x1a,
	0x16, 0x6c, 0x41, 0x38, 0xbe, 0xa3, 0x03, 0xa3, 0xed, 0x1f, 0x57, 0xec, 0x66, 0x83, 0xd0, 0x2b,
	0xd8, 0x11, 0x32, 0x92, 0x33, 0x81, 0x3b, 0x3a, 0x30, 0x4e, 0x5f, 0x5c, 0x99, 0xfb, 0x7f, 0x61,
	0xee, 0x1e, 0x1b, 0x6c, 0x45, 0xbf, 0x5e, 0x78, 0xfa, 0x1d, 0xc0, 0x07, 0x7b, 0x19, 0xd2, 0xe1,
	0xc5, 0xc8, 0xfe, 0xe8, 0x39, 0xf6, 0xe0, 0xda, 0x0f, 0x83, 0x81, 0x3d, 0x18, 0x06, 0xe1, 0xb0,
	0x1f, 0xdc, 0xb8, 0x6f, 0xbc, 0xb7, 0x9e, 0xeb, 0xa8, 0x0a, 0xba, 0x80, 0xf8, 0x3f, 0xa3, 0x77,
	0xdd, 0x77, 0xbc, 0xfe, 0x3b, 0x15, 0xa0, 0xc7, 0xf0, 0xd1, 0xc1, 0xd4, 0x75, 0xd4, 0x16, 0xd2,
	0xe0, 0xf9, 0x81, 0xf2, 0x66, 0xf9, 0x08, 0x5d, 0xc2, 0xb3, 0x5b, 0x72, 0xd7, 0x51, 0xdb, 0xbd,
	0xf7, 0x3f, 0x57, 0x1a, 0x58, 0xae, 0x34, 0xf0, 0x67, 0xa5, 0x81, 0x6f, 0x6b, 0x4d, 0x59, 0xae,
	0x35, 0xe5, 0xf7, 0x5a, 0x53, 0x3e, 0x3d, 0x4f, 0xa9, 0xfc, 0x3c, 0x1b, 0x9b, 0x31, 0x9b, 0x5a,
	0x09, 0x95, 0x92, 0xe5, 0x44, 0x2e, 0x18, 0xcf, 0xac, 0xfa, 0x72, 0xbe, 0xfc, 0x73, 0x3b, 0xb2,
	0x2c, 0x88, 0x18, 0x77, 0xb6, 0xb7, 0xf0, 0xf2, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x7e,
	0x29, 0x84, 0x5c, 0x02, 0x00, 0x00,
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.VotingPower != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.VotingPower))
		i--
		dAtA[i] = 0x28
	}
	if m.IsEmergency {
		i--
		if m.IsEmergency {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CosmosAddress) > 0 {
		i -= len(m.CosmosAddress)
		copy(dAtA[i:], m.CosmosAddress)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.CosmosAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintValidator(dAtA []byte, offset int, v uint64) int {
	offset -= sovValidator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.CosmosAddress)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	if m.IsEmergency {
		n += 2
	}
	if m.VotingPower != 0 {
		n += 1 + sovValidator(uint64(m.VotingPower))
	}
	if m.Status != 0 {
		n += 1 + sovValidator(uint64(m.Status))
	}
	return n
}

func sovValidator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValidator(x uint64) (n int) {
	return sovValidator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEmergency", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEmergency = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPower", wireType)
			}
			m.VotingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingPower |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ValidatorStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValidator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValidator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValidator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValidator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValidator = fmt.Errorf("proto: unexpected end of group")
)
