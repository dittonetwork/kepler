// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kepler/restaking/validator.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BondStatus is the status of a validator
type BondStatus int32

const (
	// UNSPECIFIED indicates that the status of the validator is unknown.
	UnspecifiedStatus BondStatus = 0
	// UNBONDED indicates that the validator is in the process of bonding.
	Unbonded BondStatus = 1
	// UNBONDING defines a validator that is unbonding.
	Unbonding BondStatus = 2
	// BONDED defines a validator that is bonded.
	Bonded BondStatus = 3
)

var BondStatus_name = map[int32]string{
	0: "BOND_STATUS_UNSPECIFIED",
	1: "BOND_STATUS_UNBONDED",
	2: "BOND_STATUS_UNBONDING",
	3: "BOND_STATUS_BONDED",
}

var BondStatus_value = map[string]int32{
	"BOND_STATUS_UNSPECIFIED": 0,
	"BOND_STATUS_UNBONDED":    1,
	"BOND_STATUS_UNBONDING":   2,
	"BOND_STATUS_BONDED":      3,
}

func (x BondStatus) String() string {
	return proto.EnumName(BondStatus_name, int32(x))
}

func (BondStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a36da287b66aa06c, []int{0}
}

// Protocol is the protocol of the restaking module
type Protocol int32

const (
	// UNSPECIFIED indicates that the protocol is unknown.
	UnspecifiedProtocol Protocol = 0
	// DITTO defines the protocol for Ditto.
	Ditto Protocol = 1
	// SYMBIOTIC defines the protocol for Symbiotic.
	Symbiotic Protocol = 2
	// EIGENLAYER defines the protocol for EigenLayer.
	EigenLayer Protocol = 3
)

var Protocol_name = map[int32]string{
	0: "PROTOCOL_UNSPECIFIED",
	1: "PROTOCOL_DITTO",
	2: "PROTOCOL_SYMBIOTIC",
	3: "PROTOCOL_EIGENLAYER",
}

var Protocol_value = map[string]int32{
	"PROTOCOL_UNSPECIFIED": 0,
	"PROTOCOL_DITTO":       1,
	"PROTOCOL_SYMBIOTIC":   2,
	"PROTOCOL_EIGENLAYER":  3,
}

func (x Protocol) String() string {
	return proto.EnumName(Protocol_name, int32(x))
}

func (Protocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a36da287b66aa06c, []int{1}
}

// Validators is a collection of validators.
type Validators struct {
	// validators defines a list of validators.
	Validators []Validator `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators"`
}

func (m *Validators) Reset()         { *m = Validators{} }
func (m *Validators) String() string { return proto.CompactTextString(m) }
func (*Validators) ProtoMessage()    {}
func (*Validators) Descriptor() ([]byte, []int) {
	return fileDescriptor_a36da287b66aa06c, []int{0}
}
func (m *Validators) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validators) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validators.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validators) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validators.Merge(m, src)
}
func (m *Validators) XXX_Size() int {
	return m.Size()
}
func (m *Validators) XXX_DiscardUnknown() {
	xxx_messageInfo_Validators.DiscardUnknown(m)
}

var xxx_messageInfo_Validators proto.InternalMessageInfo

func (m *Validators) GetValidators() []Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

// ValidatorsChanges is a collection of validator changes before ABCI EndBlock.
type ValidatorsChanges struct {
	// created defines a list of created validators.
	Created []Validator `protobuf:"bytes,1,rep,name=created,proto3" json:"created"`
	// updated defines a list of updated validators.
	Updated []Validator `protobuf:"bytes,2,rep,name=updated,proto3" json:"updated"`
	// deleted defines a list of deleted validators.
	Deleted []Validator `protobuf:"bytes,3,rep,name=deleted,proto3" json:"deleted"`
}

func (m *ValidatorsChanges) Reset()         { *m = ValidatorsChanges{} }
func (m *ValidatorsChanges) String() string { return proto.CompactTextString(m) }
func (*ValidatorsChanges) ProtoMessage()    {}
func (*ValidatorsChanges) Descriptor() ([]byte, []int) {
	return fileDescriptor_a36da287b66aa06c, []int{1}
}
func (m *ValidatorsChanges) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorsChanges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorsChanges.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorsChanges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorsChanges.Merge(m, src)
}
func (m *ValidatorsChanges) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorsChanges) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorsChanges.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorsChanges proto.InternalMessageInfo

func (m *ValidatorsChanges) GetCreated() []Validator {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *ValidatorsChanges) GetUpdated() []Validator {
	if m != nil {
		return m.Updated
	}
	return nil
}

func (m *ValidatorsChanges) GetDeleted() []Validator {
	if m != nil {
		return m.Deleted
	}
	return nil
}

// EmergencyValidators is a collection of emergency validators.
type EmergencyValidators struct {
	// validators defines a list of emergency validators.
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *EmergencyValidators) Reset()         { *m = EmergencyValidators{} }
func (m *EmergencyValidators) String() string { return proto.CompactTextString(m) }
func (*EmergencyValidators) ProtoMessage()    {}
func (*EmergencyValidators) Descriptor() ([]byte, []int) {
	return fileDescriptor_a36da287b66aa06c, []int{2}
}
func (m *EmergencyValidators) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmergencyValidators) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmergencyValidators.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmergencyValidators) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmergencyValidators.Merge(m, src)
}
func (m *EmergencyValidators) XXX_Size() int {
	return m.Size()
}
func (m *EmergencyValidators) XXX_DiscardUnknown() {
	xxx_messageInfo_EmergencyValidators.DiscardUnknown(m)
}

var xxx_messageInfo_EmergencyValidators proto.InternalMessageInfo

func (m *EmergencyValidators) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// Description defines a validator description.
type Description struct {
	// moniker defines a human-readable name for the validator.
	Moniker string `protobuf:"bytes,1,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// identity defines an optional identity signature (ex. UPort or Keybase).
	Identity string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	// website defines an optional website link.
	Website string `protobuf:"bytes,3,opt,name=website,proto3" json:"website,omitempty"`
	// security_contact defines an optional email for security contact.
	SecurityContact string `protobuf:"bytes,4,opt,name=security_contact,json=securityContact,proto3" json:"security_contact,omitempty"`
	// details define other optional details.
	Details string `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *Description) Reset()         { *m = Description{} }
func (m *Description) String() string { return proto.CompactTextString(m) }
func (*Description) ProtoMessage()    {}
func (*Description) Descriptor() ([]byte, []int) {
	return fileDescriptor_a36da287b66aa06c, []int{3}
}
func (m *Description) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Description) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Description.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Description) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Description.Merge(m, src)
}
func (m *Description) XXX_Size() int {
	return m.Size()
}
func (m *Description) XXX_DiscardUnknown() {
	xxx_messageInfo_Description.DiscardUnknown(m)
}

var xxx_messageInfo_Description proto.InternalMessageInfo

func (m *Description) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *Description) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *Description) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *Description) GetSecurityContact() string {
	if m != nil {
		return m.SecurityContact
	}
	return ""
}

func (m *Description) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

// Validator defines a validator in the restaking module.
type Validator struct {
	// operator_address is account address in Bech32 format.
	// the same as the operator address but diff algorithm generation.
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	// evm_operator_address is the Ethereum-style address (hex-encoded, 0x-prefixed) derived from
	// the last 20 bytes of the keccak256 hash of the operator's public key.
	// This address need for binding updates with bond.
	EvmOperatorAddress string `protobuf:"bytes,2,opt,name=evm_operator_address,json=evmOperatorAddress,proto3" json:"evm_operator_address,omitempty"`
	// consensus_pubkey is the consensus ed25519 public key of the validator, as a
	// Protobuf Any.
	ConsensusPubkey *types.Any `protobuf:"bytes,3,opt,name=consensus_pubkey,json=consensusPubkey,proto3" json:"consensus_pubkey,omitempty"`
	// is_emergency defines whether the validator is an emergency validator
	IsEmergency bool `protobuf:"varint,4,opt,name=is_emergency,json=isEmergency,proto3" json:"is_emergency,omitempty"`
	// status defines the validator's status (bonded/unbonding/unbonded)
	Status BondStatus `protobuf:"varint,5,opt,name=status,proto3,enum=kepler.restaking.BondStatus" json:"status,omitempty"`
	// voting_power is the voting power of the validator
	VotingPower int64 `protobuf:"varint,6,opt,name=voting_power,json=votingPower,proto3" json:"voting_power,omitempty"`
	// protocol is the protocol of the restaking module
	Protocol    Protocol    `protobuf:"varint,7,opt,name=protocol,proto3,enum=kepler.restaking.Protocol" json:"protocol,omitempty"`
	Description Description `protobuf:"bytes,8,opt,name=description,proto3" json:"description"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_a36da287b66aa06c, []int{4}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("kepler.restaking.BondStatus", BondStatus_name, BondStatus_value)
	proto.RegisterEnum("kepler.restaking.Protocol", Protocol_name, Protocol_value)
	proto.RegisterType((*Validators)(nil), "kepler.restaking.Validators")
	proto.RegisterType((*ValidatorsChanges)(nil), "kepler.restaking.ValidatorsChanges")
	proto.RegisterType((*EmergencyValidators)(nil), "kepler.restaking.EmergencyValidators")
	proto.RegisterType((*Description)(nil), "kepler.restaking.Description")
	proto.RegisterType((*Validator)(nil), "kepler.restaking.Validator")
}

func init() { proto.RegisterFile("kepler/restaking/validator.proto", fileDescriptor_a36da287b66aa06c) }

var fileDescriptor_a36da287b66aa06c = []byte{
	// 872 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0xcf, 0x6e, 0xdb, 0x46,
	0x17, 0xc5, 0x45, 0xcb, 0xb1, 0xa5, 0x51, 0x3e, 0x9b, 0x1e, 0x2b, 0x08, 0x3f, 0xb6, 0x91, 0x59,
	0x01, 0x6d, 0x5d, 0x03, 0xa5, 0x52, 0xb7, 0xc8, 0x22, 0x5d, 0x89, 0x92, 0x1a, 0x28, 0x75, 0x2c,
	0x81, 0x92, 0x0b, 0xb8, 0x1b, 0x82, 0x22, 0x6f, 0x98, 0x81, 0xa4, 0x19, 0x82, 0x33, 0xb2, 0xcb,
	0x37, 0x08, 0xb4, 0xea, 0x0b, 0x08, 0x08, 0xd0, 0x4d, 0x96, 0x45, 0xd1, 0x65, 0x1f, 0x20, 0xc8,
	0x2a, 0xe8, 0xaa, 0xab, 0xa2, 0xb0, 0x17, 0xe9, 0x63, 0x14, 0xfc, 0x2b, 0xd5, 0x02, 0x0a, 0x6f,
	0x04, 0xdd, 0x99, 0xf3, 0x3b, 0x38, 0xf7, 0xce, 0x05, 0x88, 0xb4, 0x31, 0xf8, 0x13, 0x08, 0x1a,
	0x01, 0x70, 0x61, 0x8f, 0x09, 0xf5, 0x1a, 0x17, 0xf6, 0x84, 0xb8, 0xb6, 0x60, 0x81, 0xee, 0x07,
	0x4c, 0x30, 0x2c, 0x27, 0x0a, 0x3d, 0x57, 0xa8, 0x7b, 0xf6, 0x94, 0x50, 0xd6, 0x88, 0x7f, 0x13,
	0x91, 0xfa, 0x7f, 0x87, 0xf1, 0x29, 0xe3, 0x56, 0x5c, 0x35, 0x92, 0x22, 0xbd, 0xaa, 0x7a, 0xcc,
	0x63, 0xc9, 0x79, 0xf4, 0x2f, 0x03, 0x3c, 0xc6, 0xbc, 0x09, 0x34, 0xe2, 0x6a, 0x34, 0x7b, 0xde,
	0xb0, 0x69, 0x98, 0x5c, 0xd5, 0x7b, 0x08, 0x7d, 0x97, 0x65, 0xe0, 0xb8, 0x89, 0x50, 0x9e, 0x88,
	0x2b, 0x92, 0x56, 0x3c, 0xac, 0x1c, 0x7f, 0xa0, 0xdf, 0xcc, 0xa4, 0xe7, 0x84, 0xb1, 0xf9, 0xe6,
	0xcf, 0x83, 0x82, 0xb9, 0x02, 0xd5, 0xdf, 0x4a, 0x68, 0x6f, 0xe9, 0xd8, 0x7a, 0x61, 0x53, 0x0f,
	0x38, 0xfe, 0x1a, 0x6d, 0x3b, 0x01, 0xd8, 0x02, 0xdc, 0xdb, 0xbb, 0x66, 0x44, 0x04, 0xcf, 0x7c,
	0x37, 0x86, 0x37, 0x6e, 0x0d, 0xa7, 0x44, 0x04, 0xbb, 0x30, 0x81, 0x08, 0x2e, 0xde, 0x1a, 0x4e,
	0x89, 0xfa, 0x33, 0xb4, 0xdf, 0x99, 0x42, 0xe0, 0x01, 0x75, 0xc2, 0x95, 0x31, 0x3d, 0x42, 0x65,
	0xdb, 0x75, 0x03, 0xe0, 0x1c, 0x92, 0x29, 0x95, 0x0d, 0xe5, 0xf7, 0x5f, 0x3f, 0xaf, 0xa6, 0x4f,
	0xd1, 0x4c, 0xee, 0x06, 0x22, 0x20, 0xd4, 0x33, 0x97, 0xd2, 0xfa, 0x6b, 0x09, 0x55, 0xda, 0xc0,
	0x9d, 0x80, 0xf8, 0x82, 0x30, 0x8a, 0x15, 0xb4, 0x3d, 0x65, 0x94, 0x8c, 0x21, 0x50, 0x24, 0x4d,
	0x3a, 0x2c, 0x9b, 0x59, 0x89, 0x55, 0x54, 0x22, 0x2e, 0x50, 0x41, 0x44, 0xa8, 0x6c, 0xc4, 0x57,
	0x79, 0x1d, 0x51, 0x97, 0x30, 0xe2, 0x44, 0x80, 0x52, 0x4c, 0xa8, 0xb4, 0xc4, 0x9f, 0x21, 0x99,
	0x83, 0x33, 0x0b, 0x88, 0x08, 0x2d, 0x87, 0x51, 0x61, 0x3b, 0x42, 0xd9, 0x8c, 0x25, 0xbb, 0xd9,
	0x79, 0x2b, 0x39, 0x8e, 0x4c, 0x5c, 0x10, 0x36, 0x99, 0x70, 0xe5, 0x4e, 0x62, 0x92, 0x96, 0x8f,
	0x37, 0xff, 0x7e, 0x75, 0x20, 0xd5, 0xdf, 0x17, 0x51, 0x39, 0xef, 0x18, 0xb7, 0x90, 0xcc, 0x7c,
	0x08, 0xa2, 0xff, 0x56, 0xda, 0x4e, 0x92, 0xf8, 0x3f, 0xfa, 0xde, 0xcd, 0x88, 0xf4, 0x18, 0x3f,
	0x44, 0x55, 0xb8, 0x98, 0x5a, 0x6b, 0x46, 0x49, 0x7f, 0x18, 0x2e, 0xa6, 0xbd, 0x1b, 0xc4, 0x39,
	0x92, 0x1d, 0x46, 0x39, 0x50, 0x3e, 0xe3, 0x96, 0x3f, 0x1b, 0x8d, 0x21, 0x8c, 0x5b, 0xae, 0x1c,
	0x57, 0xf5, 0x64, 0xa5, 0xf5, 0x6c, 0xa5, 0xf5, 0x26, 0x0d, 0x0d, 0xe5, 0xed, 0x32, 0x8c, 0x13,
	0x84, 0xbe, 0x60, 0x7a, 0x7f, 0x36, 0xfa, 0x16, 0x42, 0x73, 0x37, 0xf7, 0xe9, 0xc7, 0x36, 0xf8,
	0x23, 0x74, 0x97, 0x70, 0x0b, 0xb2, 0xc7, 0x8d, 0xc7, 0x54, 0x32, 0x2b, 0x84, 0xe7, 0xef, 0x8d,
	0xbf, 0x42, 0x5b, 0x5c, 0xd8, 0x62, 0x96, 0x4c, 0x68, 0xe7, 0xf8, 0xc3, 0xf5, 0xc5, 0x31, 0x18,
	0x75, 0x07, 0xb1, 0xc6, 0x4c, 0xb5, 0x91, 0xf1, 0x05, 0x13, 0x84, 0x7a, 0x96, 0xcf, 0x2e, 0x21,
	0x50, 0xb6, 0x34, 0xe9, 0xb0, 0x68, 0x56, 0x92, 0xb3, 0x7e, 0x74, 0x84, 0x1f, 0xa1, 0x52, 0x1c,
	0xdb, 0x61, 0x13, 0x65, 0x3b, 0xb6, 0x56, 0xd7, 0xad, 0xfb, 0xa9, 0xc2, 0xcc, 0xb5, 0xf8, 0x29,
	0xaa, 0xb8, 0xcb, 0xed, 0x51, 0x4a, 0xf1, 0x24, 0x1e, 0xac, 0xa3, 0x2b, 0x2b, 0x66, 0x94, 0xa3,
	0x85, 0x7e, 0xfd, 0xfe, 0xe7, 0x23, 0xc9, 0x5c, 0x85, 0x1f, 0x97, 0x5e, 0xbe, 0x3a, 0x28, 0x44,
	0x2f, 0x7d, 0xf4, 0x9b, 0x84, 0xd0, 0xb2, 0x0f, 0x7c, 0x8c, 0xee, 0x1b, 0xbd, 0xd3, 0xb6, 0x35,
	0x18, 0x36, 0x87, 0x67, 0x03, 0xeb, 0xec, 0x74, 0xd0, 0xef, 0xb4, 0xba, 0xdf, 0x74, 0x3b, 0x6d,
	0xb9, 0xa0, 0xde, 0x9b, 0x2f, 0xb4, 0xbd, 0x33, 0xca, 0x7d, 0x70, 0xc8, 0x73, 0x02, 0x19, 0xf3,
	0x09, 0xaa, 0xfe, 0x9b, 0x89, 0xaa, 0x4e, 0x5b, 0x96, 0xd4, 0xbb, 0xf3, 0x85, 0x56, 0x3a, 0xa3,
	0x23, 0x46, 0x5d, 0x70, 0xf1, 0x21, 0xba, 0xb7, 0xae, 0xeb, 0x9e, 0x3e, 0x91, 0x37, 0xd4, 0xff,
	0xcd, 0x17, 0x5a, 0x39, 0x11, 0x12, 0xea, 0xe1, 0x3a, 0xc2, 0xab, 0xca, 0xd4, 0xaf, 0xa8, 0xa2,
	0xf9, 0x42, 0xdb, 0x32, 0x62, 0x37, 0x75, 0xf3, 0xe5, 0x4f, 0xb5, 0xc2, 0xd1, 0x2f, 0x12, 0x2a,
	0x65, 0xb3, 0xc2, 0x5f, 0xa0, 0x6a, 0xdf, 0xec, 0x0d, 0x7b, 0xad, 0xde, 0xc9, 0x8d, 0xe4, 0xf7,
	0xe7, 0x0b, 0x6d, 0x7f, 0x25, 0x79, 0x8e, 0x3c, 0x40, 0x3b, 0x39, 0xd2, 0xee, 0x0e, 0x87, 0x3d,
	0x59, 0x52, 0xcb, 0xf3, 0x85, 0x76, 0xa7, 0x4d, 0x84, 0x60, 0xf8, 0x63, 0x84, 0xf3, 0xeb, 0xc1,
	0xf9, 0x33, 0xa3, 0xdb, 0x1b, 0x76, 0x5b, 0x59, 0xde, 0x41, 0x38, 0x1d, 0x11, 0x26, 0x88, 0x83,
	0x3f, 0x45, 0xfb, 0xb9, 0xac, 0xd3, 0x7d, 0xd2, 0x39, 0x3d, 0x69, 0x9e, 0x77, 0x4c, 0xb9, 0xa8,
	0xee, 0xcc, 0x17, 0x1a, 0xea, 0x10, 0x0f, 0xe8, 0x89, 0x1d, 0x42, 0x90, 0x84, 0x36, 0x9e, 0xbe,
	0xb9, 0xaa, 0x49, 0xef, 0xae, 0x6a, 0xd2, 0x5f, 0x57, 0x35, 0xe9, 0xc7, 0xeb, 0x5a, 0xe1, 0xdd,
	0x75, 0xad, 0xf0, 0xc7, 0x75, 0xad, 0xf0, 0xfd, 0x43, 0x8f, 0x88, 0x17, 0xb3, 0x91, 0xee, 0xb0,
	0x69, 0xc3, 0x8d, 0x12, 0x50, 0x10, 0x97, 0x2c, 0x18, 0x37, 0xd2, 0x4f, 0xc7, 0x0f, 0x2b, 0x1f,
	0x0f, 0x11, 0xfa, 0xc0, 0x47, 0x5b, 0xf1, 0x7e, 0x7c, 0xf9, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xe4, 0x27, 0xea, 0xdd, 0x5d, 0x06, 0x00, 0x00,
}

func (this *Description) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Description)
	if !ok {
		that2, ok := that.(Description)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Moniker != that1.Moniker {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.Website != that1.Website {
		return false
	}
	if this.SecurityContact != that1.SecurityContact {
		return false
	}
	if this.Details != that1.Details {
		return false
	}
	return true
}
func (this *Validator) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Validator)
	if !ok {
		that2, ok := that.(Validator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OperatorAddress != that1.OperatorAddress {
		return false
	}
	if this.EvmOperatorAddress != that1.EvmOperatorAddress {
		return false
	}
	if !this.ConsensusPubkey.Equal(that1.ConsensusPubkey) {
		return false
	}
	if this.IsEmergency != that1.IsEmergency {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.VotingPower != that1.VotingPower {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	if !this.Description.Equal(&that1.Description) {
		return false
	}
	return true
}
func (m *Validators) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validators) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validators) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValidator(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorsChanges) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorsChanges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorsChanges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deleted) > 0 {
		for iNdEx := len(m.Deleted) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deleted[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValidator(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Updated) > 0 {
		for iNdEx := len(m.Updated) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Updated[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValidator(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Created) > 0 {
		for iNdEx := len(m.Created) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Created[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValidator(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EmergencyValidators) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmergencyValidators) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmergencyValidators) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintValidator(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Description) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Description) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Description) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SecurityContact) > 0 {
		i -= len(m.SecurityContact)
		copy(dAtA[i:], m.SecurityContact)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.SecurityContact)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.Protocol != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.Protocol))
		i--
		dAtA[i] = 0x38
	}
	if m.VotingPower != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.VotingPower))
		i--
		dAtA[i] = 0x30
	}
	if m.Status != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.IsEmergency {
		i--
		if m.IsEmergency {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.ConsensusPubkey != nil {
		{
			size, err := m.ConsensusPubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EvmOperatorAddress) > 0 {
		i -= len(m.EvmOperatorAddress)
		copy(dAtA[i:], m.EvmOperatorAddress)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.EvmOperatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintValidator(dAtA []byte, offset int, v uint64) int {
	offset -= sovValidator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Validators) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovValidator(uint64(l))
		}
	}
	return n
}

func (m *ValidatorsChanges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Created) > 0 {
		for _, e := range m.Created {
			l = e.Size()
			n += 1 + l + sovValidator(uint64(l))
		}
	}
	if len(m.Updated) > 0 {
		for _, e := range m.Updated {
			l = e.Size()
			n += 1 + l + sovValidator(uint64(l))
		}
	}
	if len(m.Deleted) > 0 {
		for _, e := range m.Deleted {
			l = e.Size()
			n += 1 + l + sovValidator(uint64(l))
		}
	}
	return n
}

func (m *EmergencyValidators) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovValidator(uint64(l))
		}
	}
	return n
}

func (m *Description) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.SecurityContact)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	return n
}

func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.EvmOperatorAddress)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	if m.ConsensusPubkey != nil {
		l = m.ConsensusPubkey.Size()
		n += 1 + l + sovValidator(uint64(l))
	}
	if m.IsEmergency {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovValidator(uint64(m.Status))
	}
	if m.VotingPower != 0 {
		n += 1 + sovValidator(uint64(m.VotingPower))
	}
	if m.Protocol != 0 {
		n += 1 + sovValidator(uint64(m.Protocol))
	}
	l = m.Description.Size()
	n += 1 + l + sovValidator(uint64(l))
	return n
}

func sovValidator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValidator(x uint64) (n int) {
	return sovValidator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Validators) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validators: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validators: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, Validator{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorsChanges) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorsChanges: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorsChanges: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Created = append(m.Created, Validator{})
			if err := m.Created[len(m.Created)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updated = append(m.Updated, Validator{})
			if err := m.Updated[len(m.Updated)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deleted = append(m.Deleted, Validator{})
			if err := m.Deleted[len(m.Deleted)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmergencyValidators) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmergencyValidators: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmergencyValidators: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Description) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Description: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Description: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityContact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityContact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmOperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvmOperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusPubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusPubkey == nil {
				m.ConsensusPubkey = &types.Any{}
			}
			if err := m.ConsensusPubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEmergency", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEmergency = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BondStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPower", wireType)
			}
			m.VotingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingPower |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= Protocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValidator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValidator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValidator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValidator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValidator = fmt.Errorf("proto: unexpected end of group")
)
