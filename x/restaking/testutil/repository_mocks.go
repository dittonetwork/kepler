// Code generated by MockGen. DO NOT EDIT.
// Source: types/repository.go
//
// Generated by this command:
//
//	mockgen --source=types/repository.go --destination=testutil/repository_mocks.go --package=testutil
//

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	types0 "github.com/dittonetwork/kepler/x/restaking/types"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddValidatorsChange mocks base method.
func (m *MockRepository) AddValidatorsChange(ctx types.Context, validator types0.Validator, ctype types0.ValidatorChangeType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddValidatorsChange", ctx, validator, ctype)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddValidatorsChange indicates an expected call of AddValidatorsChange.
func (mr *MockRepositoryMockRecorder) AddValidatorsChange(ctx, validator, ctype any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddValidatorsChange", reflect.TypeOf((*MockRepository)(nil).AddValidatorsChange), ctx, validator, ctype)
}

// GetAllValidators mocks base method.
func (m *MockRepository) GetAllValidators(ctx types.Context) ([]types0.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllValidators", ctx)
	ret0, _ := ret[0].([]types0.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllValidators indicates an expected call of GetAllValidators.
func (mr *MockRepositoryMockRecorder) GetAllValidators(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllValidators", reflect.TypeOf((*MockRepository)(nil).GetAllValidators), ctx)
}

// GetBondedValidators mocks base method.
func (m *MockRepository) GetBondedValidators(ctx types.Context) ([]types0.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBondedValidators", ctx)
	ret0, _ := ret[0].([]types0.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBondedValidators indicates an expected call of GetBondedValidators.
func (mr *MockRepositoryMockRecorder) GetBondedValidators(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBondedValidators", reflect.TypeOf((*MockRepository)(nil).GetBondedValidators), ctx)
}

// GetEmergencyValidators mocks base method.
func (m *MockRepository) GetEmergencyValidators(ctx types.Context) ([]types0.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmergencyValidators", ctx)
	ret0, _ := ret[0].([]types0.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmergencyValidators indicates an expected call of GetEmergencyValidators.
func (mr *MockRepositoryMockRecorder) GetEmergencyValidators(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmergencyValidators", reflect.TypeOf((*MockRepository)(nil).GetEmergencyValidators), ctx)
}

// GetLastUpdate mocks base method.
func (m *MockRepository) GetLastUpdate(ctx types.Context) (types0.UpdateInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastUpdate", ctx)
	ret0, _ := ret[0].(types0.UpdateInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastUpdate indicates an expected call of GetLastUpdate.
func (mr *MockRepositoryMockRecorder) GetLastUpdate(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastUpdate", reflect.TypeOf((*MockRepository)(nil).GetLastUpdate), ctx)
}

// GetPendingOperator mocks base method.
func (m *MockRepository) GetPendingOperator(ctx types.Context, addr string) (types0.Operator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingOperator", ctx, addr)
	ret0, _ := ret[0].(types0.Operator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingOperator indicates an expected call of GetPendingOperator.
func (mr *MockRepositoryMockRecorder) GetPendingOperator(ctx, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingOperator", reflect.TypeOf((*MockRepository)(nil).GetPendingOperator), ctx, addr)
}

// GetPendingOperators mocks base method.
func (m *MockRepository) GetPendingOperators(ctx types.Context) ([]types0.Operator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingOperators", ctx)
	ret0, _ := ret[0].([]types0.Operator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingOperators indicates an expected call of GetPendingOperators.
func (mr *MockRepositoryMockRecorder) GetPendingOperators(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingOperators", reflect.TypeOf((*MockRepository)(nil).GetPendingOperators), ctx)
}

// GetValidator mocks base method.
func (m *MockRepository) GetValidator(ctx types.Context, addr types.ValAddress) (types0.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidator", ctx, addr)
	ret0, _ := ret[0].(types0.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidator indicates an expected call of GetValidator.
func (mr *MockRepositoryMockRecorder) GetValidator(ctx, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidator", reflect.TypeOf((*MockRepository)(nil).GetValidator), ctx, addr)
}

// GetValidatorByEvmAddr mocks base method.
func (m *MockRepository) GetValidatorByEvmAddr(ctx types.Context, addr string) (types0.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorByEvmAddr", ctx, addr)
	ret0, _ := ret[0].(types0.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorByEvmAddr indicates an expected call of GetValidatorByEvmAddr.
func (mr *MockRepositoryMockRecorder) GetValidatorByEvmAddr(ctx, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorByEvmAddr", reflect.TypeOf((*MockRepository)(nil).GetValidatorByEvmAddr), ctx, addr)
}

// GetValidatorsChanges mocks base method.
func (m *MockRepository) GetValidatorsChanges(ctx types.Context) (types0.ValidatorsChanges, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorsChanges", ctx)
	ret0, _ := ret[0].(types0.ValidatorsChanges)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorsChanges indicates an expected call of GetValidatorsChanges.
func (mr *MockRepositoryMockRecorder) GetValidatorsChanges(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorsChanges", reflect.TypeOf((*MockRepository)(nil).GetValidatorsChanges), ctx)
}

// PruneValidatorsChanges mocks base method.
func (m *MockRepository) PruneValidatorsChanges(ctx types.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PruneValidatorsChanges", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PruneValidatorsChanges indicates an expected call of PruneValidatorsChanges.
func (mr *MockRepositoryMockRecorder) PruneValidatorsChanges(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PruneValidatorsChanges", reflect.TypeOf((*MockRepository)(nil).PruneValidatorsChanges), ctx)
}

// RemovePendingOperator mocks base method.
func (m *MockRepository) RemovePendingOperator(ctx types.Context, operatorAddr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePendingOperator", ctx, operatorAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePendingOperator indicates an expected call of RemovePendingOperator.
func (mr *MockRepositoryMockRecorder) RemovePendingOperator(ctx, operatorAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePendingOperator", reflect.TypeOf((*MockRepository)(nil).RemovePendingOperator), ctx, operatorAddr)
}

// RemoveValidator mocks base method.
func (m *MockRepository) RemoveValidator(ctx types.Context, addr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveValidator", ctx, addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveValidator indicates an expected call of RemoveValidator.
func (mr *MockRepositoryMockRecorder) RemoveValidator(ctx, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveValidator", reflect.TypeOf((*MockRepository)(nil).RemoveValidator), ctx, addr)
}

// SetLastUpdate mocks base method.
func (m *MockRepository) SetLastUpdate(ctx types.Context, info types0.UpdateInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLastUpdate", ctx, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastUpdate indicates an expected call of SetLastUpdate.
func (mr *MockRepositoryMockRecorder) SetLastUpdate(ctx, info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastUpdate", reflect.TypeOf((*MockRepository)(nil).SetLastUpdate), ctx, info)
}

// SetPendingOperator mocks base method.
func (m *MockRepository) SetPendingOperator(ctx types.Context, operatorAddr string, operator types0.Operator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPendingOperator", ctx, operatorAddr, operator)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPendingOperator indicates an expected call of SetPendingOperator.
func (mr *MockRepositoryMockRecorder) SetPendingOperator(ctx, operatorAddr, operator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPendingOperator", reflect.TypeOf((*MockRepository)(nil).SetPendingOperator), ctx, operatorAddr, operator)
}

// SetValidator mocks base method.
func (m *MockRepository) SetValidator(ctx types.Context, addr types.ValAddress, validator types0.Validator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValidator", ctx, addr, validator)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValidator indicates an expected call of SetValidator.
func (mr *MockRepositoryMockRecorder) SetValidator(ctx, addr, validator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidator", reflect.TypeOf((*MockRepository)(nil).SetValidator), ctx, addr, validator)
}
