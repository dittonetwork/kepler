// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kepler/xstaking/v1/validator.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	any "github.com/cosmos/gogoproto/types/any"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BondStatus is the status of a validator
type BondStatus int32

const (
	// UNSPECIFIED defines an invalid validator status.
	Unspecified BondStatus = 0
	// UNBONDED defines a validator that is not bonded.
	Unbonded BondStatus = 1
	// UNBONDING defines a validator that is unbonding.
	Unbonding BondStatus = 2
	// BONDED defines a validator that is bonded.
	Bonded BondStatus = 3
	// BONDING defines a validator registered in Restaking Protocol but not active in Kepler
	Bonding BondStatus = 4
)

var BondStatus_name = map[int32]string{
	0: "BOND_STATUS_UNSPECIFIED",
	1: "BOND_STATUS_UNBONDED",
	2: "BOND_STATUS_UNBONDING",
	3: "BOND_STATUS_BONDED",
	4: "BOND_STATUS_BONDING",
}

var BondStatus_value = map[string]int32{
	"BOND_STATUS_UNSPECIFIED": 0,
	"BOND_STATUS_UNBONDED":    1,
	"BOND_STATUS_UNBONDING":   2,
	"BOND_STATUS_BONDED":      3,
	"BOND_STATUS_BONDING":     4,
}

func (x BondStatus) String() string {
	return proto.EnumName(BondStatus_name, int32(x))
}

func (BondStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_743738769844e638, []int{0}
}

// Description defines a validator description.
type Description struct {
	// moniker defines a human-readable name for the validator.
	Moniker string `protobuf:"bytes,1,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// identity defines an optional identity signature (ex. UPort or Keybase).
	Identity string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	// website defines an optional website link.
	Website string `protobuf:"bytes,3,opt,name=website,proto3" json:"website,omitempty"`
	// security_contact defines an optional email for security contact.
	SecurityContact string `protobuf:"bytes,4,opt,name=security_contact,json=securityContact,proto3" json:"security_contact,omitempty"`
	// details define other optional details.
	Details string `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
	// metadata defines extra information about the validator.
	Metadata *Metadata `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *Description) Reset()         { *m = Description{} }
func (m *Description) String() string { return proto.CompactTextString(m) }
func (*Description) ProtoMessage()    {}
func (*Description) Descriptor() ([]byte, []int) {
	return fileDescriptor_743738769844e638, []int{0}
}
func (m *Description) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Description) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Description.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Description) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Description.Merge(m, src)
}
func (m *Description) XXX_Size() int {
	return m.Size()
}
func (m *Description) XXX_DiscardUnknown() {
	xxx_messageInfo_Description.DiscardUnknown(m)
}

var xxx_messageInfo_Description proto.InternalMessageInfo

func (m *Description) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *Description) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *Description) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *Description) GetSecurityContact() string {
	if m != nil {
		return m.SecurityContact
	}
	return ""
}

func (m *Description) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

func (m *Description) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// Metadata defines extra information about the validator.
type Metadata struct {
	// profile_pic_uri defines a link to the validator profile picture.
	ProfilePicUri string `protobuf:"bytes,1,opt,name=profile_pic_uri,json=profilePicUri,proto3" json:"profile_pic_uri,omitempty"`
	// social_handle_uris defines a string array of uris to the validator's social handles.
	SocialHandleUris []string `protobuf:"bytes,2,rep,name=social_handle_uris,json=socialHandleUris,proto3" json:"social_handle_uris,omitempty"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_743738769844e638, []int{1}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetProfilePicUri() string {
	if m != nil {
		return m.ProfilePicUri
	}
	return ""
}

func (m *Metadata) GetSocialHandleUris() []string {
	if m != nil {
		return m.SocialHandleUris
	}
	return nil
}

// Validator defines a validator
type Validator struct {
	// / operator_address defines the address of the validator's operator; bech encoded in JSON.
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	// consensus_pubkey is the consensus public key of the validator, as a Protobuf Any.
	ConsensusPubkey *any.Any `protobuf:"bytes,2,opt,name=consensus_pubkey,json=consensusPubkey,proto3" json:"consensus_pubkey,omitempty"`
	// jailed defined whether the validator has been jailed
	Jailed bool `protobuf:"varint,3,opt,name=jailed,proto3" json:"jailed,omitempty"`
	// status is the validator status (bonded/unbonding/unbonded/bonding)
	Status BondStatus `protobuf:"varint,4,opt,name=status,proto3,enum=kepler.xstaking.v1.BondStatus" json:"status,omitempty"`
	// vault_power is abstract vault power converted from external real token in ethereum
	VaultPower cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=vault_power,json=vaultPower,proto3,customtype=cosmossdk.io/math.Int" json:"vault_power"`
	// Description describes the validator.
	Description     Description `protobuf:"bytes,6,opt,name=description,proto3" json:"description"`
	UnbondingHeight int64       `protobuf:"varint,7,opt,name=unbonding_height,json=unbondingHeight,proto3" json:"unbonding_height,omitempty"`
	// unbonding_time is the unix timestamp for unbonding time
	UnbondingTime time.Time `protobuf:"bytes,8,opt,name=unbonding_time,json=unbondingTime,proto3,stdtime" json:"unbonding_time"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_743738769844e638, []int{2}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

// ValAddressesOfRotatedConsKeys contains the array of validator addresses which rotated their keys
// This is to block the validator's next rotation till unbonding period.
type ValAddressesOfRotatedConsKeys struct {
	Addresses [][]byte `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *ValAddressesOfRotatedConsKeys) Reset()         { *m = ValAddressesOfRotatedConsKeys{} }
func (m *ValAddressesOfRotatedConsKeys) String() string { return proto.CompactTextString(m) }
func (*ValAddressesOfRotatedConsKeys) ProtoMessage()    {}
func (*ValAddressesOfRotatedConsKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_743738769844e638, []int{3}
}
func (m *ValAddressesOfRotatedConsKeys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValAddressesOfRotatedConsKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValAddressesOfRotatedConsKeys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValAddressesOfRotatedConsKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValAddressesOfRotatedConsKeys.Merge(m, src)
}
func (m *ValAddressesOfRotatedConsKeys) XXX_Size() int {
	return m.Size()
}
func (m *ValAddressesOfRotatedConsKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_ValAddressesOfRotatedConsKeys.DiscardUnknown(m)
}

var xxx_messageInfo_ValAddressesOfRotatedConsKeys proto.InternalMessageInfo

func (m *ValAddressesOfRotatedConsKeys) GetAddresses() [][]byte {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// ConsPubKeyRotationHistory contains a validator's consensus public key rotation history.
type ConsPubKeyRotationHistory struct {
	// operator_address defines the address of the validator's operator; bech encoded in JSON.
	OperatorAddress []byte `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	// old_cons_pubkey is the old consensus public key of the validator, as a Protobuf Any.
	OldConsPubkey *any.Any `protobuf:"bytes,2,opt,name=old_cons_pubkey,json=oldConsPubkey,proto3" json:"old_cons_pubkey,omitempty"`
	// new_cons_pubkey is the new consensus public key of the validator, as a Protobuf Any.
	NewConsPubkey *any.Any `protobuf:"bytes,3,opt,name=new_cons_pubkey,json=newConsPubkey,proto3" json:"new_cons_pubkey,omitempty"`
	// height defines the block height at which the rotation event occurred.
	Height uint64 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *ConsPubKeyRotationHistory) Reset()         { *m = ConsPubKeyRotationHistory{} }
func (m *ConsPubKeyRotationHistory) String() string { return proto.CompactTextString(m) }
func (*ConsPubKeyRotationHistory) ProtoMessage()    {}
func (*ConsPubKeyRotationHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_743738769844e638, []int{4}
}
func (m *ConsPubKeyRotationHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsPubKeyRotationHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsPubKeyRotationHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsPubKeyRotationHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsPubKeyRotationHistory.Merge(m, src)
}
func (m *ConsPubKeyRotationHistory) XXX_Size() int {
	return m.Size()
}
func (m *ConsPubKeyRotationHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsPubKeyRotationHistory.DiscardUnknown(m)
}

var xxx_messageInfo_ConsPubKeyRotationHistory proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("kepler.xstaking.v1.BondStatus", BondStatus_name, BondStatus_value)
	proto.RegisterType((*Description)(nil), "kepler.xstaking.v1.Description")
	proto.RegisterType((*Metadata)(nil), "kepler.xstaking.v1.Metadata")
	proto.RegisterType((*Validator)(nil), "kepler.xstaking.v1.Validator")
	proto.RegisterType((*ValAddressesOfRotatedConsKeys)(nil), "kepler.xstaking.v1.ValAddressesOfRotatedConsKeys")
	proto.RegisterType((*ConsPubKeyRotationHistory)(nil), "kepler.xstaking.v1.ConsPubKeyRotationHistory")
}

func init() {
	proto.RegisterFile("kepler/xstaking/v1/validator.proto", fileDescriptor_743738769844e638)
}

var fileDescriptor_743738769844e638 = []byte{
	// 927 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x31, 0x6f, 0xdb, 0xc6,
	0x1f, 0x25, 0x2d, 0xfd, 0x65, 0xe9, 0x64, 0x47, 0xfa, 0x5f, 0x9d, 0x84, 0x21, 0x5a, 0x89, 0x10,
	0x8a, 0x40, 0x4d, 0x13, 0x0a, 0x76, 0x81, 0x0c, 0xd9, 0x4c, 0xdb, 0xad, 0x8d, 0xb4, 0x8e, 0x40,
	0x59, 0x2e, 0xda, 0x85, 0x38, 0x91, 0x27, 0xf9, 0x2a, 0xea, 0x8e, 0xe0, 0x9d, 0xec, 0xea, 0x1b,
	0x04, 0x9a, 0x32, 0x76, 0x51, 0x61, 0xa0, 0x4b, 0xc7, 0x0e, 0xf9, 0x10, 0x46, 0xa7, 0x20, 0x53,
	0x51, 0x14, 0x6e, 0x61, 0x0f, 0xcd, 0xd2, 0xef, 0x50, 0x1c, 0x79, 0x94, 0x9c, 0xd8, 0xe8, 0xd0,
	0x2e, 0x04, 0x7f, 0xbf, 0xf7, 0x7e, 0xef, 0x8e, 0xf7, 0xde, 0x81, 0xa0, 0x31, 0xc4, 0x51, 0x88,
	0xe3, 0xd6, 0xb7, 0x5c, 0xa0, 0x21, 0xa1, 0x83, 0xd6, 0xf1, 0x7a, 0xeb, 0x18, 0x85, 0x24, 0x40,
	0x82, 0xc5, 0x76, 0x14, 0x33, 0xc1, 0x20, 0x4c, 0x39, 0x76, 0xc6, 0xb1, 0x8f, 0xd7, 0xcd, 0xb5,
	0x01, 0x1b, 0xb0, 0x04, 0x6e, 0xc9, 0xb7, 0x94, 0x69, 0xde, 0xf3, 0x19, 0x1f, 0x31, 0xee, 0xa5,
	0x40, 0x5a, 0x64, 0xd0, 0x80, 0xb1, 0x41, 0x88, 0x5b, 0x49, 0xd5, 0x1b, 0xf7, 0x5b, 0x88, 0x4e,
	0x14, 0x54, 0x7f, 0x17, 0x12, 0x64, 0x84, 0xb9, 0x40, 0xa3, 0x48, 0x11, 0xfe, 0x8f, 0x46, 0x84,
	0xb2, 0x56, 0xf2, 0x4c, 0x5b, 0x8d, 0xbf, 0x74, 0x50, 0xde, 0xc6, 0xdc, 0x8f, 0x49, 0x24, 0x08,
	0xa3, 0xd0, 0x00, 0xcb, 0x23, 0x46, 0xc9, 0x10, 0xc7, 0x86, 0x6e, 0xe9, 0xcd, 0x92, 0x9b, 0x95,
	0xd0, 0x04, 0x45, 0x12, 0x60, 0x2a, 0x88, 0x98, 0x18, 0x4b, 0x09, 0x34, 0xaf, 0xe5, 0xd4, 0x09,
	0xee, 0x71, 0x22, 0xb0, 0x91, 0x4b, 0xa7, 0x54, 0x09, 0x3f, 0x02, 0x55, 0x8e, 0xfd, 0x71, 0x4c,
	0xc4, 0xc4, 0xf3, 0x19, 0x15, 0xc8, 0x17, 0x46, 0x3e, 0xa1, 0x54, 0xb2, 0xfe, 0x56, 0xda, 0x96,
	0x22, 0x01, 0x16, 0x88, 0x84, 0xdc, 0xf8, 0x5f, 0x2a, 0xa2, 0x4a, 0xb8, 0x05, 0x8a, 0x23, 0x2c,
	0x50, 0x80, 0x04, 0x32, 0x0a, 0x96, 0xde, 0x2c, 0x6f, 0xbc, 0x6f, 0x5f, 0x3f, 0x4b, 0xfb, 0x0b,
	0xc5, 0x71, 0x4a, 0x67, 0xe7, 0x75, 0xfd, 0xc7, 0x3f, 0x7f, 0x7a, 0xa0, 0xb9, 0xf3, 0xc1, 0x27,
	0xf9, 0x37, 0xa7, 0x75, 0xbd, 0xd1, 0x07, 0xc5, 0x8c, 0x06, 0xef, 0x83, 0x4a, 0x14, 0xb3, 0x3e,
	0x09, 0xb1, 0x17, 0x11, 0xdf, 0x1b, 0xc7, 0x44, 0x7d, 0xf3, 0xaa, 0x6a, 0xb7, 0x89, 0xdf, 0x8d,
	0x09, 0x7c, 0x08, 0x20, 0x67, 0x3e, 0x41, 0xa1, 0x77, 0x84, 0x68, 0x10, 0x62, 0xc9, 0xe4, 0xc6,
	0x92, 0x95, 0x6b, 0x96, 0xdc, 0x6a, 0x8a, 0xec, 0x26, 0x40, 0x37, 0x26, 0x5c, 0xad, 0xf3, 0x7d,
	0x1e, 0x94, 0x0e, 0x33, 0xff, 0xe1, 0x16, 0xa8, 0xb2, 0x08, 0xc7, 0xf2, 0xdd, 0x43, 0x41, 0x10,
	0x63, 0xce, 0xd3, 0xa5, 0x1c, 0xe3, 0xf5, 0xcb, 0x47, 0x6b, 0xca, 0xe0, 0xcd, 0x14, 0xe9, 0x88,
	0x98, 0xd0, 0x81, 0x5b, 0xc9, 0x26, 0x54, 0x1b, 0x7e, 0x05, 0xaa, 0x3e, 0xa3, 0x1c, 0x53, 0x3e,
	0xe6, 0x5e, 0x34, 0xee, 0x0d, 0x71, 0x6a, 0x44, 0x79, 0x63, 0xcd, 0x4e, 0x9d, 0xb7, 0x33, 0xe7,
	0xed, 0x4d, 0x3a, 0x71, 0x8c, 0x9f, 0x17, 0xd2, 0x7e, 0x3c, 0x89, 0x04, 0xb3, 0xdb, 0xe3, 0xde,
	0x53, 0x3c, 0x71, 0x2b, 0x73, 0x9d, 0x76, 0x22, 0x03, 0xef, 0x80, 0xc2, 0x37, 0x88, 0x84, 0x38,
	0x48, 0xec, 0x2b, 0xba, 0xaa, 0x82, 0x8f, 0x41, 0x81, 0x0b, 0x24, 0xc6, 0x3c, 0xf1, 0xec, 0xd6,
	0x46, 0xed, 0xa6, 0x63, 0x77, 0x18, 0x0d, 0x3a, 0x09, 0xcb, 0x55, 0x6c, 0xf8, 0x39, 0x28, 0x1f,
	0xa3, 0x71, 0x28, 0xbc, 0x88, 0x9d, 0xe0, 0x38, 0xb5, 0xd3, 0xf9, 0xf8, 0xec, 0xbc, 0xae, 0xfd,
	0x7a, 0x5e, 0xbf, 0x9d, 0xee, 0x89, 0x07, 0x43, 0x9b, 0xb0, 0xd6, 0x08, 0x89, 0x23, 0x7b, 0x8f,
	0x8a, 0xd7, 0x2f, 0x1f, 0x01, 0xb5, 0xd9, 0x3d, 0x2a, 0x5c, 0x90, 0xcc, 0xb7, 0xe5, 0xb8, 0x54,
	0x0b, 0x16, 0x11, 0x55, 0x09, 0xa8, 0xdf, 0xb4, 0x95, 0x2b, 0x49, 0x4e, 0x42, 0xa0, 0xc9, 0x10,
	0xe8, 0xee, 0xd5, 0x71, 0x99, 0xc8, 0x31, 0xed, 0x31, 0x1a, 0x10, 0x3a, 0xf0, 0x8e, 0x30, 0x19,
	0x1c, 0x09, 0x63, 0xd9, 0xd2, 0x9b, 0x39, 0xb7, 0x32, 0xef, 0xef, 0x26, 0x6d, 0xd8, 0x06, 0xb7,
	0x16, 0x54, 0x79, 0x99, 0x8c, 0x62, 0xb2, 0xb6, 0x79, 0xed, 0xbc, 0x0f, 0xb2, 0x9b, 0xe6, 0xac,
	0xca, 0x65, 0x5f, 0xfc, 0x9e, 0xe6, 0x4f, 0x77, 0x57, 0xe7, 0x02, 0x92, 0xf2, 0xa4, 0xf8, 0xfc,
	0xb4, 0xae, 0xbd, 0x39, 0xad, 0x6b, 0x8d, 0x2f, 0xc1, 0x07, 0x87, 0x28, 0x54, 0xde, 0x62, 0xfe,
	0xac, 0xef, 0x32, 0x81, 0x04, 0x0e, 0xb6, 0x18, 0xe5, 0x4f, 0xf1, 0x84, 0xc3, 0xc7, 0xa0, 0x84,
	0x32, 0xd4, 0xd0, 0xad, 0x5c, 0x73, 0xe5, 0x1f, 0xc2, 0xb2, 0xa0, 0x36, 0xbe, 0x5b, 0x02, 0xf7,
	0xa4, 0x88, 0xf2, 0x5a, 0xaa, 0x12, 0x46, 0x77, 0x09, 0x17, 0x2c, 0x9e, 0xc8, 0xaf, 0xbf, 0x31,
	0x89, 0x2b, 0xd7, 0xf3, 0x76, 0x08, 0x2a, 0x2c, 0x0c, 0xe4, 0xad, 0xfd, 0x8f, 0x71, 0x5b, 0x65,
	0x61, 0xa0, 0x76, 0x24, 0xc3, 0x76, 0x08, 0x2a, 0x14, 0x9f, 0xbc, 0xa5, 0x9b, 0xfb, 0x77, 0xba,
	0x14, 0x9f, 0x5c, 0xd1, 0xbd, 0x03, 0x0a, 0xca, 0x4e, 0x19, 0xd6, 0xbc, 0xab, 0xaa, 0xc5, 0x99,
	0x3f, 0xf8, 0x4d, 0x07, 0x60, 0x91, 0x56, 0xf8, 0x10, 0xdc, 0x75, 0x9e, 0xed, 0x6f, 0x7b, 0x9d,
	0x83, 0xcd, 0x83, 0x6e, 0xc7, 0xeb, 0xee, 0x77, 0xda, 0x3b, 0x5b, 0x7b, 0x9f, 0xee, 0xed, 0x6c,
	0x57, 0x35, 0xb3, 0x32, 0x9d, 0x59, 0xe5, 0x2e, 0xe5, 0x11, 0xf6, 0x49, 0x9f, 0xe0, 0x00, 0xde,
	0x07, 0x6b, 0x6f, 0xb3, 0x65, 0xb5, 0xb3, 0x5d, 0xd5, 0xcd, 0x95, 0xe9, 0xcc, 0x2a, 0x76, 0x13,
	0x9f, 0x71, 0x00, 0x9b, 0xe0, 0xf6, 0x75, 0xde, 0xde, 0xfe, 0x67, 0xd5, 0x25, 0x73, 0x75, 0x3a,
	0xb3, 0x4a, 0xdd, 0x2c, 0x10, 0xb0, 0x01, 0xe0, 0x55, 0xa6, 0xd2, 0xcb, 0x99, 0x60, 0x3a, 0xb3,
	0x0a, 0x4e, 0xaa, 0xf6, 0x21, 0x78, 0xef, 0x5d, 0x8e, 0xd4, 0xca, 0x9b, 0xe5, 0xe9, 0xcc, 0x5a,
	0x76, 0x52, 0x25, 0x33, 0xff, 0xfc, 0x87, 0x9a, 0xe6, 0xac, 0x9f, 0x5d, 0xd4, 0xf4, 0x57, 0x17,
	0x35, 0xfd, 0x8f, 0x8b, 0x9a, 0xfe, 0xe2, 0xb2, 0xa6, 0xbd, 0xba, 0xac, 0x69, 0xbf, 0x5c, 0xd6,
	0xb4, 0xaf, 0xef, 0x66, 0x7f, 0xa7, 0xc5, 0xff, 0x49, 0x4c, 0x22, 0xcc, 0x7b, 0x85, 0xe4, 0xa8,
	0x3f, 0xf9, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x30, 0xe7, 0x9d, 0xbf, 0x06, 0x00, 0x00,
}

func (this *Description) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Description)
	if !ok {
		that2, ok := that.(Description)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Moniker != that1.Moniker {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.Website != that1.Website {
		return false
	}
	if this.SecurityContact != that1.SecurityContact {
		return false
	}
	if this.Details != that1.Details {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	return true
}
func (this *Metadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Metadata)
	if !ok {
		that2, ok := that.(Metadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProfilePicUri != that1.ProfilePicUri {
		return false
	}
	if len(this.SocialHandleUris) != len(that1.SocialHandleUris) {
		return false
	}
	for i := range this.SocialHandleUris {
		if this.SocialHandleUris[i] != that1.SocialHandleUris[i] {
			return false
		}
	}
	return true
}
func (m *Description) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Description) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Description) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SecurityContact) > 0 {
		i -= len(m.SecurityContact)
		copy(dAtA[i:], m.SecurityContact)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.SecurityContact)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SocialHandleUris) > 0 {
		for iNdEx := len(m.SocialHandleUris) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SocialHandleUris[iNdEx])
			copy(dAtA[i:], m.SocialHandleUris[iNdEx])
			i = encodeVarintValidator(dAtA, i, uint64(len(m.SocialHandleUris[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ProfilePicUri) > 0 {
		i -= len(m.ProfilePicUri)
		copy(dAtA[i:], m.ProfilePicUri)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.ProfilePicUri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.UnbondingTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UnbondingTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintValidator(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x42
	if m.UnbondingHeight != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.UnbondingHeight))
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.VaultPower.Size()
		i -= size
		if _, err := m.VaultPower.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Status != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.Jailed {
		i--
		if m.Jailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ConsensusPubkey != nil {
		{
			size, err := m.ConsensusPubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValAddressesOfRotatedConsKeys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValAddressesOfRotatedConsKeys) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValAddressesOfRotatedConsKeys) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintValidator(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConsPubKeyRotationHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsPubKeyRotationHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsPubKeyRotationHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x20
	}
	if m.NewConsPubkey != nil {
		{
			size, err := m.NewConsPubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.OldConsPubkey != nil {
		{
			size, err := m.OldConsPubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintValidator(dAtA []byte, offset int, v uint64) int {
	offset -= sovValidator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Description) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.SecurityContact)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovValidator(uint64(l))
	}
	return n
}

func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProfilePicUri)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	if len(m.SocialHandleUris) > 0 {
		for _, s := range m.SocialHandleUris {
			l = len(s)
			n += 1 + l + sovValidator(uint64(l))
		}
	}
	return n
}

func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	if m.ConsensusPubkey != nil {
		l = m.ConsensusPubkey.Size()
		n += 1 + l + sovValidator(uint64(l))
	}
	if m.Jailed {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovValidator(uint64(m.Status))
	}
	l = m.VaultPower.Size()
	n += 1 + l + sovValidator(uint64(l))
	l = m.Description.Size()
	n += 1 + l + sovValidator(uint64(l))
	if m.UnbondingHeight != 0 {
		n += 1 + sovValidator(uint64(m.UnbondingHeight))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UnbondingTime)
	n += 1 + l + sovValidator(uint64(l))
	return n
}

func (m *ValAddressesOfRotatedConsKeys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, b := range m.Addresses {
			l = len(b)
			n += 1 + l + sovValidator(uint64(l))
		}
	}
	return n
}

func (m *ConsPubKeyRotationHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	if m.OldConsPubkey != nil {
		l = m.OldConsPubkey.Size()
		n += 1 + l + sovValidator(uint64(l))
	}
	if m.NewConsPubkey != nil {
		l = m.NewConsPubkey.Size()
		n += 1 + l + sovValidator(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovValidator(uint64(m.Height))
	}
	return n
}

func sovValidator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValidator(x uint64) (n int) {
	return sovValidator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Description) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Description: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Description: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityContact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityContact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfilePicUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfilePicUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SocialHandleUris", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SocialHandleUris = append(m.SocialHandleUris, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusPubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusPubkey == nil {
				m.ConsensusPubkey = &any.Any{}
			}
			if err := m.ConsensusPubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Jailed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BondStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultPower", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VaultPower.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingHeight", wireType)
			}
			m.UnbondingHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.UnbondingTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValAddressesOfRotatedConsKeys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValAddressesOfRotatedConsKeys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValAddressesOfRotatedConsKeys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, make([]byte, postIndex-iNdEx))
			copy(m.Addresses[len(m.Addresses)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsPubKeyRotationHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsPubKeyRotationHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsPubKeyRotationHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = append(m.OperatorAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.OperatorAddress == nil {
				m.OperatorAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldConsPubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OldConsPubkey == nil {
				m.OldConsPubkey = &any.Any{}
			}
			if err := m.OldConsPubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewConsPubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewConsPubkey == nil {
				m.NewConsPubkey = &any.Any{}
			}
			if err := m.NewConsPubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValidator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValidator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValidator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValidator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValidator = fmt.Errorf("proto: unexpected end of group")
)
