// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kepler/job/job.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// job result status
type Job_Status int32

const (
	// unknown status
	Job_STATUS_UNSPECIFIED Job_Status = 0
	// succeed status
	Job_STATUS_EXECUTED Job_Status = 1
	// failed status
	Job_STATUS_FAILED Job_Status = 2
	// invalid status. means that smth wrong happened and committee didnt sign it
	Job_STATUS_INVALID Job_Status = 3
)

var Job_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_EXECUTED",
	2: "STATUS_FAILED",
	3: "STATUS_INVALID",
}

var Job_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"STATUS_EXECUTED":    1,
	"STATUS_FAILED":      2,
	"STATUS_INVALID":     3,
}

func (x Job_Status) String() string {
	return proto.EnumName(Job_Status_name, int32(x))
}

func (Job_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_10a4cb13b28e95c5, []int{0, 0}
}

// Job structure
type Job struct {
	// job id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// job status
	Status Job_Status `protobuf:"varint,2,opt,name=status,proto3,enum=kepler.job.Job_Status" json:"status,omitempty"`
	// target chain id
	ChainId string `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// presented if job was created by automation workflow
	AutomationId uint64 `protobuf:"varint,4,opt,name=automation_id,json=automationId,proto3" json:"automation_id,omitempty"`
	// presented if job was successful
	TxHash string `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// additional info about reason of failure etc
	Metadata []byte `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// address of executor
	ExecutorAddress string `protobuf:"bytes,7,opt,name=executor_address,json=executorAddress,proto3" json:"executor_address,omitempty"`
	// job executors committee id
	CommitteeId string `protobuf:"bytes,8,opt,name=committee_id,json=committeeId,proto3" json:"committee_id,omitempty"`
	// signs of committee participants
	Signs [][]byte `protobuf:"bytes,9,rep,name=signs,proto3" json:"signs,omitempty"`
	// unix seconds time when created
	CreatedAt uint64 `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// unix seconds time when executed or failed
	ExecutedAt uint64 `protobuf:"varint,11,opt,name=executed_at,json=executedAt,proto3" json:"executed_at,omitempty"`
	// unix seconds time when signed
	SignedAt uint64 `protobuf:"varint,12,opt,name=signed_at,json=signedAt,proto3" json:"signed_at,omitempty"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}
func (*Job) Descriptor() ([]byte, []int) {
	return fileDescriptor_10a4cb13b28e95c5, []int{0}
}
func (m *Job) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Job) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Job.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Job) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Job.Merge(m, src)
}
func (m *Job) XXX_Size() int {
	return m.Size()
}
func (m *Job) XXX_DiscardUnknown() {
	xxx_messageInfo_Job.DiscardUnknown(m)
}

var xxx_messageInfo_Job proto.InternalMessageInfo

func (m *Job) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Job) GetStatus() Job_Status {
	if m != nil {
		return m.Status
	}
	return Job_STATUS_UNSPECIFIED
}

func (m *Job) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *Job) GetAutomationId() uint64 {
	if m != nil {
		return m.AutomationId
	}
	return 0
}

func (m *Job) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *Job) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Job) GetExecutorAddress() string {
	if m != nil {
		return m.ExecutorAddress
	}
	return ""
}

func (m *Job) GetCommitteeId() string {
	if m != nil {
		return m.CommitteeId
	}
	return ""
}

func (m *Job) GetSigns() [][]byte {
	if m != nil {
		return m.Signs
	}
	return nil
}

func (m *Job) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Job) GetExecutedAt() uint64 {
	if m != nil {
		return m.ExecutedAt
	}
	return 0
}

func (m *Job) GetSignedAt() uint64 {
	if m != nil {
		return m.SignedAt
	}
	return 0
}

func init() {
	proto.RegisterEnum("kepler.job.Job_Status", Job_Status_name, Job_Status_value)
	proto.RegisterType((*Job)(nil), "kepler.job.Job")
}

func init() { proto.RegisterFile("kepler/job/job.proto", fileDescriptor_10a4cb13b28e95c5) }

var fileDescriptor_10a4cb13b28e95c5 = []byte{
	// 416 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x92, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xb3, 0x71, 0xeb, 0x24, 0x13, 0x37, 0x35, 0x43, 0x55, 0x0c, 0x08, 0x63, 0xca, 0xc5,
	0x48, 0xc8, 0x48, 0xf0, 0x04, 0xa6, 0x71, 0x85, 0xab, 0xaa, 0x42, 0x4e, 0x82, 0x10, 0x42, 0xb2,
	0xd6, 0xd9, 0x15, 0x71, 0x21, 0xdd, 0xc8, 0x3b, 0x91, 0xcc, 0x5b, 0xf0, 0x58, 0x1c, 0x7b, 0x84,
	0x1b, 0x4a, 0x5e, 0x04, 0x65, 0xed, 0xb6, 0x07, 0x1f, 0xe6, 0xfb, 0x66, 0x3c, 0xa3, 0xd5, 0x0f,
	0x47, 0xdf, 0xe5, 0xea, 0x87, 0xac, 0xde, 0x5c, 0xa9, 0x62, 0xf7, 0x45, 0xab, 0x4a, 0x91, 0x42,
	0x68, 0x68, 0x74, 0xa5, 0x8a, 0x93, 0xbf, 0x16, 0x58, 0xe7, 0xaa, 0xc0, 0x11, 0x74, 0x4b, 0xe1,
	0xb1, 0x80, 0x85, 0x7b, 0x59, 0xb7, 0x14, 0x18, 0x81, 0xad, 0x89, 0xd3, 0x5a, 0x7b, 0xdd, 0x80,
	0x85, 0xa3, 0xb7, 0xc7, 0xd1, 0xfd, 0x50, 0x74, 0xae, 0x8a, 0x68, 0x62, 0x6c, 0xd6, 0x76, 0xe1,
	0x63, 0xe8, 0xcf, 0x17, 0xbc, 0xbc, 0xce, 0x4b, 0xe1, 0x59, 0x01, 0x0b, 0x07, 0x59, 0xcf, 0xd4,
	0xa9, 0xc0, 0x97, 0x70, 0xc0, 0xd7, 0xa4, 0x96, 0x9c, 0x4a, 0x65, 0xfc, 0x9e, 0xd9, 0xe2, 0xdc,
	0xc3, 0x54, 0xe0, 0x23, 0xe8, 0x51, 0x9d, 0x2f, 0xb8, 0x5e, 0x78, 0xfb, 0x66, 0xdc, 0xa6, 0xfa,
	0x03, 0xd7, 0x0b, 0x7c, 0x02, 0xfd, 0xa5, 0x24, 0x2e, 0x38, 0x71, 0xcf, 0x0e, 0x58, 0xe8, 0x64,
	0x77, 0x35, 0xbe, 0x02, 0x57, 0xd6, 0x72, 0xbe, 0x26, 0x55, 0xe5, 0x5c, 0x88, 0x4a, 0x6a, 0xed,
	0xf5, 0xcc, 0xf4, 0xe1, 0x2d, 0x8f, 0x1b, 0x8c, 0x2f, 0xc0, 0x99, 0xab, 0xe5, 0xb2, 0x24, 0x92,
	0x72, 0x77, 0x43, 0xdf, 0xb4, 0x0d, 0xef, 0x58, 0x2a, 0xf0, 0x08, 0xf6, 0x75, 0xf9, 0xed, 0x5a,
	0x7b, 0x83, 0xc0, 0x0a, 0x9d, 0xac, 0x29, 0xf0, 0x19, 0xc0, 0xbc, 0x92, 0x9c, 0xa4, 0xc8, 0x39,
	0x79, 0x60, 0x4e, 0x1f, 0xb4, 0x24, 0x26, 0x7c, 0x0e, 0xc3, 0x66, 0x55, 0xe3, 0x87, 0xc6, 0xc3,
	0x2d, 0x8a, 0x09, 0x9f, 0xc2, 0x60, 0xf7, 0xa3, 0x46, 0x3b, 0x46, 0xf7, 0x1b, 0x10, 0xd3, 0xc9,
	0x57, 0xb0, 0x9b, 0x77, 0xc4, 0x63, 0xc0, 0xc9, 0x34, 0x9e, 0xce, 0x26, 0xf9, 0xec, 0x72, 0xf2,
	0x31, 0x39, 0x4d, 0xcf, 0xd2, 0x64, 0xec, 0x76, 0xf0, 0x21, 0x1c, 0xb6, 0x3c, 0xf9, 0x9c, 0x9c,
	0xce, 0xa6, 0xc9, 0xd8, 0x65, 0xf8, 0x00, 0x0e, 0x5a, 0x78, 0x16, 0xa7, 0x17, 0xc9, 0xd8, 0xed,
	0x22, 0xc2, 0xa8, 0x45, 0xe9, 0xe5, 0xa7, 0xf8, 0x22, 0x1d, 0xbb, 0xd6, 0xfb, 0xd7, 0xbf, 0x37,
	0x3e, 0xbb, 0xd9, 0xf8, 0xec, 0xdf, 0xc6, 0x67, 0xbf, 0xb6, 0x7e, 0xe7, 0x66, 0xeb, 0x77, 0xfe,
	0x6c, 0xfd, 0xce, 0x17, 0x6c, 0x73, 0x51, 0x9b, 0x64, 0xd0, 0xcf, 0x95, 0xd4, 0x85, 0x6d, 0xc2,
	0xf1, 0xee, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x04, 0x49, 0xb4, 0x4e, 0x34, 0x02, 0x00, 0x00,
}

func (m *Job) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Job) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Job) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignedAt != 0 {
		i = encodeVarintJob(dAtA, i, uint64(m.SignedAt))
		i--
		dAtA[i] = 0x60
	}
	if m.ExecutedAt != 0 {
		i = encodeVarintJob(dAtA, i, uint64(m.ExecutedAt))
		i--
		dAtA[i] = 0x58
	}
	if m.CreatedAt != 0 {
		i = encodeVarintJob(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Signs) > 0 {
		for iNdEx := len(m.Signs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signs[iNdEx])
			copy(dAtA[i:], m.Signs[iNdEx])
			i = encodeVarintJob(dAtA, i, uint64(len(m.Signs[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.CommitteeId) > 0 {
		i -= len(m.CommitteeId)
		copy(dAtA[i:], m.CommitteeId)
		i = encodeVarintJob(dAtA, i, uint64(len(m.CommitteeId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ExecutorAddress) > 0 {
		i -= len(m.ExecutorAddress)
		copy(dAtA[i:], m.ExecutorAddress)
		i = encodeVarintJob(dAtA, i, uint64(len(m.ExecutorAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintJob(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintJob(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.AutomationId != 0 {
		i = encodeVarintJob(dAtA, i, uint64(m.AutomationId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintJob(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintJob(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintJob(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintJob(dAtA []byte, offset int, v uint64) int {
	offset -= sovJob(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Job) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovJob(uint64(m.Id))
	}
	if m.Status != 0 {
		n += 1 + sovJob(uint64(m.Status))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	if m.AutomationId != 0 {
		n += 1 + sovJob(uint64(m.AutomationId))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.ExecutorAddress)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.CommitteeId)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	if len(m.Signs) > 0 {
		for _, b := range m.Signs {
			l = len(b)
			n += 1 + l + sovJob(uint64(l))
		}
	}
	if m.CreatedAt != 0 {
		n += 1 + sovJob(uint64(m.CreatedAt))
	}
	if m.ExecutedAt != 0 {
		n += 1 + sovJob(uint64(m.ExecutedAt))
	}
	if m.SignedAt != 0 {
		n += 1 + sovJob(uint64(m.SignedAt))
	}
	return n
}

func sovJob(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozJob(x uint64) (n int) {
	return sovJob(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Job) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Job: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Job: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Job_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutomationId", wireType)
			}
			m.AutomationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutomationId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata[:0], dAtA[iNdEx:postIndex]...)
			if m.Metadata == nil {
				m.Metadata = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitteeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitteeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signs = append(m.Signs, make([]byte, postIndex-iNdEx))
			copy(m.Signs[len(m.Signs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutedAt", wireType)
			}
			m.ExecutedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedAt", wireType)
			}
			m.SignedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipJob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipJob(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowJob
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJob
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJob
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthJob
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupJob
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthJob
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthJob        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowJob          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupJob = fmt.Errorf("proto: unexpected end of group")
)
