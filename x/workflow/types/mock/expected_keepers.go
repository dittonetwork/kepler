// Code generated by MockGen. DO NOT EDIT.
// Source: types/expected_keepers.go
//
// Generated by this command:
//
//	mockgen --source=types/expected_keepers.go --destination=types/mock/expected_keepers.go --package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	types0 "kepler/x/job/types"
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountKeeper is a mock of AccountKeeper interface.
type MockAccountKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockAccountKeeperMockRecorder
	isgomock struct{}
}

// MockAccountKeeperMockRecorder is the mock recorder for MockAccountKeeper.
type MockAccountKeeperMockRecorder struct {
	mock *MockAccountKeeper
}

// NewMockAccountKeeper creates a new mock instance.
func NewMockAccountKeeper(ctrl *gomock.Controller) *MockAccountKeeper {
	mock := &MockAccountKeeper{ctrl: ctrl}
	mock.recorder = &MockAccountKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountKeeper) EXPECT() *MockAccountKeeperMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockAccountKeeper) GetAccount(arg0 context.Context, arg1 types.AccAddress) types.AccountI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(types.AccountI)
	return ret0
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountKeeperMockRecorder) GetAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountKeeper)(nil).GetAccount), arg0, arg1)
}

// MockBankKeeper is a mock of BankKeeper interface.
type MockBankKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockBankKeeperMockRecorder
	isgomock struct{}
}

// MockBankKeeperMockRecorder is the mock recorder for MockBankKeeper.
type MockBankKeeperMockRecorder struct {
	mock *MockBankKeeper
}

// NewMockBankKeeper creates a new mock instance.
func NewMockBankKeeper(ctrl *gomock.Controller) *MockBankKeeper {
	mock := &MockBankKeeper{ctrl: ctrl}
	mock.recorder = &MockBankKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankKeeper) EXPECT() *MockBankKeeperMockRecorder {
	return m.recorder
}

// SpendableCoins mocks base method.
func (m *MockBankKeeper) SpendableCoins(arg0 context.Context, arg1 types.AccAddress) types.Coins {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpendableCoins", arg0, arg1)
	ret0, _ := ret[0].(types.Coins)
	return ret0
}

// SpendableCoins indicates an expected call of SpendableCoins.
func (mr *MockBankKeeperMockRecorder) SpendableCoins(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpendableCoins", reflect.TypeOf((*MockBankKeeper)(nil).SpendableCoins), arg0, arg1)
}

// MockParamSubspace is a mock of ParamSubspace interface.
type MockParamSubspace struct {
	ctrl     *gomock.Controller
	recorder *MockParamSubspaceMockRecorder
	isgomock struct{}
}

// MockParamSubspaceMockRecorder is the mock recorder for MockParamSubspace.
type MockParamSubspaceMockRecorder struct {
	mock *MockParamSubspace
}

// NewMockParamSubspace creates a new mock instance.
func NewMockParamSubspace(ctrl *gomock.Controller) *MockParamSubspace {
	mock := &MockParamSubspace{ctrl: ctrl}
	mock.recorder = &MockParamSubspaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParamSubspace) EXPECT() *MockParamSubspaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockParamSubspace) Get(arg0 context.Context, arg1 []byte, arg2 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Get", arg0, arg1, arg2)
}

// Get indicates an expected call of Get.
func (mr *MockParamSubspaceMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockParamSubspace)(nil).Get), arg0, arg1, arg2)
}

// Set mocks base method.
func (m *MockParamSubspace) Set(arg0 context.Context, arg1 []byte, arg2 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", arg0, arg1, arg2)
}

// Set indicates an expected call of Set.
func (mr *MockParamSubspaceMockRecorder) Set(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockParamSubspace)(nil).Set), arg0, arg1, arg2)
}

// MockCommitteeKeeper is a mock of CommitteeKeeper interface.
type MockCommitteeKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockCommitteeKeeperMockRecorder
	isgomock struct{}
}

// MockCommitteeKeeperMockRecorder is the mock recorder for MockCommitteeKeeper.
type MockCommitteeKeeperMockRecorder struct {
	mock *MockCommitteeKeeper
}

// NewMockCommitteeKeeper creates a new mock instance.
func NewMockCommitteeKeeper(ctrl *gomock.Controller) *MockCommitteeKeeper {
	mock := &MockCommitteeKeeper{ctrl: ctrl}
	mock.recorder = &MockCommitteeKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommitteeKeeper) EXPECT() *MockCommitteeKeeperMockRecorder {
	return m.recorder
}

// CanBeSigned mocks base method.
func (m *MockCommitteeKeeper) CanBeSigned(ctx types.Context, committeeID, chainID string, signatures [][]byte, payload []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanBeSigned", ctx, committeeID, chainID, signatures, payload)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanBeSigned indicates an expected call of CanBeSigned.
func (mr *MockCommitteeKeeperMockRecorder) CanBeSigned(ctx, committeeID, chainID, signatures, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanBeSigned", reflect.TypeOf((*MockCommitteeKeeper)(nil).CanBeSigned), ctx, committeeID, chainID, signatures, payload)
}

// IsCommitteeExists mocks base method.
func (m *MockCommitteeKeeper) IsCommitteeExists(ctx types.Context, committeeID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCommitteeExists", ctx, committeeID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCommitteeExists indicates an expected call of IsCommitteeExists.
func (mr *MockCommitteeKeeperMockRecorder) IsCommitteeExists(ctx, committeeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCommitteeExists", reflect.TypeOf((*MockCommitteeKeeper)(nil).IsCommitteeExists), ctx, committeeID)
}

// MockJobKeeper is a mock of JobKeeper interface.
type MockJobKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockJobKeeperMockRecorder
	isgomock struct{}
}

// MockJobKeeperMockRecorder is the mock recorder for MockJobKeeper.
type MockJobKeeperMockRecorder struct {
	mock *MockJobKeeper
}

// NewMockJobKeeper creates a new mock instance.
func NewMockJobKeeper(ctrl *gomock.Controller) *MockJobKeeper {
	mock := &MockJobKeeper{ctrl: ctrl}
	mock.recorder = &MockJobKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobKeeper) EXPECT() *MockJobKeeperMockRecorder {
	return m.recorder
}

// CreateJob mocks base method.
func (m *MockJobKeeper) CreateJob(ctx types.Context, status types0.Job_Status, committeeID, chainID string, automationID uint64, txHash, executorAddress string, createdAt, executedAt, signedAt uint64, signs [][]byte, payload []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", ctx, status, committeeID, chainID, automationID, txHash, executorAddress, createdAt, executedAt, signedAt, signs, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockJobKeeperMockRecorder) CreateJob(ctx, status, committeeID, chainID, automationID, txHash, executorAddress, createdAt, executedAt, signedAt, signs, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockJobKeeper)(nil).CreateJob), ctx, status, committeeID, chainID, automationID, txHash, executorAddress, createdAt, executedAt, signedAt, signs, payload)
}
