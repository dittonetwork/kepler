// Code generated by MockGen. DO NOT EDIT.
// Source: keeper/keeper.go
//
// Generated by this command:
//
//	mockgen --source=keeper/keeper.go --destination=types/mock/keeper.go --package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	log "cosmossdk.io/log"
	types "github.com/cosmos/cosmos-sdk/types"
	types0 "github.com/dittonetwork/kepler/x/workflow/types"
	gomock "go.uber.org/mock/gomock"
)

// MockKeeper is a mock of Keeper interface.
type MockKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockKeeperMockRecorder
	isgomock struct{}
}

// MockKeeperMockRecorder is the mock recorder for MockKeeper.
type MockKeeperMockRecorder struct {
	mock *MockKeeper
}

// NewMockKeeper creates a new mock instance.
func NewMockKeeper(ctrl *gomock.Controller) *MockKeeper {
	mock := &MockKeeper{ctrl: ctrl}
	mock.recorder = &MockKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeeper) EXPECT() *MockKeeperMockRecorder {
	return m.recorder
}

// ActivateAutomation mocks base method.
func (m *MockKeeper) ActivateAutomation(ctx types.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateAutomation", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateAutomation indicates an expected call of ActivateAutomation.
func (mr *MockKeeperMockRecorder) ActivateAutomation(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateAutomation", reflect.TypeOf((*MockKeeper)(nil).ActivateAutomation), ctx, id)
}

// CancelAutomation mocks base method.
func (m *MockKeeper) CancelAutomation(ctx types.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelAutomation", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelAutomation indicates an expected call of CancelAutomation.
func (mr *MockKeeperMockRecorder) CancelAutomation(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelAutomation", reflect.TypeOf((*MockKeeper)(nil).CancelAutomation), ctx, id)
}

// FindActiveAutomations mocks base method.
func (m *MockKeeper) FindActiveAutomations(ctx types.Context) ([]*types0.Automation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActiveAutomations", ctx)
	ret0, _ := ret[0].([]*types0.Automation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActiveAutomations indicates an expected call of FindActiveAutomations.
func (mr *MockKeeperMockRecorder) FindActiveAutomations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActiveAutomations", reflect.TypeOf((*MockKeeper)(nil).FindActiveAutomations), ctx)
}

// GetActiveAutomations mocks base method.
func (m *MockKeeper) GetActiveAutomations(goCtx context.Context, req *types0.QueryGetActiveAutomationsRequest) (*types0.QueryGetActiveAutomationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveAutomations", goCtx, req)
	ret0, _ := ret[0].(*types0.QueryGetActiveAutomationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveAutomations indicates an expected call of GetActiveAutomations.
func (mr *MockKeeperMockRecorder) GetActiveAutomations(goCtx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveAutomations", reflect.TypeOf((*MockKeeper)(nil).GetActiveAutomations), goCtx, req)
}

// GetAuthority mocks base method.
func (m *MockKeeper) GetAuthority() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthority")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAuthority indicates an expected call of GetAuthority.
func (mr *MockKeeperMockRecorder) GetAuthority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthority", reflect.TypeOf((*MockKeeper)(nil).GetAuthority))
}

// GetAutomation mocks base method.
func (m *MockKeeper) GetAutomation(ctx types.Context, id uint64) (types0.Automation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutomation", ctx, id)
	ret0, _ := ret[0].(types0.Automation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutomation indicates an expected call of GetAutomation.
func (mr *MockKeeperMockRecorder) GetAutomation(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutomation", reflect.TypeOf((*MockKeeper)(nil).GetAutomation), ctx, id)
}

// GetNextAutomationID mocks base method.
func (m *MockKeeper) GetNextAutomationID(ctx types.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextAutomationID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextAutomationID indicates an expected call of GetNextAutomationID.
func (mr *MockKeeperMockRecorder) GetNextAutomationID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextAutomationID", reflect.TypeOf((*MockKeeper)(nil).GetNextAutomationID), ctx)
}

// GetParams mocks base method.
func (m *MockKeeper) GetParams(ctx context.Context) types0.Params {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParams", ctx)
	ret0, _ := ret[0].(types0.Params)
	return ret0
}

// GetParams indicates an expected call of GetParams.
func (mr *MockKeeperMockRecorder) GetParams(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParams", reflect.TypeOf((*MockKeeper)(nil).GetParams), ctx)
}

// InsertAutomation mocks base method.
func (m *MockKeeper) InsertAutomation(ctx types.Context, automation types0.Automation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAutomation", ctx, automation)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertAutomation indicates an expected call of InsertAutomation.
func (mr *MockKeeperMockRecorder) InsertAutomation(ctx, automation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAutomation", reflect.TypeOf((*MockKeeper)(nil).InsertAutomation), ctx, automation)
}

// Logger mocks base method.
func (m *MockKeeper) Logger() log.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(log.Logger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockKeeperMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockKeeper)(nil).Logger))
}

// Params mocks base method.
func (m *MockKeeper) Params(goCtx context.Context, req *types0.QueryParamsRequest) (*types0.QueryParamsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Params", goCtx, req)
	ret0, _ := ret[0].(*types0.QueryParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Params indicates an expected call of Params.
func (mr *MockKeeperMockRecorder) Params(goCtx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockKeeper)(nil).Params), goCtx, req)
}

// SetAutomationStatus mocks base method.
func (m *MockKeeper) SetAutomationStatus(ctx types.Context, id uint64, status types0.AutomationStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAutomationStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAutomationStatus indicates an expected call of SetAutomationStatus.
func (mr *MockKeeperMockRecorder) SetAutomationStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAutomationStatus", reflect.TypeOf((*MockKeeper)(nil).SetAutomationStatus), ctx, id, status)
}

// SetParams mocks base method.
func (m *MockKeeper) SetParams(ctx context.Context, params types0.Params) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetParams", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetParams indicates an expected call of SetParams.
func (mr *MockKeeperMockRecorder) SetParams(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParams", reflect.TypeOf((*MockKeeper)(nil).SetParams), ctx, params)
}
