// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kepler/workflow/automation.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Enumeration for automation status
type AutomationStatus int32

const (
	AutomationStatus_AUTOMATION_STATUS_STATUS_UNSPECIFIED AutomationStatus = 0
	AutomationStatus_AUTOMATION_STATUS_ACTIVE             AutomationStatus = 1
	AutomationStatus_AUTOMATION_STATUS_EXPIRED            AutomationStatus = 2
	AutomationStatus_AUTOMATION_STATUS_PAUSED             AutomationStatus = 3
	AutomationStatus_AUTOMATION_STATUS_FAILED             AutomationStatus = 4
	AutomationStatus_AUTOMATION_STATUS_DONE               AutomationStatus = 5
)

var AutomationStatus_name = map[int32]string{
	0: "AUTOMATION_STATUS_STATUS_UNSPECIFIED",
	1: "AUTOMATION_STATUS_ACTIVE",
	2: "AUTOMATION_STATUS_EXPIRED",
	3: "AUTOMATION_STATUS_PAUSED",
	4: "AUTOMATION_STATUS_FAILED",
	5: "AUTOMATION_STATUS_DONE",
}

var AutomationStatus_value = map[string]int32{
	"AUTOMATION_STATUS_STATUS_UNSPECIFIED": 0,
	"AUTOMATION_STATUS_ACTIVE":             1,
	"AUTOMATION_STATUS_EXPIRED":            2,
	"AUTOMATION_STATUS_PAUSED":             3,
	"AUTOMATION_STATUS_FAILED":             4,
	"AUTOMATION_STATUS_DONE":               5,
}

func (x AutomationStatus) String() string {
	return proto.EnumName(AutomationStatus_name, int32(x))
}

func (AutomationStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e70c979264e1abb3, []int{0}
}

// Automation entity
type Automation struct {
	Id          string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Triggers    []*Trigger       `protobuf:"bytes,2,rep,name=triggers,proto3" json:"triggers,omitempty"`
	Actions     []*Action        `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`
	RepeatCount uint64           `protobuf:"varint,4,opt,name=repeat_count,json=repeatCount,proto3" json:"repeat_count,omitempty"`
	ExpireAt    uint64           `protobuf:"varint,5,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	Status      AutomationStatus `protobuf:"varint,6,opt,name=status,proto3,enum=kepler.workflow.AutomationStatus" json:"status,omitempty"`
}

func (m *Automation) Reset()         { *m = Automation{} }
func (m *Automation) String() string { return proto.CompactTextString(m) }
func (*Automation) ProtoMessage()    {}
func (*Automation) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70c979264e1abb3, []int{0}
}
func (m *Automation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Automation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Automation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Automation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Automation.Merge(m, src)
}
func (m *Automation) XXX_Size() int {
	return m.Size()
}
func (m *Automation) XXX_DiscardUnknown() {
	xxx_messageInfo_Automation.DiscardUnknown(m)
}

var xxx_messageInfo_Automation proto.InternalMessageInfo

func (m *Automation) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Automation) GetTriggers() []*Trigger {
	if m != nil {
		return m.Triggers
	}
	return nil
}

func (m *Automation) GetActions() []*Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *Automation) GetRepeatCount() uint64 {
	if m != nil {
		return m.RepeatCount
	}
	return 0
}

func (m *Automation) GetExpireAt() uint64 {
	if m != nil {
		return m.ExpireAt
	}
	return 0
}

func (m *Automation) GetStatus() AutomationStatus {
	if m != nil {
		return m.Status
	}
	return AutomationStatus_AUTOMATION_STATUS_STATUS_UNSPECIFIED
}

// Base trigger with type selection
type Trigger struct {
	// Types that are valid to be assigned to Condition:
	//
	//	*Trigger_Price
	//	*Trigger_Time
	//	*Trigger_And
	//	*Trigger_Or
	Condition isTrigger_Condition `protobuf_oneof:"condition"`
}

func (m *Trigger) Reset()         { *m = Trigger{} }
func (m *Trigger) String() string { return proto.CompactTextString(m) }
func (*Trigger) ProtoMessage()    {}
func (*Trigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70c979264e1abb3, []int{1}
}
func (m *Trigger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Trigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Trigger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Trigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trigger.Merge(m, src)
}
func (m *Trigger) XXX_Size() int {
	return m.Size()
}
func (m *Trigger) XXX_DiscardUnknown() {
	xxx_messageInfo_Trigger.DiscardUnknown(m)
}

var xxx_messageInfo_Trigger proto.InternalMessageInfo

type isTrigger_Condition interface {
	isTrigger_Condition()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Trigger_Price struct {
	Price *PriceTrigger `protobuf:"bytes,1,opt,name=price,proto3,oneof" json:"price,omitempty"`
}
type Trigger_Time struct {
	Time *TimeTrigger `protobuf:"bytes,2,opt,name=time,proto3,oneof" json:"time,omitempty"`
}
type Trigger_And struct {
	And *LogicalTrigger `protobuf:"bytes,3,opt,name=and,proto3,oneof" json:"and,omitempty"`
}
type Trigger_Or struct {
	Or *LogicalTrigger `protobuf:"bytes,4,opt,name=or,proto3,oneof" json:"or,omitempty"`
}

func (*Trigger_Price) isTrigger_Condition() {}
func (*Trigger_Time) isTrigger_Condition()  {}
func (*Trigger_And) isTrigger_Condition()   {}
func (*Trigger_Or) isTrigger_Condition()    {}

func (m *Trigger) GetCondition() isTrigger_Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *Trigger) GetPrice() *PriceTrigger {
	if x, ok := m.GetCondition().(*Trigger_Price); ok {
		return x.Price
	}
	return nil
}

func (m *Trigger) GetTime() *TimeTrigger {
	if x, ok := m.GetCondition().(*Trigger_Time); ok {
		return x.Time
	}
	return nil
}

func (m *Trigger) GetAnd() *LogicalTrigger {
	if x, ok := m.GetCondition().(*Trigger_And); ok {
		return x.And
	}
	return nil
}

func (m *Trigger) GetOr() *LogicalTrigger {
	if x, ok := m.GetCondition().(*Trigger_Or); ok {
		return x.Or
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Trigger) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Trigger_Price)(nil),
		(*Trigger_Time)(nil),
		(*Trigger_And)(nil),
		(*Trigger_Or)(nil),
	}
}

// Asset price trigger
type PriceTrigger struct {
	Asset       string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Operator    string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	TargetPrice string `protobuf:"bytes,3,opt,name=target_price,json=targetPrice,proto3" json:"target_price,omitempty"`
}

func (m *PriceTrigger) Reset()         { *m = PriceTrigger{} }
func (m *PriceTrigger) String() string { return proto.CompactTextString(m) }
func (*PriceTrigger) ProtoMessage()    {}
func (*PriceTrigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70c979264e1abb3, []int{2}
}
func (m *PriceTrigger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceTrigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceTrigger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceTrigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceTrigger.Merge(m, src)
}
func (m *PriceTrigger) XXX_Size() int {
	return m.Size()
}
func (m *PriceTrigger) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceTrigger.DiscardUnknown(m)
}

var xxx_messageInfo_PriceTrigger proto.InternalMessageInfo

func (m *PriceTrigger) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *PriceTrigger) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *PriceTrigger) GetTargetPrice() string {
	if m != nil {
		return m.TargetPrice
	}
	return ""
}

// Time trigger
type TimeTrigger struct {
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *TimeTrigger) Reset()         { *m = TimeTrigger{} }
func (m *TimeTrigger) String() string { return proto.CompactTextString(m) }
func (*TimeTrigger) ProtoMessage()    {}
func (*TimeTrigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70c979264e1abb3, []int{3}
}
func (m *TimeTrigger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeTrigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeTrigger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeTrigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeTrigger.Merge(m, src)
}
func (m *TimeTrigger) XXX_Size() int {
	return m.Size()
}
func (m *TimeTrigger) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeTrigger.DiscardUnknown(m)
}

var xxx_messageInfo_TimeTrigger proto.InternalMessageInfo

func (m *TimeTrigger) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// Logical trigger
type LogicalTrigger struct {
	Triggers []*Trigger `protobuf:"bytes,1,rep,name=triggers,proto3" json:"triggers,omitempty"`
}

func (m *LogicalTrigger) Reset()         { *m = LogicalTrigger{} }
func (m *LogicalTrigger) String() string { return proto.CompactTextString(m) }
func (*LogicalTrigger) ProtoMessage()    {}
func (*LogicalTrigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70c979264e1abb3, []int{4}
}
func (m *LogicalTrigger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogicalTrigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogicalTrigger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogicalTrigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicalTrigger.Merge(m, src)
}
func (m *LogicalTrigger) XXX_Size() int {
	return m.Size()
}
func (m *LogicalTrigger) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicalTrigger.DiscardUnknown(m)
}

var xxx_messageInfo_LogicalTrigger proto.InternalMessageInfo

func (m *LogicalTrigger) GetTriggers() []*Trigger {
	if m != nil {
		return m.Triggers
	}
	return nil
}

type Action struct {
	// Types that are valid to be assigned to Action:
	//
	//	*Action_ExecuteContract
	//	*Action_Trade
	Action isAction_Action `protobuf_oneof:"action"`
}

func (m *Action) Reset()         { *m = Action{} }
func (m *Action) String() string { return proto.CompactTextString(m) }
func (*Action) ProtoMessage()    {}
func (*Action) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70c979264e1abb3, []int{5}
}
func (m *Action) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Action) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Action.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Action) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Action.Merge(m, src)
}
func (m *Action) XXX_Size() int {
	return m.Size()
}
func (m *Action) XXX_DiscardUnknown() {
	xxx_messageInfo_Action.DiscardUnknown(m)
}

var xxx_messageInfo_Action proto.InternalMessageInfo

type isAction_Action interface {
	isAction_Action()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Action_ExecuteContract struct {
	ExecuteContract *ExecuteContract `protobuf:"bytes,1,opt,name=execute_contract,json=executeContract,proto3,oneof" json:"execute_contract,omitempty"`
}
type Action_Trade struct {
	Trade *Trade `protobuf:"bytes,2,opt,name=trade,proto3,oneof" json:"trade,omitempty"`
}

func (*Action_ExecuteContract) isAction_Action() {}
func (*Action_Trade) isAction_Action()           {}

func (m *Action) GetAction() isAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *Action) GetExecuteContract() *ExecuteContract {
	if x, ok := m.GetAction().(*Action_ExecuteContract); ok {
		return x.ExecuteContract
	}
	return nil
}

func (m *Action) GetTrade() *Trade {
	if x, ok := m.GetAction().(*Action_Trade); ok {
		return x.Trade
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Action) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Action_ExecuteContract)(nil),
		(*Action_Trade)(nil),
	}
}

// Execute contract action
type ExecuteContract struct {
	ContractId string `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	Function   string `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
}

func (m *ExecuteContract) Reset()         { *m = ExecuteContract{} }
func (m *ExecuteContract) String() string { return proto.CompactTextString(m) }
func (*ExecuteContract) ProtoMessage()    {}
func (*ExecuteContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70c979264e1abb3, []int{6}
}
func (m *ExecuteContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteContract.Merge(m, src)
}
func (m *ExecuteContract) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteContract) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteContract.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteContract proto.InternalMessageInfo

func (m *ExecuteContract) GetContractId() string {
	if m != nil {
		return m.ContractId
	}
	return ""
}

func (m *ExecuteContract) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

// Trade action
type Trade struct {
	Asset  string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Price  string `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	Side   string `protobuf:"bytes,4,opt,name=side,proto3" json:"side,omitempty"`
}

func (m *Trade) Reset()         { *m = Trade{} }
func (m *Trade) String() string { return proto.CompactTextString(m) }
func (*Trade) ProtoMessage()    {}
func (*Trade) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70c979264e1abb3, []int{7}
}
func (m *Trade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Trade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Trade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Trade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trade.Merge(m, src)
}
func (m *Trade) XXX_Size() int {
	return m.Size()
}
func (m *Trade) XXX_DiscardUnknown() {
	xxx_messageInfo_Trade.DiscardUnknown(m)
}

var xxx_messageInfo_Trade proto.InternalMessageInfo

func (m *Trade) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *Trade) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *Trade) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *Trade) GetSide() string {
	if m != nil {
		return m.Side
	}
	return ""
}

func init() {
	proto.RegisterEnum("kepler.workflow.AutomationStatus", AutomationStatus_name, AutomationStatus_value)
	proto.RegisterType((*Automation)(nil), "kepler.workflow.Automation")
	proto.RegisterType((*Trigger)(nil), "kepler.workflow.Trigger")
	proto.RegisterType((*PriceTrigger)(nil), "kepler.workflow.PriceTrigger")
	proto.RegisterType((*TimeTrigger)(nil), "kepler.workflow.TimeTrigger")
	proto.RegisterType((*LogicalTrigger)(nil), "kepler.workflow.LogicalTrigger")
	proto.RegisterType((*Action)(nil), "kepler.workflow.Action")
	proto.RegisterType((*ExecuteContract)(nil), "kepler.workflow.ExecuteContract")
	proto.RegisterType((*Trade)(nil), "kepler.workflow.Trade")
}

func init() { proto.RegisterFile("kepler/workflow/automation.proto", fileDescriptor_e70c979264e1abb3) }

var fileDescriptor_e70c979264e1abb3 = []byte{
	// 662 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcf, 0x4f, 0xdb, 0x30,
	0x14, 0xc7, 0x9b, 0xf4, 0x07, 0xed, 0x0b, 0x82, 0xc8, 0x9a, 0x20, 0x63, 0x50, 0x4a, 0xb4, 0x43,
	0xb5, 0x49, 0x45, 0x94, 0xed, 0xb0, 0x63, 0x68, 0x83, 0x88, 0x04, 0xa5, 0x4a, 0xdb, 0x69, 0xda,
	0x25, 0xf2, 0x12, 0x53, 0x45, 0xd0, 0x3a, 0x72, 0x5c, 0xc1, 0x6e, 0xfb, 0x13, 0xb6, 0xff, 0x6a,
	0x47, 0x76, 0xdb, 0x71, 0x82, 0xd3, 0xfe, 0x8b, 0x29, 0x76, 0x52, 0x0a, 0xe9, 0x24, 0x4e, 0x89,
	0xdf, 0xfb, 0x7c, 0x9f, 0xfd, 0x7e, 0xd8, 0xd0, 0xb8, 0x24, 0xd1, 0x15, 0x61, 0xfb, 0xd7, 0x94,
	0x5d, 0x5e, 0x5c, 0xd1, 0xeb, 0x7d, 0x3c, 0xe3, 0x74, 0x82, 0x79, 0x48, 0xa7, 0xad, 0x88, 0x51,
	0x4e, 0xd1, 0xba, 0x24, 0x5a, 0x19, 0x61, 0x7e, 0x53, 0x01, 0xac, 0x39, 0x85, 0xd6, 0x40, 0x0d,
	0x03, 0x43, 0x69, 0x28, 0xcd, 0x9a, 0xab, 0x86, 0x01, 0x7a, 0x07, 0x55, 0xce, 0xc2, 0xf1, 0x98,
	0xb0, 0xd8, 0x50, 0x1b, 0xc5, 0xa6, 0xd6, 0x36, 0x5a, 0x4f, 0x42, 0xb4, 0x86, 0x12, 0x70, 0xe7,
	0x24, 0x3a, 0x80, 0x15, 0xec, 0x27, 0xf1, 0x62, 0xa3, 0x28, 0x44, 0x9b, 0x39, 0x91, 0x25, 0xfc,
	0x6e, 0xc6, 0xa1, 0x3d, 0x58, 0x65, 0x24, 0x22, 0x98, 0x7b, 0x3e, 0x9d, 0x4d, 0xb9, 0x51, 0x6a,
	0x28, 0xcd, 0x92, 0xab, 0x49, 0x5b, 0x27, 0x31, 0xa1, 0x57, 0x50, 0x23, 0x37, 0x51, 0xc8, 0x88,
	0x87, 0xb9, 0x51, 0x16, 0xfe, 0xaa, 0x34, 0x58, 0x1c, 0x7d, 0x80, 0x4a, 0xcc, 0x31, 0x9f, 0xc5,
	0x46, 0xa5, 0xa1, 0x34, 0xd7, 0xda, 0x7b, 0xf9, 0x1d, 0xe7, 0x59, 0x0e, 0x04, 0xe8, 0xa6, 0x02,
	0xf3, 0xaf, 0x02, 0x2b, 0x69, 0x0e, 0xe8, 0x3d, 0x94, 0x23, 0x16, 0xfa, 0x44, 0x94, 0x40, 0x6b,
	0xef, 0xe4, 0xa2, 0xf4, 0x13, 0x6f, 0x4a, 0x9f, 0x14, 0x5c, 0x49, 0xa3, 0x36, 0x94, 0x78, 0x38,
	0x21, 0x86, 0x2a, 0x54, 0xdb, 0xf9, 0x12, 0x85, 0x93, 0x05, 0x91, 0x60, 0xd1, 0x21, 0x14, 0xf1,
	0x34, 0x30, 0x8a, 0x42, 0xb2, 0x9b, 0x93, 0x9c, 0xd2, 0x71, 0xe8, 0xe3, 0xab, 0x07, 0x55, 0x42,
	0xa3, 0x03, 0x50, 0x29, 0x13, 0xc5, 0x79, 0x96, 0x46, 0xa5, 0xec, 0x48, 0x83, 0x9a, 0x4f, 0xa7,
	0x41, 0x98, 0x64, 0x6e, 0xfa, 0xb0, 0xba, 0x98, 0x01, 0x7a, 0x01, 0x65, 0x1c, 0xc7, 0x84, 0xa7,
	0x2d, 0x97, 0x0b, 0xb4, 0x05, 0x55, 0x1a, 0x11, 0x86, 0x39, 0x65, 0x22, 0xa5, 0x9a, 0x3b, 0x5f,
	0x27, 0x8d, 0xe2, 0x98, 0x8d, 0x09, 0xf7, 0x64, 0xa1, 0x8a, 0xc2, 0xaf, 0x49, 0x9b, 0x88, 0x6d,
	0xbe, 0x05, 0x6d, 0x21, 0x61, 0xb4, 0x0d, 0xb5, 0x24, 0xe1, 0x98, 0xe3, 0x49, 0x24, 0xf6, 0x29,
	0xb9, 0x0f, 0x06, 0xf3, 0x18, 0xd6, 0x1e, 0x1f, 0xfb, 0xd1, 0xcc, 0x29, 0xcf, 0x9d, 0x39, 0xf3,
	0x87, 0x02, 0x15, 0x39, 0x54, 0xe8, 0x0c, 0x74, 0x72, 0x43, 0xfc, 0x19, 0x27, 0x9e, 0x4f, 0xa7,
	0x9c, 0x61, 0x9f, 0xa7, 0xfd, 0x6c, 0xe4, 0x02, 0xd9, 0x12, 0xec, 0xa4, 0xdc, 0x49, 0xc1, 0x5d,
	0x27, 0x8f, 0x4d, 0xa8, 0x05, 0x65, 0xce, 0x70, 0x90, 0x75, 0x77, 0x63, 0xc9, 0x61, 0x70, 0x40,
	0x92, 0x61, 0x10, 0xd8, 0x51, 0x15, 0x2a, 0x72, 0xaa, 0xcd, 0x1e, 0xac, 0x3f, 0x89, 0x8f, 0x76,
	0x41, 0xcb, 0xce, 0xe4, 0xcd, 0x6f, 0x1a, 0x64, 0x26, 0x27, 0x48, 0x6a, 0x7f, 0x31, 0x9b, 0x0a,
	0x7d, 0x56, 0xfb, 0x6c, 0x6d, 0x7a, 0x50, 0x16, 0x7b, 0xfd, 0xa7, 0x6d, 0x1b, 0x50, 0xc1, 0x13,
	0x71, 0x7b, 0xa4, 0x30, 0x5d, 0x25, 0xf4, 0x62, 0xaf, 0xd2, 0x99, 0x45, 0x50, 0x8a, 0xc3, 0x80,
	0x88, 0x61, 0xaa, 0xb9, 0xe2, 0xff, 0xcd, 0x2f, 0x05, 0xf4, 0xa7, 0xf7, 0x04, 0x35, 0xe1, 0xb5,
	0x35, 0x1a, 0x9e, 0x9f, 0x59, 0x43, 0xe7, 0xbc, 0xe7, 0x0d, 0x86, 0xd6, 0x70, 0x34, 0xc8, 0x3e,
	0xa3, 0xde, 0xa0, 0x6f, 0x77, 0x9c, 0x63, 0xc7, 0xee, 0xea, 0x05, 0xb4, 0x0d, 0x46, 0x9e, 0xb4,
	0x3a, 0x43, 0xe7, 0xa3, 0xad, 0x2b, 0x68, 0x07, 0x5e, 0xe6, 0xbd, 0xf6, 0xa7, 0xbe, 0xe3, 0xda,
	0x5d, 0x5d, 0x5d, 0x2e, 0xee, 0x5b, 0xa3, 0x81, 0xdd, 0xd5, 0x8b, 0xcb, 0xbd, 0xc7, 0x96, 0x73,
	0x6a, 0x77, 0xf5, 0x12, 0xda, 0x82, 0x8d, 0xbc, 0xb7, 0x7b, 0xde, 0xb3, 0xf5, 0xf2, 0xd1, 0xc1,
	0xcf, 0xbb, 0xba, 0x72, 0x7b, 0x57, 0x57, 0xfe, 0xdc, 0xd5, 0x95, 0xef, 0xf7, 0xf5, 0xc2, 0xed,
	0x7d, 0xbd, 0xf0, 0xfb, 0xbe, 0x5e, 0xf8, 0xbc, 0x99, 0x3e, 0x97, 0x37, 0x0f, 0x0f, 0x26, 0xff,
	0x1a, 0x91, 0xf8, 0x4b, 0x45, 0x3c, 0x96, 0x87, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3b, 0xc5,
	0xb0, 0x66, 0x50, 0x05, 0x00, 0x00,
}

func (m *Automation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Automation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Automation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintAutomation(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.ExpireAt != 0 {
		i = encodeVarintAutomation(dAtA, i, uint64(m.ExpireAt))
		i--
		dAtA[i] = 0x28
	}
	if m.RepeatCount != 0 {
		i = encodeVarintAutomation(dAtA, i, uint64(m.RepeatCount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Actions) > 0 {
		for iNdEx := len(m.Actions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Actions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAutomation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Triggers) > 0 {
		for iNdEx := len(m.Triggers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Triggers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAutomation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintAutomation(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Trigger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Trigger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Trigger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Condition != nil {
		{
			size := m.Condition.Size()
			i -= size
			if _, err := m.Condition.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Trigger_Price) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Trigger_Price) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Price != nil {
		{
			size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAutomation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Trigger_Time) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Trigger_Time) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Time != nil {
		{
			size, err := m.Time.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAutomation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Trigger_And) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Trigger_And) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.And != nil {
		{
			size, err := m.And.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAutomation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Trigger_Or) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Trigger_Or) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Or != nil {
		{
			size, err := m.Or.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAutomation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *PriceTrigger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceTrigger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriceTrigger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TargetPrice) > 0 {
		i -= len(m.TargetPrice)
		copy(dAtA[i:], m.TargetPrice)
		i = encodeVarintAutomation(dAtA, i, uint64(len(m.TargetPrice)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintAutomation(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintAutomation(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimeTrigger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeTrigger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeTrigger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintAutomation(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogicalTrigger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogicalTrigger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogicalTrigger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Triggers) > 0 {
		for iNdEx := len(m.Triggers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Triggers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAutomation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Action) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Action) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Action) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Action != nil {
		{
			size := m.Action.Size()
			i -= size
			if _, err := m.Action.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Action_ExecuteContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Action_ExecuteContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExecuteContract != nil {
		{
			size, err := m.ExecuteContract.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAutomation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Action_Trade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Action_Trade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Trade != nil {
		{
			size, err := m.Trade.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAutomation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ExecuteContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecuteContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Function) > 0 {
		i -= len(m.Function)
		copy(dAtA[i:], m.Function)
		i = encodeVarintAutomation(dAtA, i, uint64(len(m.Function)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractId) > 0 {
		i -= len(m.ContractId)
		copy(dAtA[i:], m.ContractId)
		i = encodeVarintAutomation(dAtA, i, uint64(len(m.ContractId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Trade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Trade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Trade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Side) > 0 {
		i -= len(m.Side)
		copy(dAtA[i:], m.Side)
		i = encodeVarintAutomation(dAtA, i, uint64(len(m.Side)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintAutomation(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintAutomation(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintAutomation(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAutomation(dAtA []byte, offset int, v uint64) int {
	offset -= sovAutomation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Automation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAutomation(uint64(l))
	}
	if len(m.Triggers) > 0 {
		for _, e := range m.Triggers {
			l = e.Size()
			n += 1 + l + sovAutomation(uint64(l))
		}
	}
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovAutomation(uint64(l))
		}
	}
	if m.RepeatCount != 0 {
		n += 1 + sovAutomation(uint64(m.RepeatCount))
	}
	if m.ExpireAt != 0 {
		n += 1 + sovAutomation(uint64(m.ExpireAt))
	}
	if m.Status != 0 {
		n += 1 + sovAutomation(uint64(m.Status))
	}
	return n
}

func (m *Trigger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Condition != nil {
		n += m.Condition.Size()
	}
	return n
}

func (m *Trigger_Price) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Price != nil {
		l = m.Price.Size()
		n += 1 + l + sovAutomation(uint64(l))
	}
	return n
}
func (m *Trigger_Time) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != nil {
		l = m.Time.Size()
		n += 1 + l + sovAutomation(uint64(l))
	}
	return n
}
func (m *Trigger_And) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.And != nil {
		l = m.And.Size()
		n += 1 + l + sovAutomation(uint64(l))
	}
	return n
}
func (m *Trigger_Or) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Or != nil {
		l = m.Or.Size()
		n += 1 + l + sovAutomation(uint64(l))
	}
	return n
}
func (m *PriceTrigger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovAutomation(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovAutomation(uint64(l))
	}
	l = len(m.TargetPrice)
	if l > 0 {
		n += 1 + l + sovAutomation(uint64(l))
	}
	return n
}

func (m *TimeTrigger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovAutomation(uint64(m.Timestamp))
	}
	return n
}

func (m *LogicalTrigger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Triggers) > 0 {
		for _, e := range m.Triggers {
			l = e.Size()
			n += 1 + l + sovAutomation(uint64(l))
		}
	}
	return n
}

func (m *Action) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != nil {
		n += m.Action.Size()
	}
	return n
}

func (m *Action_ExecuteContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecuteContract != nil {
		l = m.ExecuteContract.Size()
		n += 1 + l + sovAutomation(uint64(l))
	}
	return n
}
func (m *Action_Trade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Trade != nil {
		l = m.Trade.Size()
		n += 1 + l + sovAutomation(uint64(l))
	}
	return n
}
func (m *ExecuteContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractId)
	if l > 0 {
		n += 1 + l + sovAutomation(uint64(l))
	}
	l = len(m.Function)
	if l > 0 {
		n += 1 + l + sovAutomation(uint64(l))
	}
	return n
}

func (m *Trade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovAutomation(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovAutomation(uint64(l))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovAutomation(uint64(l))
	}
	l = len(m.Side)
	if l > 0 {
		n += 1 + l + sovAutomation(uint64(l))
	}
	return n
}

func sovAutomation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAutomation(x uint64) (n int) {
	return sovAutomation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Automation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Automation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Automation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Triggers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Triggers = append(m.Triggers, &Trigger{})
			if err := m.Triggers[len(m.Triggers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, &Action{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatCount", wireType)
			}
			m.RepeatCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepeatCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireAt", wireType)
			}
			m.ExpireAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= AutomationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAutomation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Trigger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PriceTrigger{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Condition = &Trigger_Price{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TimeTrigger{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Condition = &Trigger_Time{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field And", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LogicalTrigger{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Condition = &Trigger_And{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Or", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LogicalTrigger{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Condition = &Trigger_Or{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutomation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriceTrigger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceTrigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutomation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeTrigger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeTrigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAutomation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogicalTrigger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogicalTrigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogicalTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Triggers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Triggers = append(m.Triggers, &Trigger{})
			if err := m.Triggers[len(m.Triggers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutomation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Action) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Action: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Action: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecuteContract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExecuteContract{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &Action_ExecuteContract{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trade", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Trade{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &Action_Trade{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutomation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Function", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Function = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutomation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Trade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Side = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutomation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAutomation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAutomation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAutomation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAutomation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAutomation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAutomation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAutomation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAutomation = fmt.Errorf("proto: unexpected end of group")
)
