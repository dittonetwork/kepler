// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kepler/workflow/automation.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/dittonetwork/kepler/x/job/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Enumeration for automation status
type AutomationStatus int32

const (
	AutomationStatus_AUTOMATION_STATUS_STATUS_UNSPECIFIED AutomationStatus = 0
	AutomationStatus_AUTOMATION_STATUS_ACTIVE             AutomationStatus = 1
	AutomationStatus_AUTOMATION_STATUS_EXPIRED            AutomationStatus = 2
	AutomationStatus_AUTOMATION_STATUS_PAUSED             AutomationStatus = 3
	AutomationStatus_AUTOMATION_STATUS_FAILED             AutomationStatus = 4
	AutomationStatus_AUTOMATION_STATUS_DONE               AutomationStatus = 5
	AutomationStatus_AUTOMATION_STATUS_CANCELED           AutomationStatus = 6
)

var AutomationStatus_name = map[int32]string{
	0: "AUTOMATION_STATUS_STATUS_UNSPECIFIED",
	1: "AUTOMATION_STATUS_ACTIVE",
	2: "AUTOMATION_STATUS_EXPIRED",
	3: "AUTOMATION_STATUS_PAUSED",
	4: "AUTOMATION_STATUS_FAILED",
	5: "AUTOMATION_STATUS_DONE",
	6: "AUTOMATION_STATUS_CANCELED",
}

var AutomationStatus_value = map[string]int32{
	"AUTOMATION_STATUS_STATUS_UNSPECIFIED": 0,
	"AUTOMATION_STATUS_ACTIVE":             1,
	"AUTOMATION_STATUS_EXPIRED":            2,
	"AUTOMATION_STATUS_PAUSED":             3,
	"AUTOMATION_STATUS_FAILED":             4,
	"AUTOMATION_STATUS_DONE":               5,
	"AUTOMATION_STATUS_CANCELED":           6,
}

func (x AutomationStatus) String() string {
	return proto.EnumName(AutomationStatus_name, int32(x))
}

func (AutomationStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e70c979264e1abb3, []int{0}
}

// Automation entity
type Automation struct {
	Id                    uint64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Triggers              []*Trigger       `protobuf:"bytes,2,rep,name=triggers,proto3" json:"triggers,omitempty"`
	Actions               []*Action        `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`
	ExpireAt              int64            `protobuf:"varint,4,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	Status                AutomationStatus `protobuf:"varint,5,opt,name=status,proto3,enum=kepler.workflow.AutomationStatus" json:"status,omitempty"`
	ExecutionCount        int64            `protobuf:"varint,6,opt,name=execution_count,json=executionCount,proto3" json:"execution_count,omitempty"`
	FailedExecutionStreak int64            `protobuf:"varint,7,opt,name=failed_execution_streak,json=failedExecutionStreak,proto3" json:"failed_execution_streak,omitempty"`
	LastSuccessfulJob     *types.Job       `protobuf:"bytes,8,opt,name=last_successful_job,json=lastSuccessfulJob,proto3" json:"last_successful_job,omitempty"`
	Creator               string           `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Automation) Reset()         { *m = Automation{} }
func (m *Automation) String() string { return proto.CompactTextString(m) }
func (*Automation) ProtoMessage()    {}
func (*Automation) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70c979264e1abb3, []int{0}
}
func (m *Automation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Automation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Automation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Automation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Automation.Merge(m, src)
}
func (m *Automation) XXX_Size() int {
	return m.Size()
}
func (m *Automation) XXX_DiscardUnknown() {
	xxx_messageInfo_Automation.DiscardUnknown(m)
}

var xxx_messageInfo_Automation proto.InternalMessageInfo

func (m *Automation) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Automation) GetTriggers() []*Trigger {
	if m != nil {
		return m.Triggers
	}
	return nil
}

func (m *Automation) GetActions() []*Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *Automation) GetExpireAt() int64 {
	if m != nil {
		return m.ExpireAt
	}
	return 0
}

func (m *Automation) GetStatus() AutomationStatus {
	if m != nil {
		return m.Status
	}
	return AutomationStatus_AUTOMATION_STATUS_STATUS_UNSPECIFIED
}

func (m *Automation) GetExecutionCount() int64 {
	if m != nil {
		return m.ExecutionCount
	}
	return 0
}

func (m *Automation) GetFailedExecutionStreak() int64 {
	if m != nil {
		return m.FailedExecutionStreak
	}
	return 0
}

func (m *Automation) GetLastSuccessfulJob() *types.Job {
	if m != nil {
		return m.LastSuccessfulJob
	}
	return nil
}

func (m *Automation) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// Base trigger with type selection
type Trigger struct {
	// Types that are valid to be assigned to Trigger:
	//	*Trigger_OnChainCall
	//	*Trigger_Time
	//	*Trigger_GasPrice
	//	*Trigger_Count
	//	*Trigger_BlockInterval
	//	*Trigger_Schedule
	Trigger isTrigger_Trigger `protobuf_oneof:"trigger"`
}

func (m *Trigger) Reset()         { *m = Trigger{} }
func (m *Trigger) String() string { return proto.CompactTextString(m) }
func (*Trigger) ProtoMessage()    {}
func (*Trigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70c979264e1abb3, []int{1}
}
func (m *Trigger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Trigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Trigger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Trigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trigger.Merge(m, src)
}
func (m *Trigger) XXX_Size() int {
	return m.Size()
}
func (m *Trigger) XXX_DiscardUnknown() {
	xxx_messageInfo_Trigger.DiscardUnknown(m)
}

var xxx_messageInfo_Trigger proto.InternalMessageInfo

type isTrigger_Trigger interface {
	isTrigger_Trigger()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Trigger_OnChainCall struct {
	OnChainCall *OnChainCallTrigger `protobuf:"bytes,1,opt,name=on_chain_call,json=onChainCall,proto3,oneof" json:"on_chain_call,omitempty"`
}
type Trigger_Time struct {
	Time *TimeTrigger `protobuf:"bytes,2,opt,name=time,proto3,oneof" json:"time,omitempty"`
}
type Trigger_GasPrice struct {
	GasPrice *GasLimitTrigger `protobuf:"bytes,3,opt,name=gas_price,json=gasPrice,proto3,oneof" json:"gas_price,omitempty"`
}
type Trigger_Count struct {
	Count *CountTrigger `protobuf:"bytes,4,opt,name=count,proto3,oneof" json:"count,omitempty"`
}
type Trigger_BlockInterval struct {
	BlockInterval *BlockIntervalTrigger `protobuf:"bytes,5,opt,name=block_interval,json=blockInterval,proto3,oneof" json:"block_interval,omitempty"`
}
type Trigger_Schedule struct {
	Schedule *ScheduleTrigger `protobuf:"bytes,6,opt,name=schedule,proto3,oneof" json:"schedule,omitempty"`
}

func (*Trigger_OnChainCall) isTrigger_Trigger()   {}
func (*Trigger_Time) isTrigger_Trigger()          {}
func (*Trigger_GasPrice) isTrigger_Trigger()      {}
func (*Trigger_Count) isTrigger_Trigger()         {}
func (*Trigger_BlockInterval) isTrigger_Trigger() {}
func (*Trigger_Schedule) isTrigger_Trigger()      {}

func (m *Trigger) GetTrigger() isTrigger_Trigger {
	if m != nil {
		return m.Trigger
	}
	return nil
}

func (m *Trigger) GetOnChainCall() *OnChainCallTrigger {
	if x, ok := m.GetTrigger().(*Trigger_OnChainCall); ok {
		return x.OnChainCall
	}
	return nil
}

func (m *Trigger) GetTime() *TimeTrigger {
	if x, ok := m.GetTrigger().(*Trigger_Time); ok {
		return x.Time
	}
	return nil
}

func (m *Trigger) GetGasPrice() *GasLimitTrigger {
	if x, ok := m.GetTrigger().(*Trigger_GasPrice); ok {
		return x.GasPrice
	}
	return nil
}

func (m *Trigger) GetCount() *CountTrigger {
	if x, ok := m.GetTrigger().(*Trigger_Count); ok {
		return x.Count
	}
	return nil
}

func (m *Trigger) GetBlockInterval() *BlockIntervalTrigger {
	if x, ok := m.GetTrigger().(*Trigger_BlockInterval); ok {
		return x.BlockInterval
	}
	return nil
}

func (m *Trigger) GetSchedule() *ScheduleTrigger {
	if x, ok := m.GetTrigger().(*Trigger_Schedule); ok {
		return x.Schedule
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Trigger) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Trigger_OnChainCall)(nil),
		(*Trigger_Time)(nil),
		(*Trigger_GasPrice)(nil),
		(*Trigger_Count)(nil),
		(*Trigger_BlockInterval)(nil),
		(*Trigger_Schedule)(nil),
	}
}

// Base action with type selection
type Action struct {
	// Types that are valid to be assigned to Action:
	//
	//	*Action_OnChain
	Action isAction_Action `protobuf_oneof:"action"`
}

func (m *Action) Reset()         { *m = Action{} }
func (m *Action) String() string { return proto.CompactTextString(m) }
func (*Action) ProtoMessage()    {}
func (*Action) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70c979264e1abb3, []int{2}
}
func (m *Action) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Action) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Action.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Action) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Action.Merge(m, src)
}
func (m *Action) XXX_Size() int {
	return m.Size()
}
func (m *Action) XXX_DiscardUnknown() {
	xxx_messageInfo_Action.DiscardUnknown(m)
}

var xxx_messageInfo_Action proto.InternalMessageInfo

type isAction_Action interface {
	isAction_Action()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Action_OnChain struct {
	OnChain *OnChainAction `protobuf:"bytes,1,opt,name=on_chain,json=onChain,proto3,oneof" json:"on_chain,omitempty"`
}

func (*Action_OnChain) isAction_Action() {}

func (m *Action) GetAction() isAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *Action) GetOnChain() *OnChainAction {
	if x, ok := m.GetAction().(*Action_OnChain); ok {
		return x.OnChain
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Action) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Action_OnChain)(nil),
	}
}

// Represents the ABI definition of a smart contract method.
type MethodABI struct {
	Name            string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Inputs          []*Input  `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs         []*Output `protobuf:"bytes,3,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Type            string    `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	StateMutability string    `protobuf:"bytes,5,opt,name=state_mutability,json=stateMutability,proto3" json:"state_mutability,omitempty"`
}

func (m *MethodABI) Reset()         { *m = MethodABI{} }
func (m *MethodABI) String() string { return proto.CompactTextString(m) }
func (*MethodABI) ProtoMessage()    {}
func (*MethodABI) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70c979264e1abb3, []int{3}
}
func (m *MethodABI) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MethodABI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MethodABI.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MethodABI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MethodABI.Merge(m, src)
}
func (m *MethodABI) XXX_Size() int {
	return m.Size()
}
func (m *MethodABI) XXX_DiscardUnknown() {
	xxx_messageInfo_MethodABI.DiscardUnknown(m)
}

var xxx_messageInfo_MethodABI proto.InternalMessageInfo

func (m *MethodABI) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MethodABI) GetInputs() []*Input {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *MethodABI) GetOutputs() []*Output {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *MethodABI) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MethodABI) GetStateMutability() string {
	if m != nil {
		return m.StateMutability
	}
	return ""
}

// Represents a single input parameter for a method.
type Input struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *Input) Reset()         { *m = Input{} }
func (m *Input) String() string { return proto.CompactTextString(m) }
func (*Input) ProtoMessage()    {}
func (*Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70c979264e1abb3, []int{4}
}
func (m *Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Input.Merge(m, src)
}
func (m *Input) XXX_Size() int {
	return m.Size()
}
func (m *Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Input proto.InternalMessageInfo

func (m *Input) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Input) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// Represents a single output parameter for a method.
type Output struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *Output) Reset()         { *m = Output{} }
func (m *Output) String() string { return proto.CompactTextString(m) }
func (*Output) ProtoMessage()    {}
func (*Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70c979264e1abb3, []int{5}
}
func (m *Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Output.Merge(m, src)
}
func (m *Output) XXX_Size() int {
	return m.Size()
}
func (m *Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Output proto.InternalMessageInfo

func (m *Output) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Output) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// OnChainCallTrigger defines a trigger that calls a smart contract method.
// Instead of just sending raw call data, we now provide a more structured
// approach that includes the method's ABI and the list of arguments.
type OnChainCallTrigger struct {
	Contract      string     `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	ChainId       string     `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	MethodAbi     *MethodABI `protobuf:"bytes,3,opt,name=method_abi,json=methodAbi,proto3" json:"method_abi,omitempty"`
	OnlyFinalized bool       `protobuf:"varint,4,opt,name=only_finalized,json=onlyFinalized,proto3" json:"only_finalized,omitempty"`
	Args          []string   `protobuf:"bytes,5,rep,name=args,proto3" json:"args,omitempty"`
}

func (m *OnChainCallTrigger) Reset()         { *m = OnChainCallTrigger{} }
func (m *OnChainCallTrigger) String() string { return proto.CompactTextString(m) }
func (*OnChainCallTrigger) ProtoMessage()    {}
func (*OnChainCallTrigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70c979264e1abb3, []int{6}
}
func (m *OnChainCallTrigger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OnChainCallTrigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OnChainCallTrigger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OnChainCallTrigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnChainCallTrigger.Merge(m, src)
}
func (m *OnChainCallTrigger) XXX_Size() int {
	return m.Size()
}
func (m *OnChainCallTrigger) XXX_DiscardUnknown() {
	xxx_messageInfo_OnChainCallTrigger.DiscardUnknown(m)
}

var xxx_messageInfo_OnChainCallTrigger proto.InternalMessageInfo

func (m *OnChainCallTrigger) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *OnChainCallTrigger) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *OnChainCallTrigger) GetMethodAbi() *MethodABI {
	if m != nil {
		return m.MethodAbi
	}
	return nil
}

func (m *OnChainCallTrigger) GetOnlyFinalized() bool {
	if m != nil {
		return m.OnlyFinalized
	}
	return false
}

func (m *OnChainCallTrigger) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

// Time trigger
type TimeTrigger struct {
	ExecuteAfter int64 `protobuf:"varint,1,opt,name=execute_after,json=executeAfter,proto3" json:"execute_after,omitempty"`
}

func (m *TimeTrigger) Reset()         { *m = TimeTrigger{} }
func (m *TimeTrigger) String() string { return proto.CompactTextString(m) }
func (*TimeTrigger) ProtoMessage()    {}
func (*TimeTrigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70c979264e1abb3, []int{7}
}
func (m *TimeTrigger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeTrigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeTrigger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeTrigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeTrigger.Merge(m, src)
}
func (m *TimeTrigger) XXX_Size() int {
	return m.Size()
}
func (m *TimeTrigger) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeTrigger.DiscardUnknown(m)
}

var xxx_messageInfo_TimeTrigger proto.InternalMessageInfo

func (m *TimeTrigger) GetExecuteAfter() int64 {
	if m != nil {
		return m.ExecuteAfter
	}
	return 0
}

// Count trigger
type CountTrigger struct {
	RepeatCount uint64 `protobuf:"varint,1,opt,name=repeat_count,json=repeatCount,proto3" json:"repeat_count,omitempty"`
}

func (m *CountTrigger) Reset()         { *m = CountTrigger{} }
func (m *CountTrigger) String() string { return proto.CompactTextString(m) }
func (*CountTrigger) ProtoMessage()    {}
func (*CountTrigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70c979264e1abb3, []int{8}
}
func (m *CountTrigger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountTrigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountTrigger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountTrigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountTrigger.Merge(m, src)
}
func (m *CountTrigger) XXX_Size() int {
	return m.Size()
}
func (m *CountTrigger) XXX_DiscardUnknown() {
	xxx_messageInfo_CountTrigger.DiscardUnknown(m)
}

var xxx_messageInfo_CountTrigger proto.InternalMessageInfo

func (m *CountTrigger) GetRepeatCount() uint64 {
	if m != nil {
		return m.RepeatCount
	}
	return 0
}

// Block interval trigger
type BlockIntervalTrigger struct {
	BlockInterval uint64 `protobuf:"varint,1,opt,name=block_interval,json=blockInterval,proto3" json:"block_interval,omitempty"`
}

func (m *BlockIntervalTrigger) Reset()         { *m = BlockIntervalTrigger{} }
func (m *BlockIntervalTrigger) String() string { return proto.CompactTextString(m) }
func (*BlockIntervalTrigger) ProtoMessage()    {}
func (*BlockIntervalTrigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70c979264e1abb3, []int{9}
}
func (m *BlockIntervalTrigger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockIntervalTrigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockIntervalTrigger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockIntervalTrigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockIntervalTrigger.Merge(m, src)
}
func (m *BlockIntervalTrigger) XXX_Size() int {
	return m.Size()
}
func (m *BlockIntervalTrigger) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockIntervalTrigger.DiscardUnknown(m)
}

var xxx_messageInfo_BlockIntervalTrigger proto.InternalMessageInfo

func (m *BlockIntervalTrigger) GetBlockInterval() uint64 {
	if m != nil {
		return m.BlockInterval
	}
	return 0
}

// ScheduleTrigger activates by a cron expression
type ScheduleTrigger struct {
	Cron string `protobuf:"bytes,1,opt,name=cron,proto3" json:"cron,omitempty"`
}

func (m *ScheduleTrigger) Reset()         { *m = ScheduleTrigger{} }
func (m *ScheduleTrigger) String() string { return proto.CompactTextString(m) }
func (*ScheduleTrigger) ProtoMessage()    {}
func (*ScheduleTrigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70c979264e1abb3, []int{10}
}
func (m *ScheduleTrigger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScheduleTrigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScheduleTrigger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScheduleTrigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleTrigger.Merge(m, src)
}
func (m *ScheduleTrigger) XXX_Size() int {
	return m.Size()
}
func (m *ScheduleTrigger) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleTrigger.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleTrigger proto.InternalMessageInfo

func (m *ScheduleTrigger) GetCron() string {
	if m != nil {
		return m.Cron
	}
	return ""
}

// GasLimitTrigger activates when the chain's gas limit ≤ threshold
type GasLimitTrigger struct {
	ChainId              string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	MaxFeePerGas         string `protobuf:"bytes,2,opt,name=max_fee_per_gas,json=maxFeePerGas,proto3" json:"max_fee_per_gas,omitempty"`
	MaxPriorityFeePerGas string `protobuf:"bytes,3,opt,name=max_priority_fee_per_gas,json=maxPriorityFeePerGas,proto3" json:"max_priority_fee_per_gas,omitempty"`
}

func (m *GasLimitTrigger) Reset()         { *m = GasLimitTrigger{} }
func (m *GasLimitTrigger) String() string { return proto.CompactTextString(m) }
func (*GasLimitTrigger) ProtoMessage()    {}
func (*GasLimitTrigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70c979264e1abb3, []int{11}
}
func (m *GasLimitTrigger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GasLimitTrigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GasLimitTrigger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GasLimitTrigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GasLimitTrigger.Merge(m, src)
}
func (m *GasLimitTrigger) XXX_Size() int {
	return m.Size()
}
func (m *GasLimitTrigger) XXX_DiscardUnknown() {
	xxx_messageInfo_GasLimitTrigger.DiscardUnknown(m)
}

var xxx_messageInfo_GasLimitTrigger proto.InternalMessageInfo

func (m *GasLimitTrigger) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *GasLimitTrigger) GetMaxFeePerGas() string {
	if m != nil {
		return m.MaxFeePerGas
	}
	return ""
}

func (m *GasLimitTrigger) GetMaxPriorityFeePerGas() string {
	if m != nil {
		return m.MaxPriorityFeePerGas
	}
	return ""
}

// On chain action
type OnChainAction struct {
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	ChainId         string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TxCallData      []byte `protobuf:"bytes,3,opt,name=tx_call_data,json=txCallData,proto3" json:"tx_call_data,omitempty"`
}

func (m *OnChainAction) Reset()         { *m = OnChainAction{} }
func (m *OnChainAction) String() string { return proto.CompactTextString(m) }
func (*OnChainAction) ProtoMessage()    {}
func (*OnChainAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70c979264e1abb3, []int{12}
}
func (m *OnChainAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OnChainAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OnChainAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OnChainAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnChainAction.Merge(m, src)
}
func (m *OnChainAction) XXX_Size() int {
	return m.Size()
}
func (m *OnChainAction) XXX_DiscardUnknown() {
	xxx_messageInfo_OnChainAction.DiscardUnknown(m)
}

var xxx_messageInfo_OnChainAction proto.InternalMessageInfo

func (m *OnChainAction) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *OnChainAction) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *OnChainAction) GetTxCallData() []byte {
	if m != nil {
		return m.TxCallData
	}
	return nil
}

func init() {
	proto.RegisterEnum("kepler.workflow.AutomationStatus", AutomationStatus_name, AutomationStatus_value)
	proto.RegisterType((*Automation)(nil), "kepler.workflow.Automation")
	proto.RegisterType((*Trigger)(nil), "kepler.workflow.Trigger")
	proto.RegisterType((*Action)(nil), "kepler.workflow.Action")
	proto.RegisterType((*MethodABI)(nil), "kepler.workflow.MethodABI")
	proto.RegisterType((*Input)(nil), "kepler.workflow.Input")
	proto.RegisterType((*Output)(nil), "kepler.workflow.Output")
	proto.RegisterType((*OnChainCallTrigger)(nil), "kepler.workflow.OnChainCallTrigger")
	proto.RegisterType((*TimeTrigger)(nil), "kepler.workflow.TimeTrigger")
	proto.RegisterType((*CountTrigger)(nil), "kepler.workflow.CountTrigger")
	proto.RegisterType((*BlockIntervalTrigger)(nil), "kepler.workflow.BlockIntervalTrigger")
	proto.RegisterType((*ScheduleTrigger)(nil), "kepler.workflow.ScheduleTrigger")
	proto.RegisterType((*GasLimitTrigger)(nil), "kepler.workflow.GasLimitTrigger")
	proto.RegisterType((*OnChainAction)(nil), "kepler.workflow.OnChainAction")
}

func init() { proto.RegisterFile("kepler/workflow/automation.proto", fileDescriptor_e70c979264e1abb3) }

var fileDescriptor_e70c979264e1abb3 = []byte{
	// 1172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x17, 0x15, 0x2d, 0x5b, 0x3f, 0x57, 0xb6, 0xa5, 0x4c, 0xfc, 0x25, 0x8c, 0xbe, 0x44, 0x50, 0x98,
	0x1a, 0x55, 0x03, 0x54, 0x6a, 0xd4, 0x22, 0x40, 0x16, 0x41, 0x41, 0xfd, 0x38, 0x52, 0x10, 0x5b,
	0x02, 0x25, 0x17, 0x45, 0x81, 0x96, 0x18, 0x91, 0x23, 0x79, 0x62, 0x92, 0x23, 0x90, 0xa3, 0x46,
	0xee, 0x2b, 0x74, 0xd3, 0x47, 0x29, 0xda, 0xbe, 0x40, 0x76, 0x5d, 0x06, 0x5d, 0x75, 0x59, 0x24,
	0x8b, 0xae, 0xbb, 0xed, 0xaa, 0x98, 0x21, 0x29, 0x5b, 0xa2, 0x53, 0x74, 0x61, 0x6b, 0x78, 0xef,
	0x39, 0x67, 0x7e, 0xee, 0x9c, 0x4b, 0x42, 0xf5, 0x9c, 0xcc, 0x1d, 0xe2, 0x37, 0x5e, 0x31, 0xff,
	0x7c, 0xea, 0xb0, 0x57, 0x0d, 0xbc, 0xe0, 0xcc, 0xc5, 0x9c, 0x32, 0xaf, 0x3e, 0xf7, 0x19, 0x67,
	0xa8, 0x18, 0x22, 0xea, 0x31, 0xa2, 0x7c, 0xc7, 0x62, 0x81, 0xcb, 0x02, 0x53, 0xa6, 0x1b, 0xe1,
	0x43, 0x88, 0x2d, 0xdf, 0xc0, 0x2e, 0xf5, 0x58, 0x43, 0xfe, 0x8f, 0x42, 0x07, 0xd1, 0x04, 0x2f,
	0xd9, 0x44, 0xfc, 0x85, 0x51, 0xed, 0xe7, 0x34, 0x80, 0xbe, 0x9a, 0x09, 0xed, 0xc3, 0x16, 0xb5,
	0x55, 0xa5, 0xaa, 0xd4, 0xb6, 0x8d, 0x2d, 0x6a, 0xa3, 0xcf, 0x20, 0xc7, 0x7d, 0x3a, 0x9b, 0x11,
	0x3f, 0x50, 0xb7, 0xaa, 0xe9, 0x5a, 0xa1, 0xa9, 0xd6, 0x37, 0x96, 0x51, 0x1f, 0x87, 0x00, 0x63,
	0x85, 0x44, 0x8f, 0x20, 0x8b, 0x2d, 0xa1, 0x17, 0xa8, 0x69, 0x49, 0xba, 0x9d, 0x20, 0xe9, 0x32,
	0x6f, 0xc4, 0x38, 0xf4, 0x7f, 0xc8, 0x93, 0xe5, 0x9c, 0xfa, 0xc4, 0xc4, 0x5c, 0xdd, 0xae, 0x2a,
	0xb5, 0xb4, 0x91, 0x0b, 0x03, 0x3a, 0x47, 0x4f, 0x20, 0x13, 0x70, 0xcc, 0x17, 0x81, 0xba, 0x53,
	0x55, 0x6a, 0xfb, 0xcd, 0xfb, 0x49, 0xb9, 0xd5, 0x16, 0x46, 0x12, 0x68, 0x44, 0x04, 0xf4, 0x21,
	0x14, 0xc9, 0x92, 0x58, 0x0b, 0x91, 0x32, 0x2d, 0xb6, 0xf0, 0xb8, 0x9a, 0x91, 0xea, 0xfb, 0xab,
	0x70, 0x5b, 0x44, 0xd1, 0x63, 0xb8, 0x3d, 0xc5, 0xd4, 0x21, 0xb6, 0x79, 0x89, 0x0f, 0xb8, 0x4f,
	0xf0, 0xb9, 0x9a, 0x95, 0x84, 0xff, 0x85, 0xe9, 0x6e, 0x9c, 0x1d, 0xc9, 0x24, 0xfa, 0x1c, 0x6e,
	0x3a, 0x38, 0xe0, 0x66, 0xb0, 0xb0, 0x2c, 0x12, 0x04, 0xd3, 0x85, 0x63, 0xbe, 0x64, 0x13, 0x35,
	0x57, 0x55, 0x6a, 0x85, 0x66, 0x31, 0x5e, 0xa8, 0x38, 0xf0, 0xe7, 0x6c, 0x62, 0xdc, 0x10, 0xd8,
	0xd1, 0x0a, 0xfa, 0x9c, 0x4d, 0x50, 0x13, 0xb2, 0x96, 0x4f, 0x30, 0x67, 0xbe, 0x9a, 0xaf, 0x2a,
	0xb5, 0x7c, 0x4b, 0xfd, 0xed, 0x97, 0x8f, 0x0f, 0xa2, 0x6a, 0xea, 0xb6, 0xed, 0x93, 0x20, 0x18,
	0x71, 0x9f, 0x7a, 0x33, 0x23, 0x06, 0x6a, 0x7f, 0xa7, 0x21, 0x1b, 0x1d, 0x3b, 0xfa, 0x1a, 0xf6,
	0xc4, 0xd6, 0xce, 0x30, 0xf5, 0x4c, 0x0b, 0x3b, 0x8e, 0xac, 0x5e, 0xa1, 0xf9, 0x20, 0x71, 0x46,
	0x03, 0xaf, 0x2d, 0x40, 0x6d, 0xec, 0x38, 0x11, 0xb7, 0x85, 0x7e, 0xfa, 0xf3, 0xc7, 0x87, 0xeb,
	0xf4, 0x5e, 0xca, 0x28, 0xb0, 0x4b, 0x24, 0x7a, 0x0a, 0xdb, 0x9c, 0xba, 0x44, 0xdd, 0x92, 0xaa,
	0x77, 0x93, 0xd5, 0xa7, 0x2e, 0x89, 0xe5, 0xf2, 0x42, 0x4e, 0xc2, 0x7b, 0x29, 0x43, 0xfe, 0xa2,
	0x01, 0xe4, 0x67, 0x58, 0x5c, 0x51, 0x6a, 0x11, 0x35, 0x2d, 0x35, 0xaa, 0x09, 0x8d, 0x67, 0x38,
	0x78, 0x41, 0x5d, 0xca, 0x63, 0x9d, 0x7d, 0xa1, 0x73, 0xc9, 0xeb, 0xa5, 0x8c, 0xdc, 0x0c, 0x07,
	0x43, 0x31, 0x46, 0x3a, 0xec, 0x84, 0x65, 0xdc, 0x96, 0x62, 0xf7, 0x12, 0x62, 0xb2, 0x9c, 0xb1,
	0x12, 0x08, 0xa5, 0x90, 0xd0, 0x4b, 0x19, 0xe1, 0x00, 0x59, 0xb0, 0x3f, 0x71, 0x98, 0x75, 0x6e,
	0x52, 0x8f, 0x13, 0xff, 0x5b, 0xec, 0xc8, 0x6b, 0x55, 0x68, 0x1e, 0x26, 0xb4, 0x5a, 0x02, 0xd6,
	0x8f, 0x50, 0xb1, 0xe6, 0x4d, 0xa1, 0xb9, 0xa1, 0xd0, 0x4b, 0x19, 0x7b, 0x93, 0xab, 0x60, 0x74,
	0x0c, 0xb9, 0xc0, 0x3a, 0x23, 0xf6, 0xc2, 0x21, 0xf2, 0xc6, 0x5d, 0xb7, 0xef, 0x51, 0x04, 0x88,
	0x95, 0xf7, 0x84, 0xf2, 0x8a, 0x26, 0xb6, 0x1d, 0x8f, 0x5b, 0x79, 0xc8, 0x46, 0xf6, 0xd2, 0xbe,
	0x81, 0x4c, 0xe8, 0x1e, 0xf4, 0x1c, 0x72, 0x71, 0xed, 0xa2, 0xaa, 0x57, 0xde, 0x57, 0xf5, 0x90,
	0x11, 0xcd, 0x10, 0x93, 0x7a, 0x29, 0x23, 0x1b, 0xd5, 0xba, 0x95, 0x83, 0x4c, 0xe8, 0x45, 0xed,
	0xb5, 0x02, 0xf9, 0x63, 0xc2, 0xcf, 0x98, 0xad, 0xb7, 0xfa, 0x08, 0xc1, 0xb6, 0x87, 0x5d, 0x22,
	0xf5, 0xf3, 0x86, 0x1c, 0xa3, 0x3a, 0x64, 0xa8, 0x37, 0x5f, 0xf0, 0xb8, 0x27, 0xdc, 0x4a, 0xcc,
	0xda, 0x17, 0x69, 0x23, 0x42, 0x89, 0x7e, 0xc0, 0x16, 0x5c, 0x12, 0xde, 0xd7, 0x0f, 0x06, 0x32,
	0x6f, 0xc4, 0x38, 0x31, 0x2d, 0xbf, 0x98, 0x13, 0x59, 0xe5, 0xbc, 0x21, 0xc7, 0xe8, 0x23, 0x28,
	0x09, 0x57, 0x13, 0xd3, 0x5d, 0x70, 0x3c, 0xa1, 0x0e, 0xe5, 0x17, 0xb2, 0x72, 0x79, 0xa3, 0x28,
	0xe3, 0xc7, 0xab, 0xb0, 0xd6, 0x80, 0x1d, 0xb9, 0x84, 0x6b, 0x97, 0x1f, 0x6b, 0x6f, 0x5d, 0x6a,
	0x6b, 0x9f, 0x40, 0x26, 0x5c, 0xc2, 0x7f, 0x66, 0xbc, 0x56, 0x00, 0x25, 0x2d, 0x85, 0xca, 0x90,
	0xb3, 0x98, 0xc7, 0x7d, 0x6c, 0xf1, 0x48, 0x62, 0xf5, 0x8c, 0xee, 0x40, 0x2e, 0x34, 0x1a, 0xb5,
	0x23, 0xa9, 0xac, 0x7c, 0xee, 0xdb, 0xe8, 0x09, 0x80, 0x2b, 0xcf, 0xdc, 0xc4, 0x13, 0x1a, 0x19,
	0xa5, 0x9c, 0x38, 0xa5, 0x55, 0x59, 0x8c, 0x7c, 0x88, 0xd6, 0x27, 0x14, 0x1d, 0xc2, 0x3e, 0xf3,
	0x9c, 0x0b, 0x73, 0x4a, 0x3d, 0xec, 0xd0, 0xef, 0x88, 0x2d, 0x0f, 0x2d, 0x67, 0xec, 0x89, 0xe8,
	0x51, 0x1c, 0x14, 0x7b, 0xc0, 0xfe, 0x4c, 0xb4, 0xd0, 0xb4, 0xd8, 0x83, 0x18, 0x6b, 0x4d, 0x28,
	0x5c, 0xf1, 0x2f, 0x7a, 0x00, 0x7b, 0x61, 0xf3, 0x23, 0x26, 0x9e, 0x72, 0xe2, 0xcb, 0x0d, 0xa4,
	0x8d, 0xdd, 0x28, 0xa8, 0x8b, 0x98, 0xf6, 0x08, 0x76, 0xaf, 0x5a, 0x0c, 0xdd, 0x87, 0x5d, 0x9f,
	0xcc, 0x09, 0xe6, 0x51, 0x7b, 0x0d, 0x5f, 0x1e, 0x85, 0x30, 0x26, 0x91, 0xda, 0x53, 0x38, 0xb8,
	0xce, 0x49, 0x62, 0xe5, 0x1b, 0x46, 0x0c, 0xc9, 0xeb, 0x56, 0xd2, 0x0e, 0xa1, 0xb8, 0xe1, 0x14,
	0xb1, 0x19, 0xcb, 0x67, 0x5e, 0x5c, 0x24, 0x31, 0xd6, 0xbe, 0x57, 0xa0, 0xb8, 0xd1, 0x49, 0xd6,
	0x4e, 0x5c, 0x59, 0x3f, 0xf1, 0x43, 0x28, 0xba, 0x78, 0x69, 0x4e, 0x09, 0x31, 0xe7, 0xc4, 0x37,
	0x67, 0x38, 0x88, 0x6a, 0xb2, 0xeb, 0xe2, 0xe5, 0x11, 0x21, 0x43, 0xe2, 0x3f, 0xc3, 0x01, 0x7a,
	0x0c, 0xaa, 0x80, 0xcd, 0x7d, 0xca, 0x7c, 0xca, 0x2f, 0xd6, 0xf0, 0x69, 0x89, 0x3f, 0x70, 0xf1,
	0x72, 0x18, 0xa5, 0x57, 0x3c, 0xed, 0x15, 0xec, 0xad, 0x59, 0x4f, 0xdc, 0xde, 0xf8, 0x22, 0x98,
	0x38, 0x6c, 0xeb, 0xd1, 0x92, 0x8a, 0x71, 0x3c, 0xea, 0xf6, 0xff, 0x76, 0x4f, 0xaa, 0xb0, 0xcb,
	0x97, 0xb2, 0x51, 0x9b, 0x36, 0xe6, 0x58, 0x2e, 0x61, 0xd7, 0x00, 0xbe, 0x14, 0x77, 0xb0, 0x83,
	0x39, 0x7e, 0xf8, 0x97, 0x02, 0xa5, 0xcd, 0xd7, 0x21, 0xaa, 0xc1, 0x07, 0xfa, 0xe9, 0x78, 0x70,
	0xac, 0x8f, 0xfb, 0x83, 0x13, 0x73, 0x34, 0xd6, 0xc7, 0xa7, 0xa3, 0xf8, 0xe7, 0xf4, 0x64, 0x34,
	0xec, 0xb6, 0xfb, 0x47, 0xfd, 0x6e, 0xa7, 0x94, 0x42, 0x77, 0x41, 0x4d, 0x22, 0xf5, 0xf6, 0xb8,
	0xff, 0x45, 0xb7, 0xa4, 0xa0, 0x7b, 0x70, 0x27, 0x99, 0xed, 0x7e, 0x39, 0xec, 0x1b, 0xdd, 0x4e,
	0x69, 0xeb, 0x7a, 0xf2, 0x50, 0x3f, 0x1d, 0x75, 0x3b, 0xa5, 0xf4, 0xf5, 0xd9, 0x23, 0xbd, 0xff,
	0xa2, 0xdb, 0x29, 0x6d, 0xa3, 0x32, 0xdc, 0x4a, 0x66, 0x3b, 0x83, 0x93, 0x6e, 0x69, 0x07, 0x55,
	0xa0, 0x9c, 0xcc, 0xb5, 0xf5, 0x93, 0x76, 0x57, 0x70, 0x33, 0xad, 0xfe, 0xaf, 0x6f, 0x2b, 0xca,
	0x9b, 0xb7, 0x15, 0xe5, 0x8f, 0xb7, 0x15, 0xe5, 0x87, 0x77, 0x95, 0xd4, 0x9b, 0x77, 0x95, 0xd4,
	0xef, 0xef, 0x2a, 0xa9, 0xaf, 0x1a, 0x33, 0xca, 0xcf, 0x16, 0x93, 0xba, 0xc5, 0xdc, 0x86, 0x4d,
	0x39, 0x67, 0x1e, 0xe1, 0xc2, 0x4e, 0x8d, 0xe8, 0x6b, 0x68, 0x79, 0xf9, 0xc1, 0x25, 0x5c, 0x1d,
	0x4c, 0x32, 0xf2, 0xbb, 0xe8, 0xd3, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x00, 0xf2, 0xc1, 0x04,
	0x90, 0x09, 0x00, 0x00,
}

func (m *Automation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Automation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Automation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintAutomation(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x4a
	}
	if m.LastSuccessfulJob != nil {
		{
			size, err := m.LastSuccessfulJob.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAutomation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.FailedExecutionStreak != 0 {
		i = encodeVarintAutomation(dAtA, i, uint64(m.FailedExecutionStreak))
		i--
		dAtA[i] = 0x38
	}
	if m.ExecutionCount != 0 {
		i = encodeVarintAutomation(dAtA, i, uint64(m.ExecutionCount))
		i--
		dAtA[i] = 0x30
	}
	if m.Status != 0 {
		i = encodeVarintAutomation(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.ExpireAt != 0 {
		i = encodeVarintAutomation(dAtA, i, uint64(m.ExpireAt))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Actions) > 0 {
		for iNdEx := len(m.Actions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Actions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAutomation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Triggers) > 0 {
		for iNdEx := len(m.Triggers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Triggers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAutomation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != 0 {
		i = encodeVarintAutomation(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Trigger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Trigger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Trigger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Trigger != nil {
		{
			size := m.Trigger.Size()
			i -= size
			if _, err := m.Trigger.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Trigger_OnChainCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Trigger_OnChainCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OnChainCall != nil {
		{
			size, err := m.OnChainCall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAutomation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Trigger_Time) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Trigger_Time) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Time != nil {
		{
			size, err := m.Time.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAutomation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Trigger_GasPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Trigger_GasPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GasPrice != nil {
		{
			size, err := m.GasPrice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAutomation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Trigger_Count) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Trigger_Count) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Count != nil {
		{
			size, err := m.Count.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAutomation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Trigger_BlockInterval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Trigger_BlockInterval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockInterval != nil {
		{
			size, err := m.BlockInterval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAutomation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Trigger_Schedule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Trigger_Schedule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Schedule != nil {
		{
			size, err := m.Schedule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAutomation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Action) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Action) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Action) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Action != nil {
		{
			size := m.Action.Size()
			i -= size
			if _, err := m.Action.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Action_OnChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Action_OnChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OnChain != nil {
		{
			size, err := m.OnChain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAutomation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *MethodABI) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MethodABI) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MethodABI) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StateMutability) > 0 {
		i -= len(m.StateMutability)
		copy(dAtA[i:], m.StateMutability)
		i = encodeVarintAutomation(dAtA, i, uint64(len(m.StateMutability)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAutomation(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Outputs) > 0 {
		for iNdEx := len(m.Outputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Outputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAutomation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Inputs) > 0 {
		for iNdEx := len(m.Inputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAutomation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAutomation(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAutomation(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAutomation(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAutomation(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAutomation(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OnChainCallTrigger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnChainCallTrigger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OnChainCallTrigger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintAutomation(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.OnlyFinalized {
		i--
		if m.OnlyFinalized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.MethodAbi != nil {
		{
			size, err := m.MethodAbi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAutomation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintAutomation(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintAutomation(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimeTrigger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeTrigger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeTrigger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecuteAfter != 0 {
		i = encodeVarintAutomation(dAtA, i, uint64(m.ExecuteAfter))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CountTrigger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountTrigger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountTrigger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RepeatCount != 0 {
		i = encodeVarintAutomation(dAtA, i, uint64(m.RepeatCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockIntervalTrigger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockIntervalTrigger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockIntervalTrigger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockInterval != 0 {
		i = encodeVarintAutomation(dAtA, i, uint64(m.BlockInterval))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ScheduleTrigger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduleTrigger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScheduleTrigger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cron) > 0 {
		i -= len(m.Cron)
		copy(dAtA[i:], m.Cron)
		i = encodeVarintAutomation(dAtA, i, uint64(len(m.Cron)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GasLimitTrigger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GasLimitTrigger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GasLimitTrigger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaxPriorityFeePerGas) > 0 {
		i -= len(m.MaxPriorityFeePerGas)
		copy(dAtA[i:], m.MaxPriorityFeePerGas)
		i = encodeVarintAutomation(dAtA, i, uint64(len(m.MaxPriorityFeePerGas)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MaxFeePerGas) > 0 {
		i -= len(m.MaxFeePerGas)
		copy(dAtA[i:], m.MaxFeePerGas)
		i = encodeVarintAutomation(dAtA, i, uint64(len(m.MaxFeePerGas)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintAutomation(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OnChainAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnChainAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OnChainAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxCallData) > 0 {
		i -= len(m.TxCallData)
		copy(dAtA[i:], m.TxCallData)
		i = encodeVarintAutomation(dAtA, i, uint64(len(m.TxCallData)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintAutomation(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintAutomation(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAutomation(dAtA []byte, offset int, v uint64) int {
	offset -= sovAutomation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Automation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAutomation(uint64(m.Id))
	}
	if len(m.Triggers) > 0 {
		for _, e := range m.Triggers {
			l = e.Size()
			n += 1 + l + sovAutomation(uint64(l))
		}
	}
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovAutomation(uint64(l))
		}
	}
	if m.ExpireAt != 0 {
		n += 1 + sovAutomation(uint64(m.ExpireAt))
	}
	if m.Status != 0 {
		n += 1 + sovAutomation(uint64(m.Status))
	}
	if m.ExecutionCount != 0 {
		n += 1 + sovAutomation(uint64(m.ExecutionCount))
	}
	if m.FailedExecutionStreak != 0 {
		n += 1 + sovAutomation(uint64(m.FailedExecutionStreak))
	}
	if m.LastSuccessfulJob != nil {
		l = m.LastSuccessfulJob.Size()
		n += 1 + l + sovAutomation(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovAutomation(uint64(l))
	}
	return n
}

func (m *Trigger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Trigger != nil {
		n += m.Trigger.Size()
	}
	return n
}

func (m *Trigger_OnChainCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OnChainCall != nil {
		l = m.OnChainCall.Size()
		n += 1 + l + sovAutomation(uint64(l))
	}
	return n
}
func (m *Trigger_Time) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != nil {
		l = m.Time.Size()
		n += 1 + l + sovAutomation(uint64(l))
	}
	return n
}
func (m *Trigger_GasPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasPrice != nil {
		l = m.GasPrice.Size()
		n += 1 + l + sovAutomation(uint64(l))
	}
	return n
}
func (m *Trigger_Count) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != nil {
		l = m.Count.Size()
		n += 1 + l + sovAutomation(uint64(l))
	}
	return n
}
func (m *Trigger_BlockInterval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockInterval != nil {
		l = m.BlockInterval.Size()
		n += 1 + l + sovAutomation(uint64(l))
	}
	return n
}
func (m *Trigger_Schedule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Schedule != nil {
		l = m.Schedule.Size()
		n += 1 + l + sovAutomation(uint64(l))
	}
	return n
}
func (m *Action) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != nil {
		n += m.Action.Size()
	}
	return n
}

func (m *Action_OnChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OnChain != nil {
		l = m.OnChain.Size()
		n += 1 + l + sovAutomation(uint64(l))
	}
	return n
}
func (m *MethodABI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAutomation(uint64(l))
	}
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovAutomation(uint64(l))
		}
	}
	if len(m.Outputs) > 0 {
		for _, e := range m.Outputs {
			l = e.Size()
			n += 1 + l + sovAutomation(uint64(l))
		}
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAutomation(uint64(l))
	}
	l = len(m.StateMutability)
	if l > 0 {
		n += 1 + l + sovAutomation(uint64(l))
	}
	return n
}

func (m *Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAutomation(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAutomation(uint64(l))
	}
	return n
}

func (m *Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAutomation(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAutomation(uint64(l))
	}
	return n
}

func (m *OnChainCallTrigger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovAutomation(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovAutomation(uint64(l))
	}
	if m.MethodAbi != nil {
		l = m.MethodAbi.Size()
		n += 1 + l + sovAutomation(uint64(l))
	}
	if m.OnlyFinalized {
		n += 2
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovAutomation(uint64(l))
		}
	}
	return n
}

func (m *TimeTrigger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecuteAfter != 0 {
		n += 1 + sovAutomation(uint64(m.ExecuteAfter))
	}
	return n
}

func (m *CountTrigger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RepeatCount != 0 {
		n += 1 + sovAutomation(uint64(m.RepeatCount))
	}
	return n
}

func (m *BlockIntervalTrigger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockInterval != 0 {
		n += 1 + sovAutomation(uint64(m.BlockInterval))
	}
	return n
}

func (m *ScheduleTrigger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cron)
	if l > 0 {
		n += 1 + l + sovAutomation(uint64(l))
	}
	return n
}

func (m *GasLimitTrigger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovAutomation(uint64(l))
	}
	l = len(m.MaxFeePerGas)
	if l > 0 {
		n += 1 + l + sovAutomation(uint64(l))
	}
	l = len(m.MaxPriorityFeePerGas)
	if l > 0 {
		n += 1 + l + sovAutomation(uint64(l))
	}
	return n
}

func (m *OnChainAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovAutomation(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovAutomation(uint64(l))
	}
	l = len(m.TxCallData)
	if l > 0 {
		n += 1 + l + sovAutomation(uint64(l))
	}
	return n
}

func sovAutomation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAutomation(x uint64) (n int) {
	return sovAutomation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Automation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Automation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Automation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Triggers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Triggers = append(m.Triggers, &Trigger{})
			if err := m.Triggers[len(m.Triggers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, &Action{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireAt", wireType)
			}
			m.ExpireAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= AutomationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionCount", wireType)
			}
			m.ExecutionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedExecutionStreak", wireType)
			}
			m.FailedExecutionStreak = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FailedExecutionStreak |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSuccessfulJob", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastSuccessfulJob == nil {
				m.LastSuccessfulJob = &types.Job{}
			}
			if err := m.LastSuccessfulJob.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutomation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Trigger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnChainCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OnChainCallTrigger{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Trigger = &Trigger_OnChainCall{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TimeTrigger{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Trigger = &Trigger_Time{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GasLimitTrigger{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Trigger = &Trigger_GasPrice{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CountTrigger{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Trigger = &Trigger_Count{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BlockIntervalTrigger{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Trigger = &Trigger_BlockInterval{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ScheduleTrigger{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Trigger = &Trigger_Schedule{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutomation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Action) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Action: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Action: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnChain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OnChainAction{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &Action_OnChain{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutomation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MethodABI) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MethodABI: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MethodABI: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, &Input{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outputs = append(m.Outputs, &Output{})
			if err := m.Outputs[len(m.Outputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMutability", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMutability = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutomation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutomation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutomation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnChainCallTrigger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnChainCallTrigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnChainCallTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MethodAbi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MethodAbi == nil {
				m.MethodAbi = &MethodABI{}
			}
			if err := m.MethodAbi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyFinalized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnlyFinalized = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutomation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeTrigger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeTrigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecuteAfter", wireType)
			}
			m.ExecuteAfter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecuteAfter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAutomation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountTrigger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountTrigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatCount", wireType)
			}
			m.RepeatCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepeatCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAutomation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockIntervalTrigger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockIntervalTrigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockIntervalTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockInterval", wireType)
			}
			m.BlockInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAutomation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduleTrigger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduleTrigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduleTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cron", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cron = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutomation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GasLimitTrigger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GasLimitTrigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GasLimitTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeePerGas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxFeePerGas = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPriorityFeePerGas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxPriorityFeePerGas = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutomation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnChainAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnChainAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnChainAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxCallData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAutomation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxCallData = append(m.TxCallData[:0], dAtA[iNdEx:postIndex]...)
			if m.TxCallData == nil {
				m.TxCallData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutomation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAutomation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAutomation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAutomation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAutomation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAutomation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAutomation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAutomation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAutomation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAutomation = fmt.Errorf("proto: unexpected end of group")
)
