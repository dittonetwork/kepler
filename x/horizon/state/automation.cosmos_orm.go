// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package state

import (
	context "context"
	ormlist "cosmossdk.io/orm/model/ormlist"
	ormtable "cosmossdk.io/orm/model/ormtable"
	ormerrors "cosmossdk.io/orm/types/ormerrors"
)

type AutomationTable interface {
	Insert(ctx context.Context, automation *Automation) error
	InsertReturningId(ctx context.Context, automation *Automation) (uint64, error)
	LastInsertedSequence(ctx context.Context) (uint64, error)
	Update(ctx context.Context, automation *Automation) error
	Save(ctx context.Context, automation *Automation) error
	Delete(ctx context.Context, automation *Automation) error
	Has(ctx context.Context, id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, id uint64) (*Automation, error)
	List(ctx context.Context, prefixKey AutomationIndexKey, opts ...ormlist.Option) (AutomationIterator, error)
	ListRange(ctx context.Context, from, to AutomationIndexKey, opts ...ormlist.Option) (AutomationIterator, error)
	DeleteBy(ctx context.Context, prefixKey AutomationIndexKey) error
	DeleteRange(ctx context.Context, from, to AutomationIndexKey) error

	doNotImplement()
}

type AutomationIterator struct {
	ormtable.Iterator
}

func (i AutomationIterator) Value() (*Automation, error) {
	var automation Automation
	err := i.UnmarshalMessage(&automation)
	return &automation, err
}

type AutomationIndexKey interface {
	id() uint32
	values() []interface{}
	automationIndexKey()
}

// primary key starting index..
type AutomationPrimaryKey = AutomationIdIndexKey

type AutomationIdIndexKey struct {
	vs []interface{}
}

func (x AutomationIdIndexKey) id() uint32            { return 0 }
func (x AutomationIdIndexKey) values() []interface{} { return x.vs }
func (x AutomationIdIndexKey) automationIndexKey()   {}

func (this AutomationIdIndexKey) WithId(id uint64) AutomationIdIndexKey {
	this.vs = []interface{}{id}
	return this
}

type AutomationSignerIndexKey struct {
	vs []interface{}
}

func (x AutomationSignerIndexKey) id() uint32            { return 1 }
func (x AutomationSignerIndexKey) values() []interface{} { return x.vs }
func (x AutomationSignerIndexKey) automationIndexKey()   {}

func (this AutomationSignerIndexKey) WithSigner(signer string) AutomationSignerIndexKey {
	this.vs = []interface{}{signer}
	return this
}

type AutomationDeletedIndexKey struct {
	vs []interface{}
}

func (x AutomationDeletedIndexKey) id() uint32            { return 2 }
func (x AutomationDeletedIndexKey) values() []interface{} { return x.vs }
func (x AutomationDeletedIndexKey) automationIndexKey()   {}

func (this AutomationDeletedIndexKey) WithDeleted(deleted bool) AutomationDeletedIndexKey {
	this.vs = []interface{}{deleted}
	return this
}

type AutomationTargetChainIdIndexKey struct {
	vs []interface{}
}

func (x AutomationTargetChainIdIndexKey) id() uint32            { return 3 }
func (x AutomationTargetChainIdIndexKey) values() []interface{} { return x.vs }
func (x AutomationTargetChainIdIndexKey) automationIndexKey()   {}

func (this AutomationTargetChainIdIndexKey) WithTargetChainId(target_chain_id string) AutomationTargetChainIdIndexKey {
	this.vs = []interface{}{target_chain_id}
	return this
}

type automationTable struct {
	table ormtable.AutoIncrementTable
}

func (this automationTable) Insert(ctx context.Context, automation *Automation) error {
	return this.table.Insert(ctx, automation)
}

func (this automationTable) Update(ctx context.Context, automation *Automation) error {
	return this.table.Update(ctx, automation)
}

func (this automationTable) Save(ctx context.Context, automation *Automation) error {
	return this.table.Save(ctx, automation)
}

func (this automationTable) Delete(ctx context.Context, automation *Automation) error {
	return this.table.Delete(ctx, automation)
}

func (this automationTable) InsertReturningId(ctx context.Context, automation *Automation) (uint64, error) {
	return this.table.InsertReturningPKey(ctx, automation)
}

func (this automationTable) LastInsertedSequence(ctx context.Context) (uint64, error) {
	return this.table.LastInsertedSequence(ctx)
}

func (this automationTable) Has(ctx context.Context, id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, id)
}

func (this automationTable) Get(ctx context.Context, id uint64) (*Automation, error) {
	var automation Automation
	found, err := this.table.PrimaryKey().Get(ctx, &automation, id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &automation, nil
}

func (this automationTable) List(ctx context.Context, prefixKey AutomationIndexKey, opts ...ormlist.Option) (AutomationIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return AutomationIterator{it}, err
}

func (this automationTable) ListRange(ctx context.Context, from, to AutomationIndexKey, opts ...ormlist.Option) (AutomationIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return AutomationIterator{it}, err
}

func (this automationTable) DeleteBy(ctx context.Context, prefixKey AutomationIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this automationTable) DeleteRange(ctx context.Context, from, to AutomationIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this automationTable) doNotImplement() {}

var _ AutomationTable = automationTable{}

func NewAutomationTable(db ormtable.Schema) (AutomationTable, error) {
	table := db.GetTable(&Automation{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Automation{}).ProtoReflect().Descriptor().FullName()))
	}
	return automationTable{table.(ormtable.AutoIncrementTable)}, nil
}

type AutomationStore interface {
	AutomationTable() AutomationTable

	doNotImplement()
}

type automationStore struct {
	automation AutomationTable
}

func (x automationStore) AutomationTable() AutomationTable {
	return x.automation
}

func (automationStore) doNotImplement() {}

var _ AutomationStore = automationStore{}

func NewAutomationStore(db ormtable.Schema) (AutomationStore, error) {
	automationTable, err := NewAutomationTable(db)
	if err != nil {
		return nil, err
	}

	return automationStore{
		automationTable,
	}, nil
}
