// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package workflow

import (
	_ "cosmossdk.io/api/amino"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	job "github.com/dittonetwork/kepler/api/kepler/job"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_Automation_2_list)(nil)

type _Automation_2_list struct {
	list *[]*Trigger
}

func (x *_Automation_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Automation_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Automation_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Trigger)
	(*x.list)[i] = concreteValue
}

func (x *_Automation_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Trigger)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Automation_2_list) AppendMutable() protoreflect.Value {
	v := new(Trigger)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Automation_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Automation_2_list) NewElement() protoreflect.Value {
	v := new(Trigger)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Automation_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Automation                         protoreflect.MessageDescriptor
	fd_Automation_id                      protoreflect.FieldDescriptor
	fd_Automation_triggers                protoreflect.FieldDescriptor
	fd_Automation_user_op                 protoreflect.FieldDescriptor
	fd_Automation_status                  protoreflect.FieldDescriptor
	fd_Automation_execution_count         protoreflect.FieldDescriptor
	fd_Automation_failed_execution_streak protoreflect.FieldDescriptor
	fd_Automation_last_successful_job     protoreflect.FieldDescriptor
	fd_Automation_creator                 protoreflect.FieldDescriptor
)

func init() {
	file_kepler_workflow_automation_proto_init()
	md_Automation = File_kepler_workflow_automation_proto.Messages().ByName("Automation")
	fd_Automation_id = md_Automation.Fields().ByName("id")
	fd_Automation_triggers = md_Automation.Fields().ByName("triggers")
	fd_Automation_user_op = md_Automation.Fields().ByName("user_op")
	fd_Automation_status = md_Automation.Fields().ByName("status")
	fd_Automation_execution_count = md_Automation.Fields().ByName("execution_count")
	fd_Automation_failed_execution_streak = md_Automation.Fields().ByName("failed_execution_streak")
	fd_Automation_last_successful_job = md_Automation.Fields().ByName("last_successful_job")
	fd_Automation_creator = md_Automation.Fields().ByName("creator")
}

var _ protoreflect.Message = (*fastReflection_Automation)(nil)

type fastReflection_Automation Automation

func (x *Automation) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Automation)(x)
}

func (x *Automation) slowProtoReflect() protoreflect.Message {
	mi := &file_kepler_workflow_automation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Automation_messageType fastReflection_Automation_messageType
var _ protoreflect.MessageType = fastReflection_Automation_messageType{}

type fastReflection_Automation_messageType struct{}

func (x fastReflection_Automation_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Automation)(nil)
}
func (x fastReflection_Automation_messageType) New() protoreflect.Message {
	return new(fastReflection_Automation)
}
func (x fastReflection_Automation_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Automation
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Automation) Descriptor() protoreflect.MessageDescriptor {
	return md_Automation
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Automation) Type() protoreflect.MessageType {
	return _fastReflection_Automation_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Automation) New() protoreflect.Message {
	return new(fastReflection_Automation)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Automation) Interface() protoreflect.ProtoMessage {
	return (*Automation)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Automation) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_Automation_id, value) {
			return
		}
	}
	if len(x.Triggers) != 0 {
		value := protoreflect.ValueOfList(&_Automation_2_list{list: &x.Triggers})
		if !f(fd_Automation_triggers, value) {
			return
		}
	}
	if x.UserOp != nil {
		value := protoreflect.ValueOfMessage(x.UserOp.ProtoReflect())
		if !f(fd_Automation_user_op, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_Automation_status, value) {
			return
		}
	}
	if x.ExecutionCount != int64(0) {
		value := protoreflect.ValueOfInt64(x.ExecutionCount)
		if !f(fd_Automation_execution_count, value) {
			return
		}
	}
	if x.FailedExecutionStreak != int64(0) {
		value := protoreflect.ValueOfInt64(x.FailedExecutionStreak)
		if !f(fd_Automation_failed_execution_streak, value) {
			return
		}
	}
	if x.LastSuccessfulJob != nil {
		value := protoreflect.ValueOfMessage(x.LastSuccessfulJob.ProtoReflect())
		if !f(fd_Automation_last_successful_job, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_Automation_creator, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Automation) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kepler.workflow.Automation.id":
		return x.Id != uint64(0)
	case "kepler.workflow.Automation.triggers":
		return len(x.Triggers) != 0
	case "kepler.workflow.Automation.user_op":
		return x.UserOp != nil
	case "kepler.workflow.Automation.status":
		return x.Status != 0
	case "kepler.workflow.Automation.execution_count":
		return x.ExecutionCount != int64(0)
	case "kepler.workflow.Automation.failed_execution_streak":
		return x.FailedExecutionStreak != int64(0)
	case "kepler.workflow.Automation.last_successful_job":
		return x.LastSuccessfulJob != nil
	case "kepler.workflow.Automation.creator":
		return x.Creator != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.Automation"))
		}
		panic(fmt.Errorf("message kepler.workflow.Automation does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Automation) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kepler.workflow.Automation.id":
		x.Id = uint64(0)
	case "kepler.workflow.Automation.triggers":
		x.Triggers = nil
	case "kepler.workflow.Automation.user_op":
		x.UserOp = nil
	case "kepler.workflow.Automation.status":
		x.Status = 0
	case "kepler.workflow.Automation.execution_count":
		x.ExecutionCount = int64(0)
	case "kepler.workflow.Automation.failed_execution_streak":
		x.FailedExecutionStreak = int64(0)
	case "kepler.workflow.Automation.last_successful_job":
		x.LastSuccessfulJob = nil
	case "kepler.workflow.Automation.creator":
		x.Creator = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.Automation"))
		}
		panic(fmt.Errorf("message kepler.workflow.Automation does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Automation) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kepler.workflow.Automation.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "kepler.workflow.Automation.triggers":
		if len(x.Triggers) == 0 {
			return protoreflect.ValueOfList(&_Automation_2_list{})
		}
		listValue := &_Automation_2_list{list: &x.Triggers}
		return protoreflect.ValueOfList(listValue)
	case "kepler.workflow.Automation.user_op":
		value := x.UserOp
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "kepler.workflow.Automation.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "kepler.workflow.Automation.execution_count":
		value := x.ExecutionCount
		return protoreflect.ValueOfInt64(value)
	case "kepler.workflow.Automation.failed_execution_streak":
		value := x.FailedExecutionStreak
		return protoreflect.ValueOfInt64(value)
	case "kepler.workflow.Automation.last_successful_job":
		value := x.LastSuccessfulJob
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "kepler.workflow.Automation.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.Automation"))
		}
		panic(fmt.Errorf("message kepler.workflow.Automation does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Automation) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kepler.workflow.Automation.id":
		x.Id = value.Uint()
	case "kepler.workflow.Automation.triggers":
		lv := value.List()
		clv := lv.(*_Automation_2_list)
		x.Triggers = *clv.list
	case "kepler.workflow.Automation.user_op":
		x.UserOp = value.Message().Interface().(*UserOp)
	case "kepler.workflow.Automation.status":
		x.Status = (AutomationStatus)(value.Enum())
	case "kepler.workflow.Automation.execution_count":
		x.ExecutionCount = value.Int()
	case "kepler.workflow.Automation.failed_execution_streak":
		x.FailedExecutionStreak = value.Int()
	case "kepler.workflow.Automation.last_successful_job":
		x.LastSuccessfulJob = value.Message().Interface().(*job.Job)
	case "kepler.workflow.Automation.creator":
		x.Creator = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.Automation"))
		}
		panic(fmt.Errorf("message kepler.workflow.Automation does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Automation) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kepler.workflow.Automation.triggers":
		if x.Triggers == nil {
			x.Triggers = []*Trigger{}
		}
		value := &_Automation_2_list{list: &x.Triggers}
		return protoreflect.ValueOfList(value)
	case "kepler.workflow.Automation.user_op":
		if x.UserOp == nil {
			x.UserOp = new(UserOp)
		}
		return protoreflect.ValueOfMessage(x.UserOp.ProtoReflect())
	case "kepler.workflow.Automation.last_successful_job":
		if x.LastSuccessfulJob == nil {
			x.LastSuccessfulJob = new(job.Job)
		}
		return protoreflect.ValueOfMessage(x.LastSuccessfulJob.ProtoReflect())
	case "kepler.workflow.Automation.id":
		panic(fmt.Errorf("field id of message kepler.workflow.Automation is not mutable"))
	case "kepler.workflow.Automation.status":
		panic(fmt.Errorf("field status of message kepler.workflow.Automation is not mutable"))
	case "kepler.workflow.Automation.execution_count":
		panic(fmt.Errorf("field execution_count of message kepler.workflow.Automation is not mutable"))
	case "kepler.workflow.Automation.failed_execution_streak":
		panic(fmt.Errorf("field failed_execution_streak of message kepler.workflow.Automation is not mutable"))
	case "kepler.workflow.Automation.creator":
		panic(fmt.Errorf("field creator of message kepler.workflow.Automation is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.Automation"))
		}
		panic(fmt.Errorf("message kepler.workflow.Automation does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Automation) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kepler.workflow.Automation.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kepler.workflow.Automation.triggers":
		list := []*Trigger{}
		return protoreflect.ValueOfList(&_Automation_2_list{list: &list})
	case "kepler.workflow.Automation.user_op":
		m := new(UserOp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "kepler.workflow.Automation.status":
		return protoreflect.ValueOfEnum(0)
	case "kepler.workflow.Automation.execution_count":
		return protoreflect.ValueOfInt64(int64(0))
	case "kepler.workflow.Automation.failed_execution_streak":
		return protoreflect.ValueOfInt64(int64(0))
	case "kepler.workflow.Automation.last_successful_job":
		m := new(job.Job)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "kepler.workflow.Automation.creator":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.Automation"))
		}
		panic(fmt.Errorf("message kepler.workflow.Automation does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Automation) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kepler.workflow.Automation", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Automation) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Automation) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Automation) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Automation) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Automation)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if len(x.Triggers) > 0 {
			for _, e := range x.Triggers {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.UserOp != nil {
			l = options.Size(x.UserOp)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if x.ExecutionCount != 0 {
			n += 1 + runtime.Sov(uint64(x.ExecutionCount))
		}
		if x.FailedExecutionStreak != 0 {
			n += 1 + runtime.Sov(uint64(x.FailedExecutionStreak))
		}
		if x.LastSuccessfulJob != nil {
			l = options.Size(x.LastSuccessfulJob)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Automation)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x42
		}
		if x.LastSuccessfulJob != nil {
			encoded, err := options.Marshal(x.LastSuccessfulJob)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		}
		if x.FailedExecutionStreak != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FailedExecutionStreak))
			i--
			dAtA[i] = 0x30
		}
		if x.ExecutionCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ExecutionCount))
			i--
			dAtA[i] = 0x28
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x20
		}
		if x.UserOp != nil {
			encoded, err := options.Marshal(x.UserOp)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Triggers) > 0 {
			for iNdEx := len(x.Triggers) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Triggers[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Automation)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Automation: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Automation: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Triggers", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Triggers = append(x.Triggers, &Trigger{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Triggers[len(x.Triggers)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UserOp", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.UserOp == nil {
					x.UserOp = &UserOp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.UserOp); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= AutomationStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExecutionCount", wireType)
				}
				x.ExecutionCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ExecutionCount |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FailedExecutionStreak", wireType)
				}
				x.FailedExecutionStreak = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FailedExecutionStreak |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastSuccessfulJob", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.LastSuccessfulJob == nil {
					x.LastSuccessfulJob = &job.Job{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.LastSuccessfulJob); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Trigger                protoreflect.MessageDescriptor
	fd_Trigger_on_chain_call  protoreflect.FieldDescriptor
	fd_Trigger_time           protoreflect.FieldDescriptor
	fd_Trigger_gas_limit      protoreflect.FieldDescriptor
	fd_Trigger_count          protoreflect.FieldDescriptor
	fd_Trigger_block_interval protoreflect.FieldDescriptor
	fd_Trigger_schedule       protoreflect.FieldDescriptor
	fd_Trigger_valid_until    protoreflect.FieldDescriptor
)

func init() {
	file_kepler_workflow_automation_proto_init()
	md_Trigger = File_kepler_workflow_automation_proto.Messages().ByName("Trigger")
	fd_Trigger_on_chain_call = md_Trigger.Fields().ByName("on_chain_call")
	fd_Trigger_time = md_Trigger.Fields().ByName("time")
	fd_Trigger_gas_limit = md_Trigger.Fields().ByName("gas_limit")
	fd_Trigger_count = md_Trigger.Fields().ByName("count")
	fd_Trigger_block_interval = md_Trigger.Fields().ByName("block_interval")
	fd_Trigger_schedule = md_Trigger.Fields().ByName("schedule")
	fd_Trigger_valid_until = md_Trigger.Fields().ByName("valid_until")
}

var _ protoreflect.Message = (*fastReflection_Trigger)(nil)

type fastReflection_Trigger Trigger

func (x *Trigger) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Trigger)(x)
}

func (x *Trigger) slowProtoReflect() protoreflect.Message {
	mi := &file_kepler_workflow_automation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Trigger_messageType fastReflection_Trigger_messageType
var _ protoreflect.MessageType = fastReflection_Trigger_messageType{}

type fastReflection_Trigger_messageType struct{}

func (x fastReflection_Trigger_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Trigger)(nil)
}
func (x fastReflection_Trigger_messageType) New() protoreflect.Message {
	return new(fastReflection_Trigger)
}
func (x fastReflection_Trigger_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Trigger
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Trigger) Descriptor() protoreflect.MessageDescriptor {
	return md_Trigger
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Trigger) Type() protoreflect.MessageType {
	return _fastReflection_Trigger_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Trigger) New() protoreflect.Message {
	return new(fastReflection_Trigger)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Trigger) Interface() protoreflect.ProtoMessage {
	return (*Trigger)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Trigger) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Trigger != nil {
		switch o := x.Trigger.(type) {
		case *Trigger_OnChainCall:
			v := o.OnChainCall
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Trigger_on_chain_call, value) {
				return
			}
		case *Trigger_Time:
			v := o.Time
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Trigger_time, value) {
				return
			}
		case *Trigger_GasLimit:
			v := o.GasLimit
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Trigger_gas_limit, value) {
				return
			}
		case *Trigger_Count:
			v := o.Count
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Trigger_count, value) {
				return
			}
		case *Trigger_BlockInterval:
			v := o.BlockInterval
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Trigger_block_interval, value) {
				return
			}
		case *Trigger_Schedule:
			v := o.Schedule
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Trigger_schedule, value) {
				return
			}
		case *Trigger_ValidUntil:
			v := o.ValidUntil
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Trigger_valid_until, value) {
				return
			}
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Trigger) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kepler.workflow.Trigger.on_chain_call":
		if x.Trigger == nil {
			return false
		} else if _, ok := x.Trigger.(*Trigger_OnChainCall); ok {
			return true
		} else {
			return false
		}
	case "kepler.workflow.Trigger.time":
		if x.Trigger == nil {
			return false
		} else if _, ok := x.Trigger.(*Trigger_Time); ok {
			return true
		} else {
			return false
		}
	case "kepler.workflow.Trigger.gas_limit":
		if x.Trigger == nil {
			return false
		} else if _, ok := x.Trigger.(*Trigger_GasLimit); ok {
			return true
		} else {
			return false
		}
	case "kepler.workflow.Trigger.count":
		if x.Trigger == nil {
			return false
		} else if _, ok := x.Trigger.(*Trigger_Count); ok {
			return true
		} else {
			return false
		}
	case "kepler.workflow.Trigger.block_interval":
		if x.Trigger == nil {
			return false
		} else if _, ok := x.Trigger.(*Trigger_BlockInterval); ok {
			return true
		} else {
			return false
		}
	case "kepler.workflow.Trigger.schedule":
		if x.Trigger == nil {
			return false
		} else if _, ok := x.Trigger.(*Trigger_Schedule); ok {
			return true
		} else {
			return false
		}
	case "kepler.workflow.Trigger.valid_until":
		if x.Trigger == nil {
			return false
		} else if _, ok := x.Trigger.(*Trigger_ValidUntil); ok {
			return true
		} else {
			return false
		}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.Trigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.Trigger does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Trigger) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kepler.workflow.Trigger.on_chain_call":
		x.Trigger = nil
	case "kepler.workflow.Trigger.time":
		x.Trigger = nil
	case "kepler.workflow.Trigger.gas_limit":
		x.Trigger = nil
	case "kepler.workflow.Trigger.count":
		x.Trigger = nil
	case "kepler.workflow.Trigger.block_interval":
		x.Trigger = nil
	case "kepler.workflow.Trigger.schedule":
		x.Trigger = nil
	case "kepler.workflow.Trigger.valid_until":
		x.Trigger = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.Trigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.Trigger does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Trigger) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kepler.workflow.Trigger.on_chain_call":
		if x.Trigger == nil {
			return protoreflect.ValueOfMessage((*OnChainCallTrigger)(nil).ProtoReflect())
		} else if v, ok := x.Trigger.(*Trigger_OnChainCall); ok {
			return protoreflect.ValueOfMessage(v.OnChainCall.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*OnChainCallTrigger)(nil).ProtoReflect())
		}
	case "kepler.workflow.Trigger.time":
		if x.Trigger == nil {
			return protoreflect.ValueOfMessage((*TimeTrigger)(nil).ProtoReflect())
		} else if v, ok := x.Trigger.(*Trigger_Time); ok {
			return protoreflect.ValueOfMessage(v.Time.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*TimeTrigger)(nil).ProtoReflect())
		}
	case "kepler.workflow.Trigger.gas_limit":
		if x.Trigger == nil {
			return protoreflect.ValueOfMessage((*GasLimitTrigger)(nil).ProtoReflect())
		} else if v, ok := x.Trigger.(*Trigger_GasLimit); ok {
			return protoreflect.ValueOfMessage(v.GasLimit.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*GasLimitTrigger)(nil).ProtoReflect())
		}
	case "kepler.workflow.Trigger.count":
		if x.Trigger == nil {
			return protoreflect.ValueOfMessage((*CountTrigger)(nil).ProtoReflect())
		} else if v, ok := x.Trigger.(*Trigger_Count); ok {
			return protoreflect.ValueOfMessage(v.Count.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*CountTrigger)(nil).ProtoReflect())
		}
	case "kepler.workflow.Trigger.block_interval":
		if x.Trigger == nil {
			return protoreflect.ValueOfMessage((*BlockIntervalTrigger)(nil).ProtoReflect())
		} else if v, ok := x.Trigger.(*Trigger_BlockInterval); ok {
			return protoreflect.ValueOfMessage(v.BlockInterval.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*BlockIntervalTrigger)(nil).ProtoReflect())
		}
	case "kepler.workflow.Trigger.schedule":
		if x.Trigger == nil {
			return protoreflect.ValueOfMessage((*ScheduleTrigger)(nil).ProtoReflect())
		} else if v, ok := x.Trigger.(*Trigger_Schedule); ok {
			return protoreflect.ValueOfMessage(v.Schedule.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*ScheduleTrigger)(nil).ProtoReflect())
		}
	case "kepler.workflow.Trigger.valid_until":
		if x.Trigger == nil {
			return protoreflect.ValueOfMessage((*ValidUntilTrigger)(nil).ProtoReflect())
		} else if v, ok := x.Trigger.(*Trigger_ValidUntil); ok {
			return protoreflect.ValueOfMessage(v.ValidUntil.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*ValidUntilTrigger)(nil).ProtoReflect())
		}
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.Trigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.Trigger does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Trigger) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kepler.workflow.Trigger.on_chain_call":
		cv := value.Message().Interface().(*OnChainCallTrigger)
		x.Trigger = &Trigger_OnChainCall{OnChainCall: cv}
	case "kepler.workflow.Trigger.time":
		cv := value.Message().Interface().(*TimeTrigger)
		x.Trigger = &Trigger_Time{Time: cv}
	case "kepler.workflow.Trigger.gas_limit":
		cv := value.Message().Interface().(*GasLimitTrigger)
		x.Trigger = &Trigger_GasLimit{GasLimit: cv}
	case "kepler.workflow.Trigger.count":
		cv := value.Message().Interface().(*CountTrigger)
		x.Trigger = &Trigger_Count{Count: cv}
	case "kepler.workflow.Trigger.block_interval":
		cv := value.Message().Interface().(*BlockIntervalTrigger)
		x.Trigger = &Trigger_BlockInterval{BlockInterval: cv}
	case "kepler.workflow.Trigger.schedule":
		cv := value.Message().Interface().(*ScheduleTrigger)
		x.Trigger = &Trigger_Schedule{Schedule: cv}
	case "kepler.workflow.Trigger.valid_until":
		cv := value.Message().Interface().(*ValidUntilTrigger)
		x.Trigger = &Trigger_ValidUntil{ValidUntil: cv}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.Trigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.Trigger does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Trigger) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kepler.workflow.Trigger.on_chain_call":
		if x.Trigger == nil {
			value := &OnChainCallTrigger{}
			oneofValue := &Trigger_OnChainCall{OnChainCall: value}
			x.Trigger = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Trigger.(type) {
		case *Trigger_OnChainCall:
			return protoreflect.ValueOfMessage(m.OnChainCall.ProtoReflect())
		default:
			value := &OnChainCallTrigger{}
			oneofValue := &Trigger_OnChainCall{OnChainCall: value}
			x.Trigger = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "kepler.workflow.Trigger.time":
		if x.Trigger == nil {
			value := &TimeTrigger{}
			oneofValue := &Trigger_Time{Time: value}
			x.Trigger = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Trigger.(type) {
		case *Trigger_Time:
			return protoreflect.ValueOfMessage(m.Time.ProtoReflect())
		default:
			value := &TimeTrigger{}
			oneofValue := &Trigger_Time{Time: value}
			x.Trigger = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "kepler.workflow.Trigger.gas_limit":
		if x.Trigger == nil {
			value := &GasLimitTrigger{}
			oneofValue := &Trigger_GasLimit{GasLimit: value}
			x.Trigger = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Trigger.(type) {
		case *Trigger_GasLimit:
			return protoreflect.ValueOfMessage(m.GasLimit.ProtoReflect())
		default:
			value := &GasLimitTrigger{}
			oneofValue := &Trigger_GasLimit{GasLimit: value}
			x.Trigger = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "kepler.workflow.Trigger.count":
		if x.Trigger == nil {
			value := &CountTrigger{}
			oneofValue := &Trigger_Count{Count: value}
			x.Trigger = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Trigger.(type) {
		case *Trigger_Count:
			return protoreflect.ValueOfMessage(m.Count.ProtoReflect())
		default:
			value := &CountTrigger{}
			oneofValue := &Trigger_Count{Count: value}
			x.Trigger = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "kepler.workflow.Trigger.block_interval":
		if x.Trigger == nil {
			value := &BlockIntervalTrigger{}
			oneofValue := &Trigger_BlockInterval{BlockInterval: value}
			x.Trigger = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Trigger.(type) {
		case *Trigger_BlockInterval:
			return protoreflect.ValueOfMessage(m.BlockInterval.ProtoReflect())
		default:
			value := &BlockIntervalTrigger{}
			oneofValue := &Trigger_BlockInterval{BlockInterval: value}
			x.Trigger = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "kepler.workflow.Trigger.schedule":
		if x.Trigger == nil {
			value := &ScheduleTrigger{}
			oneofValue := &Trigger_Schedule{Schedule: value}
			x.Trigger = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Trigger.(type) {
		case *Trigger_Schedule:
			return protoreflect.ValueOfMessage(m.Schedule.ProtoReflect())
		default:
			value := &ScheduleTrigger{}
			oneofValue := &Trigger_Schedule{Schedule: value}
			x.Trigger = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "kepler.workflow.Trigger.valid_until":
		if x.Trigger == nil {
			value := &ValidUntilTrigger{}
			oneofValue := &Trigger_ValidUntil{ValidUntil: value}
			x.Trigger = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Trigger.(type) {
		case *Trigger_ValidUntil:
			return protoreflect.ValueOfMessage(m.ValidUntil.ProtoReflect())
		default:
			value := &ValidUntilTrigger{}
			oneofValue := &Trigger_ValidUntil{ValidUntil: value}
			x.Trigger = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.Trigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.Trigger does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Trigger) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kepler.workflow.Trigger.on_chain_call":
		value := &OnChainCallTrigger{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "kepler.workflow.Trigger.time":
		value := &TimeTrigger{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "kepler.workflow.Trigger.gas_limit":
		value := &GasLimitTrigger{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "kepler.workflow.Trigger.count":
		value := &CountTrigger{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "kepler.workflow.Trigger.block_interval":
		value := &BlockIntervalTrigger{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "kepler.workflow.Trigger.schedule":
		value := &ScheduleTrigger{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "kepler.workflow.Trigger.valid_until":
		value := &ValidUntilTrigger{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.Trigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.Trigger does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Trigger) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	case "kepler.workflow.Trigger.trigger":
		if x.Trigger == nil {
			return nil
		}
		switch x.Trigger.(type) {
		case *Trigger_OnChainCall:
			return x.Descriptor().Fields().ByName("on_chain_call")
		case *Trigger_Time:
			return x.Descriptor().Fields().ByName("time")
		case *Trigger_GasLimit:
			return x.Descriptor().Fields().ByName("gas_limit")
		case *Trigger_Count:
			return x.Descriptor().Fields().ByName("count")
		case *Trigger_BlockInterval:
			return x.Descriptor().Fields().ByName("block_interval")
		case *Trigger_Schedule:
			return x.Descriptor().Fields().ByName("schedule")
		case *Trigger_ValidUntil:
			return x.Descriptor().Fields().ByName("valid_until")
		}
	default:
		panic(fmt.Errorf("%s is not a oneof field in kepler.workflow.Trigger", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Trigger) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Trigger) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Trigger) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Trigger) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Trigger)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		switch x := x.Trigger.(type) {
		case *Trigger_OnChainCall:
			if x == nil {
				break
			}
			l = options.Size(x.OnChainCall)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Trigger_Time:
			if x == nil {
				break
			}
			l = options.Size(x.Time)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Trigger_GasLimit:
			if x == nil {
				break
			}
			l = options.Size(x.GasLimit)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Trigger_Count:
			if x == nil {
				break
			}
			l = options.Size(x.Count)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Trigger_BlockInterval:
			if x == nil {
				break
			}
			l = options.Size(x.BlockInterval)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Trigger_Schedule:
			if x == nil {
				break
			}
			l = options.Size(x.Schedule)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Trigger_ValidUntil:
			if x == nil {
				break
			}
			l = options.Size(x.ValidUntil)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Trigger)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		switch x := x.Trigger.(type) {
		case *Trigger_OnChainCall:
			encoded, err := options.Marshal(x.OnChainCall)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		case *Trigger_Time:
			encoded, err := options.Marshal(x.Time)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		case *Trigger_GasLimit:
			encoded, err := options.Marshal(x.GasLimit)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		case *Trigger_Count:
			encoded, err := options.Marshal(x.Count)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		case *Trigger_BlockInterval:
			encoded, err := options.Marshal(x.BlockInterval)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		case *Trigger_Schedule:
			encoded, err := options.Marshal(x.Schedule)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		case *Trigger_ValidUntil:
			encoded, err := options.Marshal(x.ValidUntil)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Trigger)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Trigger: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Trigger: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OnChainCall", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &OnChainCallTrigger{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Trigger = &Trigger_OnChainCall{v}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &TimeTrigger{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Trigger = &Trigger_Time{v}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &GasLimitTrigger{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Trigger = &Trigger_GasLimit{v}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &CountTrigger{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Trigger = &Trigger_Count{v}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockInterval", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &BlockIntervalTrigger{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Trigger = &Trigger_BlockInterval{v}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Schedule", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &ScheduleTrigger{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Trigger = &Trigger_Schedule{v}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidUntil", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &ValidUntilTrigger{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Trigger = &Trigger_ValidUntil{v}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_OnChainCallTrigger_5_list)(nil)

type _OnChainCallTrigger_5_list struct {
	list *[]string
}

func (x *_OnChainCallTrigger_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_OnChainCallTrigger_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_OnChainCallTrigger_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_OnChainCallTrigger_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_OnChainCallTrigger_5_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message OnChainCallTrigger at list field Args as it is not of Message kind"))
}

func (x *_OnChainCallTrigger_5_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_OnChainCallTrigger_5_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_OnChainCallTrigger_5_list) IsValid() bool {
	return x.list != nil
}

var (
	md_OnChainCallTrigger                protoreflect.MessageDescriptor
	fd_OnChainCallTrigger_contract       protoreflect.FieldDescriptor
	fd_OnChainCallTrigger_chain_id       protoreflect.FieldDescriptor
	fd_OnChainCallTrigger_method_abi     protoreflect.FieldDescriptor
	fd_OnChainCallTrigger_only_finalized protoreflect.FieldDescriptor
	fd_OnChainCallTrigger_args           protoreflect.FieldDescriptor
)

func init() {
	file_kepler_workflow_automation_proto_init()
	md_OnChainCallTrigger = File_kepler_workflow_automation_proto.Messages().ByName("OnChainCallTrigger")
	fd_OnChainCallTrigger_contract = md_OnChainCallTrigger.Fields().ByName("contract")
	fd_OnChainCallTrigger_chain_id = md_OnChainCallTrigger.Fields().ByName("chain_id")
	fd_OnChainCallTrigger_method_abi = md_OnChainCallTrigger.Fields().ByName("method_abi")
	fd_OnChainCallTrigger_only_finalized = md_OnChainCallTrigger.Fields().ByName("only_finalized")
	fd_OnChainCallTrigger_args = md_OnChainCallTrigger.Fields().ByName("args")
}

var _ protoreflect.Message = (*fastReflection_OnChainCallTrigger)(nil)

type fastReflection_OnChainCallTrigger OnChainCallTrigger

func (x *OnChainCallTrigger) ProtoReflect() protoreflect.Message {
	return (*fastReflection_OnChainCallTrigger)(x)
}

func (x *OnChainCallTrigger) slowProtoReflect() protoreflect.Message {
	mi := &file_kepler_workflow_automation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_OnChainCallTrigger_messageType fastReflection_OnChainCallTrigger_messageType
var _ protoreflect.MessageType = fastReflection_OnChainCallTrigger_messageType{}

type fastReflection_OnChainCallTrigger_messageType struct{}

func (x fastReflection_OnChainCallTrigger_messageType) Zero() protoreflect.Message {
	return (*fastReflection_OnChainCallTrigger)(nil)
}
func (x fastReflection_OnChainCallTrigger_messageType) New() protoreflect.Message {
	return new(fastReflection_OnChainCallTrigger)
}
func (x fastReflection_OnChainCallTrigger_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_OnChainCallTrigger
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_OnChainCallTrigger) Descriptor() protoreflect.MessageDescriptor {
	return md_OnChainCallTrigger
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_OnChainCallTrigger) Type() protoreflect.MessageType {
	return _fastReflection_OnChainCallTrigger_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_OnChainCallTrigger) New() protoreflect.Message {
	return new(fastReflection_OnChainCallTrigger)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_OnChainCallTrigger) Interface() protoreflect.ProtoMessage {
	return (*OnChainCallTrigger)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_OnChainCallTrigger) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Contract != "" {
		value := protoreflect.ValueOfString(x.Contract)
		if !f(fd_OnChainCallTrigger_contract, value) {
			return
		}
	}
	if x.ChainId != "" {
		value := protoreflect.ValueOfString(x.ChainId)
		if !f(fd_OnChainCallTrigger_chain_id, value) {
			return
		}
	}
	if x.MethodAbi != nil {
		value := protoreflect.ValueOfMessage(x.MethodAbi.ProtoReflect())
		if !f(fd_OnChainCallTrigger_method_abi, value) {
			return
		}
	}
	if x.OnlyFinalized != false {
		value := protoreflect.ValueOfBool(x.OnlyFinalized)
		if !f(fd_OnChainCallTrigger_only_finalized, value) {
			return
		}
	}
	if len(x.Args) != 0 {
		value := protoreflect.ValueOfList(&_OnChainCallTrigger_5_list{list: &x.Args})
		if !f(fd_OnChainCallTrigger_args, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_OnChainCallTrigger) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kepler.workflow.OnChainCallTrigger.contract":
		return x.Contract != ""
	case "kepler.workflow.OnChainCallTrigger.chain_id":
		return x.ChainId != ""
	case "kepler.workflow.OnChainCallTrigger.method_abi":
		return x.MethodAbi != nil
	case "kepler.workflow.OnChainCallTrigger.only_finalized":
		return x.OnlyFinalized != false
	case "kepler.workflow.OnChainCallTrigger.args":
		return len(x.Args) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.OnChainCallTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.OnChainCallTrigger does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OnChainCallTrigger) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kepler.workflow.OnChainCallTrigger.contract":
		x.Contract = ""
	case "kepler.workflow.OnChainCallTrigger.chain_id":
		x.ChainId = ""
	case "kepler.workflow.OnChainCallTrigger.method_abi":
		x.MethodAbi = nil
	case "kepler.workflow.OnChainCallTrigger.only_finalized":
		x.OnlyFinalized = false
	case "kepler.workflow.OnChainCallTrigger.args":
		x.Args = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.OnChainCallTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.OnChainCallTrigger does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_OnChainCallTrigger) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kepler.workflow.OnChainCallTrigger.contract":
		value := x.Contract
		return protoreflect.ValueOfString(value)
	case "kepler.workflow.OnChainCallTrigger.chain_id":
		value := x.ChainId
		return protoreflect.ValueOfString(value)
	case "kepler.workflow.OnChainCallTrigger.method_abi":
		value := x.MethodAbi
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "kepler.workflow.OnChainCallTrigger.only_finalized":
		value := x.OnlyFinalized
		return protoreflect.ValueOfBool(value)
	case "kepler.workflow.OnChainCallTrigger.args":
		if len(x.Args) == 0 {
			return protoreflect.ValueOfList(&_OnChainCallTrigger_5_list{})
		}
		listValue := &_OnChainCallTrigger_5_list{list: &x.Args}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.OnChainCallTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.OnChainCallTrigger does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OnChainCallTrigger) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kepler.workflow.OnChainCallTrigger.contract":
		x.Contract = value.Interface().(string)
	case "kepler.workflow.OnChainCallTrigger.chain_id":
		x.ChainId = value.Interface().(string)
	case "kepler.workflow.OnChainCallTrigger.method_abi":
		x.MethodAbi = value.Message().Interface().(*MethodABI)
	case "kepler.workflow.OnChainCallTrigger.only_finalized":
		x.OnlyFinalized = value.Bool()
	case "kepler.workflow.OnChainCallTrigger.args":
		lv := value.List()
		clv := lv.(*_OnChainCallTrigger_5_list)
		x.Args = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.OnChainCallTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.OnChainCallTrigger does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OnChainCallTrigger) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kepler.workflow.OnChainCallTrigger.method_abi":
		if x.MethodAbi == nil {
			x.MethodAbi = new(MethodABI)
		}
		return protoreflect.ValueOfMessage(x.MethodAbi.ProtoReflect())
	case "kepler.workflow.OnChainCallTrigger.args":
		if x.Args == nil {
			x.Args = []string{}
		}
		value := &_OnChainCallTrigger_5_list{list: &x.Args}
		return protoreflect.ValueOfList(value)
	case "kepler.workflow.OnChainCallTrigger.contract":
		panic(fmt.Errorf("field contract of message kepler.workflow.OnChainCallTrigger is not mutable"))
	case "kepler.workflow.OnChainCallTrigger.chain_id":
		panic(fmt.Errorf("field chain_id of message kepler.workflow.OnChainCallTrigger is not mutable"))
	case "kepler.workflow.OnChainCallTrigger.only_finalized":
		panic(fmt.Errorf("field only_finalized of message kepler.workflow.OnChainCallTrigger is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.OnChainCallTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.OnChainCallTrigger does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_OnChainCallTrigger) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kepler.workflow.OnChainCallTrigger.contract":
		return protoreflect.ValueOfString("")
	case "kepler.workflow.OnChainCallTrigger.chain_id":
		return protoreflect.ValueOfString("")
	case "kepler.workflow.OnChainCallTrigger.method_abi":
		m := new(MethodABI)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "kepler.workflow.OnChainCallTrigger.only_finalized":
		return protoreflect.ValueOfBool(false)
	case "kepler.workflow.OnChainCallTrigger.args":
		list := []string{}
		return protoreflect.ValueOfList(&_OnChainCallTrigger_5_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.OnChainCallTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.OnChainCallTrigger does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_OnChainCallTrigger) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kepler.workflow.OnChainCallTrigger", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_OnChainCallTrigger) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OnChainCallTrigger) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_OnChainCallTrigger) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_OnChainCallTrigger) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*OnChainCallTrigger)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Contract)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ChainId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MethodAbi != nil {
			l = options.Size(x.MethodAbi)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.OnlyFinalized {
			n += 2
		}
		if len(x.Args) > 0 {
			for _, s := range x.Args {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*OnChainCallTrigger)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Args) > 0 {
			for iNdEx := len(x.Args) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Args[iNdEx])
				copy(dAtA[i:], x.Args[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Args[iNdEx])))
				i--
				dAtA[i] = 0x2a
			}
		}
		if x.OnlyFinalized {
			i--
			if x.OnlyFinalized {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x20
		}
		if x.MethodAbi != nil {
			encoded, err := options.Marshal(x.MethodAbi)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.ChainId) > 0 {
			i -= len(x.ChainId)
			copy(dAtA[i:], x.ChainId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ChainId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Contract) > 0 {
			i -= len(x.Contract)
			copy(dAtA[i:], x.Contract)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Contract)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*OnChainCallTrigger)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OnChainCallTrigger: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OnChainCallTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Contract = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ChainId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MethodAbi", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.MethodAbi == nil {
					x.MethodAbi = &MethodABI{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.MethodAbi); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OnlyFinalized", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.OnlyFinalized = bool(v != 0)
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Args = append(x.Args, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MethodABI      protoreflect.MessageDescriptor
	fd_MethodABI_name protoreflect.FieldDescriptor
	fd_MethodABI_abi  protoreflect.FieldDescriptor
)

func init() {
	file_kepler_workflow_automation_proto_init()
	md_MethodABI = File_kepler_workflow_automation_proto.Messages().ByName("MethodABI")
	fd_MethodABI_name = md_MethodABI.Fields().ByName("name")
	fd_MethodABI_abi = md_MethodABI.Fields().ByName("abi")
}

var _ protoreflect.Message = (*fastReflection_MethodABI)(nil)

type fastReflection_MethodABI MethodABI

func (x *MethodABI) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MethodABI)(x)
}

func (x *MethodABI) slowProtoReflect() protoreflect.Message {
	mi := &file_kepler_workflow_automation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MethodABI_messageType fastReflection_MethodABI_messageType
var _ protoreflect.MessageType = fastReflection_MethodABI_messageType{}

type fastReflection_MethodABI_messageType struct{}

func (x fastReflection_MethodABI_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MethodABI)(nil)
}
func (x fastReflection_MethodABI_messageType) New() protoreflect.Message {
	return new(fastReflection_MethodABI)
}
func (x fastReflection_MethodABI_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MethodABI
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MethodABI) Descriptor() protoreflect.MessageDescriptor {
	return md_MethodABI
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MethodABI) Type() protoreflect.MessageType {
	return _fastReflection_MethodABI_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MethodABI) New() protoreflect.Message {
	return new(fastReflection_MethodABI)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MethodABI) Interface() protoreflect.ProtoMessage {
	return (*MethodABI)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MethodABI) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Name != "" {
		value := protoreflect.ValueOfString(x.Name)
		if !f(fd_MethodABI_name, value) {
			return
		}
	}
	if len(x.Abi) != 0 {
		value := protoreflect.ValueOfBytes(x.Abi)
		if !f(fd_MethodABI_abi, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MethodABI) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kepler.workflow.MethodABI.name":
		return x.Name != ""
	case "kepler.workflow.MethodABI.abi":
		return len(x.Abi) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.MethodABI"))
		}
		panic(fmt.Errorf("message kepler.workflow.MethodABI does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MethodABI) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kepler.workflow.MethodABI.name":
		x.Name = ""
	case "kepler.workflow.MethodABI.abi":
		x.Abi = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.MethodABI"))
		}
		panic(fmt.Errorf("message kepler.workflow.MethodABI does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MethodABI) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kepler.workflow.MethodABI.name":
		value := x.Name
		return protoreflect.ValueOfString(value)
	case "kepler.workflow.MethodABI.abi":
		value := x.Abi
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.MethodABI"))
		}
		panic(fmt.Errorf("message kepler.workflow.MethodABI does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MethodABI) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kepler.workflow.MethodABI.name":
		x.Name = value.Interface().(string)
	case "kepler.workflow.MethodABI.abi":
		x.Abi = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.MethodABI"))
		}
		panic(fmt.Errorf("message kepler.workflow.MethodABI does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MethodABI) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kepler.workflow.MethodABI.name":
		panic(fmt.Errorf("field name of message kepler.workflow.MethodABI is not mutable"))
	case "kepler.workflow.MethodABI.abi":
		panic(fmt.Errorf("field abi of message kepler.workflow.MethodABI is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.MethodABI"))
		}
		panic(fmt.Errorf("message kepler.workflow.MethodABI does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MethodABI) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kepler.workflow.MethodABI.name":
		return protoreflect.ValueOfString("")
	case "kepler.workflow.MethodABI.abi":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.MethodABI"))
		}
		panic(fmt.Errorf("message kepler.workflow.MethodABI does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MethodABI) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kepler.workflow.MethodABI", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MethodABI) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MethodABI) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MethodABI) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MethodABI) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MethodABI)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Name)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Abi)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MethodABI)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Abi) > 0 {
			i -= len(x.Abi)
			copy(dAtA[i:], x.Abi)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Abi)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Name) > 0 {
			i -= len(x.Name)
			copy(dAtA[i:], x.Name)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Name)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MethodABI)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MethodABI: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MethodABI: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Name = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Abi", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Abi = append(x.Abi[:0], dAtA[iNdEx:postIndex]...)
				if x.Abi == nil {
					x.Abi = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_TimeTrigger               protoreflect.MessageDescriptor
	fd_TimeTrigger_execute_after protoreflect.FieldDescriptor
)

func init() {
	file_kepler_workflow_automation_proto_init()
	md_TimeTrigger = File_kepler_workflow_automation_proto.Messages().ByName("TimeTrigger")
	fd_TimeTrigger_execute_after = md_TimeTrigger.Fields().ByName("execute_after")
}

var _ protoreflect.Message = (*fastReflection_TimeTrigger)(nil)

type fastReflection_TimeTrigger TimeTrigger

func (x *TimeTrigger) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TimeTrigger)(x)
}

func (x *TimeTrigger) slowProtoReflect() protoreflect.Message {
	mi := &file_kepler_workflow_automation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TimeTrigger_messageType fastReflection_TimeTrigger_messageType
var _ protoreflect.MessageType = fastReflection_TimeTrigger_messageType{}

type fastReflection_TimeTrigger_messageType struct{}

func (x fastReflection_TimeTrigger_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TimeTrigger)(nil)
}
func (x fastReflection_TimeTrigger_messageType) New() protoreflect.Message {
	return new(fastReflection_TimeTrigger)
}
func (x fastReflection_TimeTrigger_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TimeTrigger
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TimeTrigger) Descriptor() protoreflect.MessageDescriptor {
	return md_TimeTrigger
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TimeTrigger) Type() protoreflect.MessageType {
	return _fastReflection_TimeTrigger_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TimeTrigger) New() protoreflect.Message {
	return new(fastReflection_TimeTrigger)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TimeTrigger) Interface() protoreflect.ProtoMessage {
	return (*TimeTrigger)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TimeTrigger) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ExecuteAfter != int64(0) {
		value := protoreflect.ValueOfInt64(x.ExecuteAfter)
		if !f(fd_TimeTrigger_execute_after, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TimeTrigger) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kepler.workflow.TimeTrigger.execute_after":
		return x.ExecuteAfter != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.TimeTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.TimeTrigger does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TimeTrigger) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kepler.workflow.TimeTrigger.execute_after":
		x.ExecuteAfter = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.TimeTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.TimeTrigger does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TimeTrigger) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kepler.workflow.TimeTrigger.execute_after":
		value := x.ExecuteAfter
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.TimeTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.TimeTrigger does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TimeTrigger) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kepler.workflow.TimeTrigger.execute_after":
		x.ExecuteAfter = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.TimeTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.TimeTrigger does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TimeTrigger) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kepler.workflow.TimeTrigger.execute_after":
		panic(fmt.Errorf("field execute_after of message kepler.workflow.TimeTrigger is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.TimeTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.TimeTrigger does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TimeTrigger) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kepler.workflow.TimeTrigger.execute_after":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.TimeTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.TimeTrigger does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TimeTrigger) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kepler.workflow.TimeTrigger", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TimeTrigger) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TimeTrigger) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TimeTrigger) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TimeTrigger) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TimeTrigger)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.ExecuteAfter != 0 {
			n += 1 + runtime.Sov(uint64(x.ExecuteAfter))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TimeTrigger)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ExecuteAfter != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ExecuteAfter))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TimeTrigger)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TimeTrigger: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TimeTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExecuteAfter", wireType)
				}
				x.ExecuteAfter = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ExecuteAfter |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_CountTrigger              protoreflect.MessageDescriptor
	fd_CountTrigger_repeat_count protoreflect.FieldDescriptor
)

func init() {
	file_kepler_workflow_automation_proto_init()
	md_CountTrigger = File_kepler_workflow_automation_proto.Messages().ByName("CountTrigger")
	fd_CountTrigger_repeat_count = md_CountTrigger.Fields().ByName("repeat_count")
}

var _ protoreflect.Message = (*fastReflection_CountTrigger)(nil)

type fastReflection_CountTrigger CountTrigger

func (x *CountTrigger) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CountTrigger)(x)
}

func (x *CountTrigger) slowProtoReflect() protoreflect.Message {
	mi := &file_kepler_workflow_automation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CountTrigger_messageType fastReflection_CountTrigger_messageType
var _ protoreflect.MessageType = fastReflection_CountTrigger_messageType{}

type fastReflection_CountTrigger_messageType struct{}

func (x fastReflection_CountTrigger_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CountTrigger)(nil)
}
func (x fastReflection_CountTrigger_messageType) New() protoreflect.Message {
	return new(fastReflection_CountTrigger)
}
func (x fastReflection_CountTrigger_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CountTrigger
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CountTrigger) Descriptor() protoreflect.MessageDescriptor {
	return md_CountTrigger
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CountTrigger) Type() protoreflect.MessageType {
	return _fastReflection_CountTrigger_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CountTrigger) New() protoreflect.Message {
	return new(fastReflection_CountTrigger)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CountTrigger) Interface() protoreflect.ProtoMessage {
	return (*CountTrigger)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CountTrigger) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.RepeatCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.RepeatCount)
		if !f(fd_CountTrigger_repeat_count, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CountTrigger) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kepler.workflow.CountTrigger.repeat_count":
		return x.RepeatCount != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.CountTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.CountTrigger does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CountTrigger) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kepler.workflow.CountTrigger.repeat_count":
		x.RepeatCount = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.CountTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.CountTrigger does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CountTrigger) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kepler.workflow.CountTrigger.repeat_count":
		value := x.RepeatCount
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.CountTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.CountTrigger does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CountTrigger) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kepler.workflow.CountTrigger.repeat_count":
		x.RepeatCount = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.CountTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.CountTrigger does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CountTrigger) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kepler.workflow.CountTrigger.repeat_count":
		panic(fmt.Errorf("field repeat_count of message kepler.workflow.CountTrigger is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.CountTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.CountTrigger does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CountTrigger) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kepler.workflow.CountTrigger.repeat_count":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.CountTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.CountTrigger does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CountTrigger) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kepler.workflow.CountTrigger", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CountTrigger) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CountTrigger) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CountTrigger) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CountTrigger) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CountTrigger)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.RepeatCount != 0 {
			n += 1 + runtime.Sov(uint64(x.RepeatCount))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CountTrigger)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.RepeatCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RepeatCount))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CountTrigger)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CountTrigger: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CountTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RepeatCount", wireType)
				}
				x.RepeatCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RepeatCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_BlockIntervalTrigger                protoreflect.MessageDescriptor
	fd_BlockIntervalTrigger_block_interval protoreflect.FieldDescriptor
)

func init() {
	file_kepler_workflow_automation_proto_init()
	md_BlockIntervalTrigger = File_kepler_workflow_automation_proto.Messages().ByName("BlockIntervalTrigger")
	fd_BlockIntervalTrigger_block_interval = md_BlockIntervalTrigger.Fields().ByName("block_interval")
}

var _ protoreflect.Message = (*fastReflection_BlockIntervalTrigger)(nil)

type fastReflection_BlockIntervalTrigger BlockIntervalTrigger

func (x *BlockIntervalTrigger) ProtoReflect() protoreflect.Message {
	return (*fastReflection_BlockIntervalTrigger)(x)
}

func (x *BlockIntervalTrigger) slowProtoReflect() protoreflect.Message {
	mi := &file_kepler_workflow_automation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_BlockIntervalTrigger_messageType fastReflection_BlockIntervalTrigger_messageType
var _ protoreflect.MessageType = fastReflection_BlockIntervalTrigger_messageType{}

type fastReflection_BlockIntervalTrigger_messageType struct{}

func (x fastReflection_BlockIntervalTrigger_messageType) Zero() protoreflect.Message {
	return (*fastReflection_BlockIntervalTrigger)(nil)
}
func (x fastReflection_BlockIntervalTrigger_messageType) New() protoreflect.Message {
	return new(fastReflection_BlockIntervalTrigger)
}
func (x fastReflection_BlockIntervalTrigger_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_BlockIntervalTrigger
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_BlockIntervalTrigger) Descriptor() protoreflect.MessageDescriptor {
	return md_BlockIntervalTrigger
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_BlockIntervalTrigger) Type() protoreflect.MessageType {
	return _fastReflection_BlockIntervalTrigger_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_BlockIntervalTrigger) New() protoreflect.Message {
	return new(fastReflection_BlockIntervalTrigger)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_BlockIntervalTrigger) Interface() protoreflect.ProtoMessage {
	return (*BlockIntervalTrigger)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_BlockIntervalTrigger) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.BlockInterval != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BlockInterval)
		if !f(fd_BlockIntervalTrigger_block_interval, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_BlockIntervalTrigger) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kepler.workflow.BlockIntervalTrigger.block_interval":
		return x.BlockInterval != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.BlockIntervalTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.BlockIntervalTrigger does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlockIntervalTrigger) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kepler.workflow.BlockIntervalTrigger.block_interval":
		x.BlockInterval = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.BlockIntervalTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.BlockIntervalTrigger does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_BlockIntervalTrigger) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kepler.workflow.BlockIntervalTrigger.block_interval":
		value := x.BlockInterval
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.BlockIntervalTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.BlockIntervalTrigger does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlockIntervalTrigger) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kepler.workflow.BlockIntervalTrigger.block_interval":
		x.BlockInterval = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.BlockIntervalTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.BlockIntervalTrigger does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlockIntervalTrigger) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kepler.workflow.BlockIntervalTrigger.block_interval":
		panic(fmt.Errorf("field block_interval of message kepler.workflow.BlockIntervalTrigger is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.BlockIntervalTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.BlockIntervalTrigger does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_BlockIntervalTrigger) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kepler.workflow.BlockIntervalTrigger.block_interval":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.BlockIntervalTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.BlockIntervalTrigger does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_BlockIntervalTrigger) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kepler.workflow.BlockIntervalTrigger", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_BlockIntervalTrigger) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlockIntervalTrigger) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_BlockIntervalTrigger) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_BlockIntervalTrigger) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*BlockIntervalTrigger)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.BlockInterval != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockInterval))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*BlockIntervalTrigger)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.BlockInterval != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockInterval))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*BlockIntervalTrigger)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BlockIntervalTrigger: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BlockIntervalTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockInterval", wireType)
				}
				x.BlockInterval = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockInterval |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ScheduleTrigger      protoreflect.MessageDescriptor
	fd_ScheduleTrigger_cron protoreflect.FieldDescriptor
)

func init() {
	file_kepler_workflow_automation_proto_init()
	md_ScheduleTrigger = File_kepler_workflow_automation_proto.Messages().ByName("ScheduleTrigger")
	fd_ScheduleTrigger_cron = md_ScheduleTrigger.Fields().ByName("cron")
}

var _ protoreflect.Message = (*fastReflection_ScheduleTrigger)(nil)

type fastReflection_ScheduleTrigger ScheduleTrigger

func (x *ScheduleTrigger) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ScheduleTrigger)(x)
}

func (x *ScheduleTrigger) slowProtoReflect() protoreflect.Message {
	mi := &file_kepler_workflow_automation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ScheduleTrigger_messageType fastReflection_ScheduleTrigger_messageType
var _ protoreflect.MessageType = fastReflection_ScheduleTrigger_messageType{}

type fastReflection_ScheduleTrigger_messageType struct{}

func (x fastReflection_ScheduleTrigger_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ScheduleTrigger)(nil)
}
func (x fastReflection_ScheduleTrigger_messageType) New() protoreflect.Message {
	return new(fastReflection_ScheduleTrigger)
}
func (x fastReflection_ScheduleTrigger_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ScheduleTrigger
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ScheduleTrigger) Descriptor() protoreflect.MessageDescriptor {
	return md_ScheduleTrigger
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ScheduleTrigger) Type() protoreflect.MessageType {
	return _fastReflection_ScheduleTrigger_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ScheduleTrigger) New() protoreflect.Message {
	return new(fastReflection_ScheduleTrigger)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ScheduleTrigger) Interface() protoreflect.ProtoMessage {
	return (*ScheduleTrigger)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ScheduleTrigger) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Cron != "" {
		value := protoreflect.ValueOfString(x.Cron)
		if !f(fd_ScheduleTrigger_cron, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ScheduleTrigger) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kepler.workflow.ScheduleTrigger.cron":
		return x.Cron != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.ScheduleTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.ScheduleTrigger does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ScheduleTrigger) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kepler.workflow.ScheduleTrigger.cron":
		x.Cron = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.ScheduleTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.ScheduleTrigger does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ScheduleTrigger) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kepler.workflow.ScheduleTrigger.cron":
		value := x.Cron
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.ScheduleTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.ScheduleTrigger does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ScheduleTrigger) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kepler.workflow.ScheduleTrigger.cron":
		x.Cron = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.ScheduleTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.ScheduleTrigger does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ScheduleTrigger) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kepler.workflow.ScheduleTrigger.cron":
		panic(fmt.Errorf("field cron of message kepler.workflow.ScheduleTrigger is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.ScheduleTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.ScheduleTrigger does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ScheduleTrigger) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kepler.workflow.ScheduleTrigger.cron":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.ScheduleTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.ScheduleTrigger does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ScheduleTrigger) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kepler.workflow.ScheduleTrigger", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ScheduleTrigger) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ScheduleTrigger) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ScheduleTrigger) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ScheduleTrigger) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ScheduleTrigger)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Cron)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ScheduleTrigger)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Cron) > 0 {
			i -= len(x.Cron)
			copy(dAtA[i:], x.Cron)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Cron)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ScheduleTrigger)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ScheduleTrigger: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ScheduleTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Cron", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Cron = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_GasLimitTrigger                          protoreflect.MessageDescriptor
	fd_GasLimitTrigger_max_fee_per_gas          protoreflect.FieldDescriptor
	fd_GasLimitTrigger_max_priority_fee_per_gas protoreflect.FieldDescriptor
)

func init() {
	file_kepler_workflow_automation_proto_init()
	md_GasLimitTrigger = File_kepler_workflow_automation_proto.Messages().ByName("GasLimitTrigger")
	fd_GasLimitTrigger_max_fee_per_gas = md_GasLimitTrigger.Fields().ByName("max_fee_per_gas")
	fd_GasLimitTrigger_max_priority_fee_per_gas = md_GasLimitTrigger.Fields().ByName("max_priority_fee_per_gas")
}

var _ protoreflect.Message = (*fastReflection_GasLimitTrigger)(nil)

type fastReflection_GasLimitTrigger GasLimitTrigger

func (x *GasLimitTrigger) ProtoReflect() protoreflect.Message {
	return (*fastReflection_GasLimitTrigger)(x)
}

func (x *GasLimitTrigger) slowProtoReflect() protoreflect.Message {
	mi := &file_kepler_workflow_automation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_GasLimitTrigger_messageType fastReflection_GasLimitTrigger_messageType
var _ protoreflect.MessageType = fastReflection_GasLimitTrigger_messageType{}

type fastReflection_GasLimitTrigger_messageType struct{}

func (x fastReflection_GasLimitTrigger_messageType) Zero() protoreflect.Message {
	return (*fastReflection_GasLimitTrigger)(nil)
}
func (x fastReflection_GasLimitTrigger_messageType) New() protoreflect.Message {
	return new(fastReflection_GasLimitTrigger)
}
func (x fastReflection_GasLimitTrigger_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_GasLimitTrigger
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_GasLimitTrigger) Descriptor() protoreflect.MessageDescriptor {
	return md_GasLimitTrigger
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_GasLimitTrigger) Type() protoreflect.MessageType {
	return _fastReflection_GasLimitTrigger_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_GasLimitTrigger) New() protoreflect.Message {
	return new(fastReflection_GasLimitTrigger)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_GasLimitTrigger) Interface() protoreflect.ProtoMessage {
	return (*GasLimitTrigger)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_GasLimitTrigger) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.MaxFeePerGas != "" {
		value := protoreflect.ValueOfString(x.MaxFeePerGas)
		if !f(fd_GasLimitTrigger_max_fee_per_gas, value) {
			return
		}
	}
	if x.MaxPriorityFeePerGas != "" {
		value := protoreflect.ValueOfString(x.MaxPriorityFeePerGas)
		if !f(fd_GasLimitTrigger_max_priority_fee_per_gas, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_GasLimitTrigger) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kepler.workflow.GasLimitTrigger.max_fee_per_gas":
		return x.MaxFeePerGas != ""
	case "kepler.workflow.GasLimitTrigger.max_priority_fee_per_gas":
		return x.MaxPriorityFeePerGas != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.GasLimitTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.GasLimitTrigger does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GasLimitTrigger) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kepler.workflow.GasLimitTrigger.max_fee_per_gas":
		x.MaxFeePerGas = ""
	case "kepler.workflow.GasLimitTrigger.max_priority_fee_per_gas":
		x.MaxPriorityFeePerGas = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.GasLimitTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.GasLimitTrigger does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_GasLimitTrigger) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kepler.workflow.GasLimitTrigger.max_fee_per_gas":
		value := x.MaxFeePerGas
		return protoreflect.ValueOfString(value)
	case "kepler.workflow.GasLimitTrigger.max_priority_fee_per_gas":
		value := x.MaxPriorityFeePerGas
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.GasLimitTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.GasLimitTrigger does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GasLimitTrigger) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kepler.workflow.GasLimitTrigger.max_fee_per_gas":
		x.MaxFeePerGas = value.Interface().(string)
	case "kepler.workflow.GasLimitTrigger.max_priority_fee_per_gas":
		x.MaxPriorityFeePerGas = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.GasLimitTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.GasLimitTrigger does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GasLimitTrigger) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kepler.workflow.GasLimitTrigger.max_fee_per_gas":
		panic(fmt.Errorf("field max_fee_per_gas of message kepler.workflow.GasLimitTrigger is not mutable"))
	case "kepler.workflow.GasLimitTrigger.max_priority_fee_per_gas":
		panic(fmt.Errorf("field max_priority_fee_per_gas of message kepler.workflow.GasLimitTrigger is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.GasLimitTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.GasLimitTrigger does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_GasLimitTrigger) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kepler.workflow.GasLimitTrigger.max_fee_per_gas":
		return protoreflect.ValueOfString("")
	case "kepler.workflow.GasLimitTrigger.max_priority_fee_per_gas":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.GasLimitTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.GasLimitTrigger does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_GasLimitTrigger) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kepler.workflow.GasLimitTrigger", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_GasLimitTrigger) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GasLimitTrigger) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_GasLimitTrigger) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_GasLimitTrigger) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*GasLimitTrigger)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.MaxFeePerGas)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MaxPriorityFeePerGas)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*GasLimitTrigger)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.MaxPriorityFeePerGas) > 0 {
			i -= len(x.MaxPriorityFeePerGas)
			copy(dAtA[i:], x.MaxPriorityFeePerGas)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MaxPriorityFeePerGas)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.MaxFeePerGas) > 0 {
			i -= len(x.MaxFeePerGas)
			copy(dAtA[i:], x.MaxFeePerGas)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MaxFeePerGas)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*GasLimitTrigger)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GasLimitTrigger: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GasLimitTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxFeePerGas", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MaxFeePerGas = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxPriorityFeePerGas", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MaxPriorityFeePerGas = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_UserOp                  protoreflect.MessageDescriptor
	fd_UserOp_contract_address protoreflect.FieldDescriptor
	fd_UserOp_chain_id         protoreflect.FieldDescriptor
	fd_UserOp_tx_call_data     protoreflect.FieldDescriptor
)

func init() {
	file_kepler_workflow_automation_proto_init()
	md_UserOp = File_kepler_workflow_automation_proto.Messages().ByName("UserOp")
	fd_UserOp_contract_address = md_UserOp.Fields().ByName("contract_address")
	fd_UserOp_chain_id = md_UserOp.Fields().ByName("chain_id")
	fd_UserOp_tx_call_data = md_UserOp.Fields().ByName("tx_call_data")
}

var _ protoreflect.Message = (*fastReflection_UserOp)(nil)

type fastReflection_UserOp UserOp

func (x *UserOp) ProtoReflect() protoreflect.Message {
	return (*fastReflection_UserOp)(x)
}

func (x *UserOp) slowProtoReflect() protoreflect.Message {
	mi := &file_kepler_workflow_automation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_UserOp_messageType fastReflection_UserOp_messageType
var _ protoreflect.MessageType = fastReflection_UserOp_messageType{}

type fastReflection_UserOp_messageType struct{}

func (x fastReflection_UserOp_messageType) Zero() protoreflect.Message {
	return (*fastReflection_UserOp)(nil)
}
func (x fastReflection_UserOp_messageType) New() protoreflect.Message {
	return new(fastReflection_UserOp)
}
func (x fastReflection_UserOp_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_UserOp
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_UserOp) Descriptor() protoreflect.MessageDescriptor {
	return md_UserOp
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_UserOp) Type() protoreflect.MessageType {
	return _fastReflection_UserOp_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_UserOp) New() protoreflect.Message {
	return new(fastReflection_UserOp)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_UserOp) Interface() protoreflect.ProtoMessage {
	return (*UserOp)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_UserOp) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.ContractAddress) != 0 {
		value := protoreflect.ValueOfBytes(x.ContractAddress)
		if !f(fd_UserOp_contract_address, value) {
			return
		}
	}
	if x.ChainId != "" {
		value := protoreflect.ValueOfString(x.ChainId)
		if !f(fd_UserOp_chain_id, value) {
			return
		}
	}
	if len(x.TxCallData) != 0 {
		value := protoreflect.ValueOfBytes(x.TxCallData)
		if !f(fd_UserOp_tx_call_data, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_UserOp) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kepler.workflow.UserOp.contract_address":
		return len(x.ContractAddress) != 0
	case "kepler.workflow.UserOp.chain_id":
		return x.ChainId != ""
	case "kepler.workflow.UserOp.tx_call_data":
		return len(x.TxCallData) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.UserOp"))
		}
		panic(fmt.Errorf("message kepler.workflow.UserOp does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserOp) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kepler.workflow.UserOp.contract_address":
		x.ContractAddress = nil
	case "kepler.workflow.UserOp.chain_id":
		x.ChainId = ""
	case "kepler.workflow.UserOp.tx_call_data":
		x.TxCallData = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.UserOp"))
		}
		panic(fmt.Errorf("message kepler.workflow.UserOp does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_UserOp) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kepler.workflow.UserOp.contract_address":
		value := x.ContractAddress
		return protoreflect.ValueOfBytes(value)
	case "kepler.workflow.UserOp.chain_id":
		value := x.ChainId
		return protoreflect.ValueOfString(value)
	case "kepler.workflow.UserOp.tx_call_data":
		value := x.TxCallData
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.UserOp"))
		}
		panic(fmt.Errorf("message kepler.workflow.UserOp does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserOp) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kepler.workflow.UserOp.contract_address":
		x.ContractAddress = value.Bytes()
	case "kepler.workflow.UserOp.chain_id":
		x.ChainId = value.Interface().(string)
	case "kepler.workflow.UserOp.tx_call_data":
		x.TxCallData = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.UserOp"))
		}
		panic(fmt.Errorf("message kepler.workflow.UserOp does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserOp) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kepler.workflow.UserOp.contract_address":
		panic(fmt.Errorf("field contract_address of message kepler.workflow.UserOp is not mutable"))
	case "kepler.workflow.UserOp.chain_id":
		panic(fmt.Errorf("field chain_id of message kepler.workflow.UserOp is not mutable"))
	case "kepler.workflow.UserOp.tx_call_data":
		panic(fmt.Errorf("field tx_call_data of message kepler.workflow.UserOp is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.UserOp"))
		}
		panic(fmt.Errorf("message kepler.workflow.UserOp does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_UserOp) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kepler.workflow.UserOp.contract_address":
		return protoreflect.ValueOfBytes(nil)
	case "kepler.workflow.UserOp.chain_id":
		return protoreflect.ValueOfString("")
	case "kepler.workflow.UserOp.tx_call_data":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.UserOp"))
		}
		panic(fmt.Errorf("message kepler.workflow.UserOp does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_UserOp) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kepler.workflow.UserOp", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_UserOp) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserOp) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_UserOp) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_UserOp) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*UserOp)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ContractAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ChainId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TxCallData)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*UserOp)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.TxCallData) > 0 {
			i -= len(x.TxCallData)
			copy(dAtA[i:], x.TxCallData)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TxCallData)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.ChainId) > 0 {
			i -= len(x.ChainId)
			copy(dAtA[i:], x.ChainId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ChainId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.ContractAddress) > 0 {
			i -= len(x.ContractAddress)
			copy(dAtA[i:], x.ContractAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ContractAddress)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*UserOp)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UserOp: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UserOp: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ContractAddress = append(x.ContractAddress[:0], dAtA[iNdEx:postIndex]...)
				if x.ContractAddress == nil {
					x.ContractAddress = []byte{}
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ChainId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TxCallData", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TxCallData = append(x.TxCallData[:0], dAtA[iNdEx:postIndex]...)
				if x.TxCallData == nil {
					x.TxCallData = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ValidUntilTrigger           protoreflect.MessageDescriptor
	fd_ValidUntilTrigger_timestamp protoreflect.FieldDescriptor
)

func init() {
	file_kepler_workflow_automation_proto_init()
	md_ValidUntilTrigger = File_kepler_workflow_automation_proto.Messages().ByName("ValidUntilTrigger")
	fd_ValidUntilTrigger_timestamp = md_ValidUntilTrigger.Fields().ByName("timestamp")
}

var _ protoreflect.Message = (*fastReflection_ValidUntilTrigger)(nil)

type fastReflection_ValidUntilTrigger ValidUntilTrigger

func (x *ValidUntilTrigger) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ValidUntilTrigger)(x)
}

func (x *ValidUntilTrigger) slowProtoReflect() protoreflect.Message {
	mi := &file_kepler_workflow_automation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ValidUntilTrigger_messageType fastReflection_ValidUntilTrigger_messageType
var _ protoreflect.MessageType = fastReflection_ValidUntilTrigger_messageType{}

type fastReflection_ValidUntilTrigger_messageType struct{}

func (x fastReflection_ValidUntilTrigger_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ValidUntilTrigger)(nil)
}
func (x fastReflection_ValidUntilTrigger_messageType) New() protoreflect.Message {
	return new(fastReflection_ValidUntilTrigger)
}
func (x fastReflection_ValidUntilTrigger_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ValidUntilTrigger
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ValidUntilTrigger) Descriptor() protoreflect.MessageDescriptor {
	return md_ValidUntilTrigger
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ValidUntilTrigger) Type() protoreflect.MessageType {
	return _fastReflection_ValidUntilTrigger_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ValidUntilTrigger) New() protoreflect.Message {
	return new(fastReflection_ValidUntilTrigger)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ValidUntilTrigger) Interface() protoreflect.ProtoMessage {
	return (*ValidUntilTrigger)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ValidUntilTrigger) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Timestamp != int64(0) {
		value := protoreflect.ValueOfInt64(x.Timestamp)
		if !f(fd_ValidUntilTrigger_timestamp, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ValidUntilTrigger) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kepler.workflow.ValidUntilTrigger.timestamp":
		return x.Timestamp != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.ValidUntilTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.ValidUntilTrigger does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidUntilTrigger) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kepler.workflow.ValidUntilTrigger.timestamp":
		x.Timestamp = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.ValidUntilTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.ValidUntilTrigger does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ValidUntilTrigger) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kepler.workflow.ValidUntilTrigger.timestamp":
		value := x.Timestamp
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.ValidUntilTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.ValidUntilTrigger does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidUntilTrigger) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kepler.workflow.ValidUntilTrigger.timestamp":
		x.Timestamp = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.ValidUntilTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.ValidUntilTrigger does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidUntilTrigger) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kepler.workflow.ValidUntilTrigger.timestamp":
		panic(fmt.Errorf("field timestamp of message kepler.workflow.ValidUntilTrigger is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.ValidUntilTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.ValidUntilTrigger does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ValidUntilTrigger) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kepler.workflow.ValidUntilTrigger.timestamp":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.workflow.ValidUntilTrigger"))
		}
		panic(fmt.Errorf("message kepler.workflow.ValidUntilTrigger does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ValidUntilTrigger) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kepler.workflow.ValidUntilTrigger", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ValidUntilTrigger) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidUntilTrigger) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ValidUntilTrigger) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ValidUntilTrigger) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ValidUntilTrigger)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Timestamp != 0 {
			n += 1 + runtime.Sov(uint64(x.Timestamp))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ValidUntilTrigger)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Timestamp != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Timestamp))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ValidUntilTrigger)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ValidUntilTrigger: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ValidUntilTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
				}
				x.Timestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Timestamp |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: kepler/workflow/automation.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enumeration for automation status
type AutomationStatus int32

const (
	// AUTOMATION_STATUS_STATUS_UNSPECIFIED - Default unknown status
	AutomationStatus_AUTOMATION_STATUS_STATUS_UNSPECIFIED AutomationStatus = 0
	// AUTOMATION_STATUS_ACTIVE - Active automation
	AutomationStatus_AUTOMATION_STATUS_ACTIVE AutomationStatus = 1
	// AUTOMATION_STATUS_EXPIRED - Expired automation
	AutomationStatus_AUTOMATION_STATUS_EXPIRED AutomationStatus = 2
	// AUTOMATION_STATUS_PAUSED - Paused automation
	AutomationStatus_AUTOMATION_STATUS_PAUSED AutomationStatus = 3
	// AUTOMATION_STATUS_FAILED - Failed automation
	AutomationStatus_AUTOMATION_STATUS_FAILED AutomationStatus = 4
	// AUTOMATION_STATUS_DONE - Completed automation
	AutomationStatus_AUTOMATION_STATUS_DONE AutomationStatus = 5
	// AUTOMATION_STATUS_CANCELED - Canceled automation
	AutomationStatus_AUTOMATION_STATUS_CANCELED AutomationStatus = 6 // Canceled automation
)

// Enum value maps for AutomationStatus.
var (
	AutomationStatus_name = map[int32]string{
		0: "AUTOMATION_STATUS_STATUS_UNSPECIFIED",
		1: "AUTOMATION_STATUS_ACTIVE",
		2: "AUTOMATION_STATUS_EXPIRED",
		3: "AUTOMATION_STATUS_PAUSED",
		4: "AUTOMATION_STATUS_FAILED",
		5: "AUTOMATION_STATUS_DONE",
		6: "AUTOMATION_STATUS_CANCELED",
	}
	AutomationStatus_value = map[string]int32{
		"AUTOMATION_STATUS_STATUS_UNSPECIFIED": 0,
		"AUTOMATION_STATUS_ACTIVE":             1,
		"AUTOMATION_STATUS_EXPIRED":            2,
		"AUTOMATION_STATUS_PAUSED":             3,
		"AUTOMATION_STATUS_FAILED":             4,
		"AUTOMATION_STATUS_DONE":               5,
		"AUTOMATION_STATUS_CANCELED":           6,
	}
)

func (x AutomationStatus) Enum() *AutomationStatus {
	p := new(AutomationStatus)
	*p = x
	return p
}

func (x AutomationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AutomationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kepler_workflow_automation_proto_enumTypes[0].Descriptor()
}

func (AutomationStatus) Type() protoreflect.EnumType {
	return &file_kepler_workflow_automation_proto_enumTypes[0]
}

func (x AutomationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AutomationStatus.Descriptor instead.
func (AutomationStatus) EnumDescriptor() ([]byte, []int) {
	return file_kepler_workflow_automation_proto_rawDescGZIP(), []int{0}
}

// Automation entity
type Automation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Incremental ID for blockchain consistency
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Trigger object, which can be chained by logical operators in itself
	Triggers []*Trigger `protobuf:"bytes,2,rep,name=triggers,proto3" json:"triggers,omitempty"`
	// User operation
	UserOp *UserOp `protobuf:"bytes,3,opt,name=user_op,json=userOp,proto3" json:"user_op,omitempty"`
	// Status of the automation
	Status AutomationStatus `protobuf:"varint,4,opt,name=status,proto3,enum=kepler.workflow.AutomationStatus" json:"status,omitempty"`
	// how many times automation has been executed
	ExecutionCount int64 `protobuf:"varint,5,opt,name=execution_count,json=executionCount,proto3" json:"execution_count,omitempty"`
	// how many times in a row automation has failed its execution
	FailedExecutionStreak int64 `protobuf:"varint,6,opt,name=failed_execution_streak,json=failedExecutionStreak,proto3" json:"failed_execution_streak,omitempty"`
	// last successfully executed job
	LastSuccessfulJob *job.Job `protobuf:"bytes,7,opt,name=last_successful_job,json=lastSuccessfulJob,proto3" json:"last_successful_job,omitempty"`
	// Creator address
	Creator string `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (x *Automation) Reset() {
	*x = Automation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kepler_workflow_automation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Automation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Automation) ProtoMessage() {}

// Deprecated: Use Automation.ProtoReflect.Descriptor instead.
func (*Automation) Descriptor() ([]byte, []int) {
	return file_kepler_workflow_automation_proto_rawDescGZIP(), []int{0}
}

func (x *Automation) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Automation) GetTriggers() []*Trigger {
	if x != nil {
		return x.Triggers
	}
	return nil
}

func (x *Automation) GetUserOp() *UserOp {
	if x != nil {
		return x.UserOp
	}
	return nil
}

func (x *Automation) GetStatus() AutomationStatus {
	if x != nil {
		return x.Status
	}
	return AutomationStatus_AUTOMATION_STATUS_STATUS_UNSPECIFIED
}

func (x *Automation) GetExecutionCount() int64 {
	if x != nil {
		return x.ExecutionCount
	}
	return 0
}

func (x *Automation) GetFailedExecutionStreak() int64 {
	if x != nil {
		return x.FailedExecutionStreak
	}
	return 0
}

func (x *Automation) GetLastSuccessfulJob() *job.Job {
	if x != nil {
		return x.LastSuccessfulJob
	}
	return nil
}

func (x *Automation) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

// Base trigger with type selection
type Trigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Trigger:
	//
	//	*Trigger_OnChainCall
	//	*Trigger_Time
	//	*Trigger_GasLimit
	//	*Trigger_Count
	//	*Trigger_BlockInterval
	//	*Trigger_Schedule
	//	*Trigger_ValidUntil
	Trigger isTrigger_Trigger `protobuf_oneof:"trigger"`
}

func (x *Trigger) Reset() {
	*x = Trigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kepler_workflow_automation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger) ProtoMessage() {}

// Deprecated: Use Trigger.ProtoReflect.Descriptor instead.
func (*Trigger) Descriptor() ([]byte, []int) {
	return file_kepler_workflow_automation_proto_rawDescGZIP(), []int{1}
}

func (x *Trigger) GetTrigger() isTrigger_Trigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *Trigger) GetOnChainCall() *OnChainCallTrigger {
	if x, ok := x.GetTrigger().(*Trigger_OnChainCall); ok {
		return x.OnChainCall
	}
	return nil
}

func (x *Trigger) GetTime() *TimeTrigger {
	if x, ok := x.GetTrigger().(*Trigger_Time); ok {
		return x.Time
	}
	return nil
}

func (x *Trigger) GetGasLimit() *GasLimitTrigger {
	if x, ok := x.GetTrigger().(*Trigger_GasLimit); ok {
		return x.GasLimit
	}
	return nil
}

func (x *Trigger) GetCount() *CountTrigger {
	if x, ok := x.GetTrigger().(*Trigger_Count); ok {
		return x.Count
	}
	return nil
}

func (x *Trigger) GetBlockInterval() *BlockIntervalTrigger {
	if x, ok := x.GetTrigger().(*Trigger_BlockInterval); ok {
		return x.BlockInterval
	}
	return nil
}

func (x *Trigger) GetSchedule() *ScheduleTrigger {
	if x, ok := x.GetTrigger().(*Trigger_Schedule); ok {
		return x.Schedule
	}
	return nil
}

func (x *Trigger) GetValidUntil() *ValidUntilTrigger {
	if x, ok := x.GetTrigger().(*Trigger_ValidUntil); ok {
		return x.ValidUntil
	}
	return nil
}

type isTrigger_Trigger interface {
	isTrigger_Trigger()
}

type Trigger_OnChainCall struct {
	OnChainCall *OnChainCallTrigger `protobuf:"bytes,1,opt,name=on_chain_call,json=onChainCall,proto3,oneof"`
}

type Trigger_Time struct {
	Time *TimeTrigger `protobuf:"bytes,2,opt,name=time,proto3,oneof"`
}

type Trigger_GasLimit struct {
	GasLimit *GasLimitTrigger `protobuf:"bytes,3,opt,name=gas_limit,json=gasLimit,proto3,oneof"`
}

type Trigger_Count struct {
	Count *CountTrigger `protobuf:"bytes,4,opt,name=count,proto3,oneof"`
}

type Trigger_BlockInterval struct {
	BlockInterval *BlockIntervalTrigger `protobuf:"bytes,5,opt,name=block_interval,json=blockInterval,proto3,oneof"`
}

type Trigger_Schedule struct {
	Schedule *ScheduleTrigger `protobuf:"bytes,6,opt,name=schedule,proto3,oneof"`
}

type Trigger_ValidUntil struct {
	ValidUntil *ValidUntilTrigger `protobuf:"bytes,7,opt,name=valid_until,json=validUntil,proto3,oneof"`
}

func (*Trigger_OnChainCall) isTrigger_Trigger() {}

func (*Trigger_Time) isTrigger_Trigger() {}

func (*Trigger_GasLimit) isTrigger_Trigger() {}

func (*Trigger_Count) isTrigger_Trigger() {}

func (*Trigger_BlockInterval) isTrigger_Trigger() {}

func (*Trigger_Schedule) isTrigger_Trigger() {}

func (*Trigger_ValidUntil) isTrigger_Trigger() {}

// OnChainCallTrigger defines a trigger that calls a smart contract method.
// Instead of just sending raw call data, we now provide a more structured
// approach that includes the method's ABI and the list of arguments.
type OnChainCallTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contract      string     `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`                                 // Contract address (e.g., "0x1234567890abcdef...")
	ChainId       string     `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`                    // Chain ID (e.g., 1 for Ethereum mainnet)
	MethodAbi     *MethodABI `protobuf:"bytes,3,opt,name=method_abi,json=methodAbi,proto3" json:"method_abi,omitempty"`              // ABI of the method to be invoked
	OnlyFinalized bool       `protobuf:"varint,4,opt,name=only_finalized,json=onlyFinalized,proto3" json:"only_finalized,omitempty"` // If true, trigger will be simulated only on finalized blocks
	Args          []string   `protobuf:"bytes,5,rep,name=args,proto3" json:"args,omitempty"`                                         // Arguments for the method (as strings)
}

func (x *OnChainCallTrigger) Reset() {
	*x = OnChainCallTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kepler_workflow_automation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnChainCallTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnChainCallTrigger) ProtoMessage() {}

// Deprecated: Use OnChainCallTrigger.ProtoReflect.Descriptor instead.
func (*OnChainCallTrigger) Descriptor() ([]byte, []int) {
	return file_kepler_workflow_automation_proto_rawDescGZIP(), []int{2}
}

func (x *OnChainCallTrigger) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *OnChainCallTrigger) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *OnChainCallTrigger) GetMethodAbi() *MethodABI {
	if x != nil {
		return x.MethodAbi
	}
	return nil
}

func (x *OnChainCallTrigger) GetOnlyFinalized() bool {
	if x != nil {
		return x.OnlyFinalized
	}
	return false
}

func (x *OnChainCallTrigger) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type MethodABI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Method name
	Abi  []byte `protobuf:"bytes,2,opt,name=abi,proto3" json:"abi,omitempty"`   // Method ABI
}

func (x *MethodABI) Reset() {
	*x = MethodABI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kepler_workflow_automation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodABI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodABI) ProtoMessage() {}

// Deprecated: Use MethodABI.ProtoReflect.Descriptor instead.
func (*MethodABI) Descriptor() ([]byte, []int) {
	return file_kepler_workflow_automation_proto_rawDescGZIP(), []int{3}
}

func (x *MethodABI) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MethodABI) GetAbi() []byte {
	if x != nil {
		return x.Abi
	}
	return nil
}

// Time trigger
type TimeTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecuteAfter int64 `protobuf:"varint,1,opt,name=execute_after,json=executeAfter,proto3" json:"execute_after,omitempty"` // Unix timestamp
}

func (x *TimeTrigger) Reset() {
	*x = TimeTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kepler_workflow_automation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeTrigger) ProtoMessage() {}

// Deprecated: Use TimeTrigger.ProtoReflect.Descriptor instead.
func (*TimeTrigger) Descriptor() ([]byte, []int) {
	return file_kepler_workflow_automation_proto_rawDescGZIP(), []int{4}
}

func (x *TimeTrigger) GetExecuteAfter() int64 {
	if x != nil {
		return x.ExecuteAfter
	}
	return 0
}

// Count trigger
type CountTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepeatCount uint64 `protobuf:"varint,1,opt,name=repeat_count,json=repeatCount,proto3" json:"repeat_count,omitempty"` // Number of executions allowed
}

func (x *CountTrigger) Reset() {
	*x = CountTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kepler_workflow_automation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountTrigger) ProtoMessage() {}

// Deprecated: Use CountTrigger.ProtoReflect.Descriptor instead.
func (*CountTrigger) Descriptor() ([]byte, []int) {
	return file_kepler_workflow_automation_proto_rawDescGZIP(), []int{5}
}

func (x *CountTrigger) GetRepeatCount() uint64 {
	if x != nil {
		return x.RepeatCount
	}
	return 0
}

// Block interval trigger
type BlockIntervalTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockInterval uint64 `protobuf:"varint,1,opt,name=block_interval,json=blockInterval,proto3" json:"block_interval,omitempty"` // Block interval in blocks
}

func (x *BlockIntervalTrigger) Reset() {
	*x = BlockIntervalTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kepler_workflow_automation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockIntervalTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockIntervalTrigger) ProtoMessage() {}

// Deprecated: Use BlockIntervalTrigger.ProtoReflect.Descriptor instead.
func (*BlockIntervalTrigger) Descriptor() ([]byte, []int) {
	return file_kepler_workflow_automation_proto_rawDescGZIP(), []int{6}
}

func (x *BlockIntervalTrigger) GetBlockInterval() uint64 {
	if x != nil {
		return x.BlockInterval
	}
	return 0
}

// ScheduleTrigger activates by a cron expression
type ScheduleTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cron string `protobuf:"bytes,1,opt,name=cron,proto3" json:"cron,omitempty"` // Cron expression, with minumum resolution of 1 minute, also accepts descriptors like @every 1h30m
}

func (x *ScheduleTrigger) Reset() {
	*x = ScheduleTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kepler_workflow_automation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleTrigger) ProtoMessage() {}

// Deprecated: Use ScheduleTrigger.ProtoReflect.Descriptor instead.
func (*ScheduleTrigger) Descriptor() ([]byte, []int) {
	return file_kepler_workflow_automation_proto_rawDescGZIP(), []int{7}
}

func (x *ScheduleTrigger) GetCron() string {
	if x != nil {
		return x.Cron
	}
	return ""
}

// GasLimitTrigger activates when the chain's gas limit ≤ threshold
type GasLimitTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxFeePerGas         string `protobuf:"bytes,1,opt,name=max_fee_per_gas,json=maxFeePerGas,proto3" json:"max_fee_per_gas,omitempty"`                           // Maximum total fee per gas (in wei, as string) - covers base fee and priority fee.
	MaxPriorityFeePerGas string `protobuf:"bytes,2,opt,name=max_priority_fee_per_gas,json=maxPriorityFeePerGas,proto3" json:"max_priority_fee_per_gas,omitempty"` // Maximum priority fee (in wei, as string) given as a tip to miners.
}

func (x *GasLimitTrigger) Reset() {
	*x = GasLimitTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kepler_workflow_automation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasLimitTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasLimitTrigger) ProtoMessage() {}

// Deprecated: Use GasLimitTrigger.ProtoReflect.Descriptor instead.
func (*GasLimitTrigger) Descriptor() ([]byte, []int) {
	return file_kepler_workflow_automation_proto_rawDescGZIP(), []int{8}
}

func (x *GasLimitTrigger) GetMaxFeePerGas() string {
	if x != nil {
		return x.MaxFeePerGas
	}
	return ""
}

func (x *GasLimitTrigger) GetMaxPriorityFeePerGas() string {
	if x != nil {
		return x.MaxPriorityFeePerGas
	}
	return ""
}

// UserOp is user operation process
type UserOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractAddress []byte `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"` // Contract address
	ChainId         string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`                         // Chain ID
	TxCallData      []byte `protobuf:"bytes,3,opt,name=tx_call_data,json=txCallData,proto3" json:"tx_call_data,omitempty"`
}

func (x *UserOp) Reset() {
	*x = UserOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kepler_workflow_automation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOp) ProtoMessage() {}

// Deprecated: Use UserOp.ProtoReflect.Descriptor instead.
func (*UserOp) Descriptor() ([]byte, []int) {
	return file_kepler_workflow_automation_proto_rawDescGZIP(), []int{9}
}

func (x *UserOp) GetContractAddress() []byte {
	if x != nil {
		return x.ContractAddress
	}
	return nil
}

func (x *UserOp) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *UserOp) GetTxCallData() []byte {
	if x != nil {
		return x.TxCallData
	}
	return nil
}

// Valid until trigger deactivates the automation when the timestamp is reached
type ValidUntilTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// timestamp is the Unix timestamp when the trigger should be executed
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ValidUntilTrigger) Reset() {
	*x = ValidUntilTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kepler_workflow_automation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidUntilTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidUntilTrigger) ProtoMessage() {}

// Deprecated: Use ValidUntilTrigger.ProtoReflect.Descriptor instead.
func (*ValidUntilTrigger) Descriptor() ([]byte, []int) {
	return file_kepler_workflow_automation_proto_rawDescGZIP(), []int{10}
}

func (x *ValidUntilTrigger) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

var File_kepler_workflow_automation_proto protoreflect.FileDescriptor

var file_kepler_workflow_automation_proto_rawDesc = []byte{
	0x0a, 0x20, 0x6b, 0x65, 0x70, 0x6c, 0x65, 0x72, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0f, 0x6b, 0x65, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x6b, 0x65, 0x70, 0x6c, 0x65, 0x72, 0x2f, 0x6a, 0x6f, 0x62, 0x2f, 0x6a, 0x6f,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x03, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x65, 0x70, 0x6c, 0x65,
	0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x52, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6b, 0x65, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x12, 0x39,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x6b, 0x65, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x15, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x3f, 0x0a, 0x13, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x6a, 0x6f,
	0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x65, 0x70, 0x6c, 0x65, 0x72,
	0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x32, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4,
	0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x22,
	0xd3, 0x04, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x0d, 0x6f,
	0x6e, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x65, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x6c,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x12, 0xb2, 0xe7, 0xb0, 0x2a, 0x0d, 0x6f, 0x6e,
	0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x65, 0x70, 0x6c, 0x65,
	0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x09, 0xb2, 0xe7, 0xb0, 0x2a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x09, 0x67, 0x61, 0x73,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b,
	0x65, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47,
	0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x0e,
	0xb2, 0xe7, 0xb0, 0x2a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x00,
	0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x65, 0x70, 0x6c,
	0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x0a, 0xb2, 0xe7, 0xb0, 0x2a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x63, 0x0a,
	0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x65, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x13, 0xb2, 0xe7,
	0xb0, 0x2a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x65, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x0d, 0xb2, 0xe7, 0xb0, 0x2a, 0x08, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x57, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x65, 0x70, 0x6c, 0x65, 0x72, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x6e,
	0x74, 0x69, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x10, 0xb2, 0xe7, 0xb0, 0x2a,
	0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x0a,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0xc1, 0x01, 0x0a, 0x12, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x61, 0x62,
	0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x65, 0x70, 0x6c, 0x65, 0x72,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x41, 0x42, 0x49, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x41, 0x62, 0x69, 0x12, 0x25,
	0x0a, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x31, 0x0a, 0x09, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x41, 0x42, 0x49, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x62,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x61, 0x62, 0x69, 0x22, 0x32, 0x0a, 0x0b,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x22, 0x31, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x3d, 0x0a, 0x14, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x22, 0x25, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x22, 0x70, 0x0a, 0x0f, 0x47, 0x61, 0x73,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0f,
	0x6d, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72,
	0x47, 0x61, 0x73, 0x12, 0x36, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x22, 0x70, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x4f, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x74,
	0x78, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x74, 0x78, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x31, 0x0a,
	0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2a, 0xf1, 0x01, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18,
	0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x55,
	0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x55, 0x54, 0x4f,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f,
	0x4e, 0x45, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x45, 0x44, 0x10, 0x06, 0x42, 0xb7, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x65, 0x70,
	0x6c, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x0f, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x74, 0x74,
	0x6f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x6b, 0x65, 0x70, 0x6c, 0x65, 0x72, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6b, 0x65, 0x70, 0x6c, 0x65, 0x72, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0xa2, 0x02, 0x03, 0x4b, 0x57, 0x58, 0xaa, 0x02, 0x0f, 0x4b, 0x65, 0x70, 0x6c,
	0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0xca, 0x02, 0x0f, 0x4b, 0x65,
	0x70, 0x6c, 0x65, 0x72, 0x5c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0xe2, 0x02, 0x1b,
	0x4b, 0x65, 0x70, 0x6c, 0x65, 0x72, 0x5c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x4b, 0x65,
	0x70, 0x6c, 0x65, 0x72, 0x3a, 0x3a, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kepler_workflow_automation_proto_rawDescOnce sync.Once
	file_kepler_workflow_automation_proto_rawDescData = file_kepler_workflow_automation_proto_rawDesc
)

func file_kepler_workflow_automation_proto_rawDescGZIP() []byte {
	file_kepler_workflow_automation_proto_rawDescOnce.Do(func() {
		file_kepler_workflow_automation_proto_rawDescData = protoimpl.X.CompressGZIP(file_kepler_workflow_automation_proto_rawDescData)
	})
	return file_kepler_workflow_automation_proto_rawDescData
}

var file_kepler_workflow_automation_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kepler_workflow_automation_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_kepler_workflow_automation_proto_goTypes = []interface{}{
	(AutomationStatus)(0),        // 0: kepler.workflow.AutomationStatus
	(*Automation)(nil),           // 1: kepler.workflow.Automation
	(*Trigger)(nil),              // 2: kepler.workflow.Trigger
	(*OnChainCallTrigger)(nil),   // 3: kepler.workflow.OnChainCallTrigger
	(*MethodABI)(nil),            // 4: kepler.workflow.MethodABI
	(*TimeTrigger)(nil),          // 5: kepler.workflow.TimeTrigger
	(*CountTrigger)(nil),         // 6: kepler.workflow.CountTrigger
	(*BlockIntervalTrigger)(nil), // 7: kepler.workflow.BlockIntervalTrigger
	(*ScheduleTrigger)(nil),      // 8: kepler.workflow.ScheduleTrigger
	(*GasLimitTrigger)(nil),      // 9: kepler.workflow.GasLimitTrigger
	(*UserOp)(nil),               // 10: kepler.workflow.UserOp
	(*ValidUntilTrigger)(nil),    // 11: kepler.workflow.ValidUntilTrigger
	(*job.Job)(nil),              // 12: kepler.job.Job
}
var file_kepler_workflow_automation_proto_depIdxs = []int32{
	2,  // 0: kepler.workflow.Automation.triggers:type_name -> kepler.workflow.Trigger
	10, // 1: kepler.workflow.Automation.user_op:type_name -> kepler.workflow.UserOp
	0,  // 2: kepler.workflow.Automation.status:type_name -> kepler.workflow.AutomationStatus
	12, // 3: kepler.workflow.Automation.last_successful_job:type_name -> kepler.job.Job
	3,  // 4: kepler.workflow.Trigger.on_chain_call:type_name -> kepler.workflow.OnChainCallTrigger
	5,  // 5: kepler.workflow.Trigger.time:type_name -> kepler.workflow.TimeTrigger
	9,  // 6: kepler.workflow.Trigger.gas_limit:type_name -> kepler.workflow.GasLimitTrigger
	6,  // 7: kepler.workflow.Trigger.count:type_name -> kepler.workflow.CountTrigger
	7,  // 8: kepler.workflow.Trigger.block_interval:type_name -> kepler.workflow.BlockIntervalTrigger
	8,  // 9: kepler.workflow.Trigger.schedule:type_name -> kepler.workflow.ScheduleTrigger
	11, // 10: kepler.workflow.Trigger.valid_until:type_name -> kepler.workflow.ValidUntilTrigger
	4,  // 11: kepler.workflow.OnChainCallTrigger.method_abi:type_name -> kepler.workflow.MethodABI
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_kepler_workflow_automation_proto_init() }
func file_kepler_workflow_automation_proto_init() {
	if File_kepler_workflow_automation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kepler_workflow_automation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Automation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kepler_workflow_automation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kepler_workflow_automation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnChainCallTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kepler_workflow_automation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodABI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kepler_workflow_automation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kepler_workflow_automation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kepler_workflow_automation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockIntervalTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kepler_workflow_automation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kepler_workflow_automation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasLimitTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kepler_workflow_automation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kepler_workflow_automation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidUntilTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kepler_workflow_automation_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Trigger_OnChainCall)(nil),
		(*Trigger_Time)(nil),
		(*Trigger_GasLimit)(nil),
		(*Trigger_Count)(nil),
		(*Trigger_BlockInterval)(nil),
		(*Trigger_Schedule)(nil),
		(*Trigger_ValidUntil)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kepler_workflow_automation_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kepler_workflow_automation_proto_goTypes,
		DependencyIndexes: file_kepler_workflow_automation_proto_depIdxs,
		EnumInfos:         file_kepler_workflow_automation_proto_enumTypes,
		MessageInfos:      file_kepler_workflow_automation_proto_msgTypes,
	}.Build()
	File_kepler_workflow_automation_proto = out.File
	file_kepler_workflow_automation_proto_rawDesc = nil
	file_kepler_workflow_automation_proto_goTypes = nil
	file_kepler_workflow_automation_proto_depIdxs = nil
}
