// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: kepler/symbiotic/tx.proto

package symbiotic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName           = "/kepler.symbiotic.Msg/UpdateParams"
	Msg_CreateStakedAmountInfo_FullMethodName = "/kepler.symbiotic.Msg/CreateStakedAmountInfo"
	Msg_UpdateStakedAmountInfo_FullMethodName = "/kepler.symbiotic.Msg/UpdateStakedAmountInfo"
	Msg_DeleteStakedAmountInfo_FullMethodName = "/kepler.symbiotic.Msg/DeleteStakedAmountInfo"
	Msg_CreateContractAddress_FullMethodName  = "/kepler.symbiotic.Msg/CreateContractAddress"
	Msg_UpdateContractAddress_FullMethodName  = "/kepler.symbiotic.Msg/UpdateContractAddress"
	Msg_DeleteContractAddress_FullMethodName  = "/kepler.symbiotic.Msg/DeleteContractAddress"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateStakedAmountInfo(ctx context.Context, in *MsgCreateStakedAmountInfo, opts ...grpc.CallOption) (*MsgCreateStakedAmountInfoResponse, error)
	UpdateStakedAmountInfo(ctx context.Context, in *MsgUpdateStakedAmountInfo, opts ...grpc.CallOption) (*MsgUpdateStakedAmountInfoResponse, error)
	DeleteStakedAmountInfo(ctx context.Context, in *MsgDeleteStakedAmountInfo, opts ...grpc.CallOption) (*MsgDeleteStakedAmountInfoResponse, error)
	CreateContractAddress(ctx context.Context, in *MsgCreateContractAddress, opts ...grpc.CallOption) (*MsgCreateContractAddressResponse, error)
	UpdateContractAddress(ctx context.Context, in *MsgUpdateContractAddress, opts ...grpc.CallOption) (*MsgUpdateContractAddressResponse, error)
	DeleteContractAddress(ctx context.Context, in *MsgDeleteContractAddress, opts ...grpc.CallOption) (*MsgDeleteContractAddressResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateStakedAmountInfo(ctx context.Context, in *MsgCreateStakedAmountInfo, opts ...grpc.CallOption) (*MsgCreateStakedAmountInfoResponse, error) {
	out := new(MsgCreateStakedAmountInfoResponse)
	err := c.cc.Invoke(ctx, Msg_CreateStakedAmountInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateStakedAmountInfo(ctx context.Context, in *MsgUpdateStakedAmountInfo, opts ...grpc.CallOption) (*MsgUpdateStakedAmountInfoResponse, error) {
	out := new(MsgUpdateStakedAmountInfoResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateStakedAmountInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteStakedAmountInfo(ctx context.Context, in *MsgDeleteStakedAmountInfo, opts ...grpc.CallOption) (*MsgDeleteStakedAmountInfoResponse, error) {
	out := new(MsgDeleteStakedAmountInfoResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteStakedAmountInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateContractAddress(ctx context.Context, in *MsgCreateContractAddress, opts ...grpc.CallOption) (*MsgCreateContractAddressResponse, error) {
	out := new(MsgCreateContractAddressResponse)
	err := c.cc.Invoke(ctx, Msg_CreateContractAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateContractAddress(ctx context.Context, in *MsgUpdateContractAddress, opts ...grpc.CallOption) (*MsgUpdateContractAddressResponse, error) {
	out := new(MsgUpdateContractAddressResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateContractAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteContractAddress(ctx context.Context, in *MsgDeleteContractAddress, opts ...grpc.CallOption) (*MsgDeleteContractAddressResponse, error) {
	out := new(MsgDeleteContractAddressResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteContractAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateStakedAmountInfo(context.Context, *MsgCreateStakedAmountInfo) (*MsgCreateStakedAmountInfoResponse, error)
	UpdateStakedAmountInfo(context.Context, *MsgUpdateStakedAmountInfo) (*MsgUpdateStakedAmountInfoResponse, error)
	DeleteStakedAmountInfo(context.Context, *MsgDeleteStakedAmountInfo) (*MsgDeleteStakedAmountInfoResponse, error)
	CreateContractAddress(context.Context, *MsgCreateContractAddress) (*MsgCreateContractAddressResponse, error)
	UpdateContractAddress(context.Context, *MsgUpdateContractAddress) (*MsgUpdateContractAddressResponse, error)
	DeleteContractAddress(context.Context, *MsgDeleteContractAddress) (*MsgDeleteContractAddressResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreateStakedAmountInfo(context.Context, *MsgCreateStakedAmountInfo) (*MsgCreateStakedAmountInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStakedAmountInfo not implemented")
}
func (UnimplementedMsgServer) UpdateStakedAmountInfo(context.Context, *MsgUpdateStakedAmountInfo) (*MsgUpdateStakedAmountInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStakedAmountInfo not implemented")
}
func (UnimplementedMsgServer) DeleteStakedAmountInfo(context.Context, *MsgDeleteStakedAmountInfo) (*MsgDeleteStakedAmountInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStakedAmountInfo not implemented")
}
func (UnimplementedMsgServer) CreateContractAddress(context.Context, *MsgCreateContractAddress) (*MsgCreateContractAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContractAddress not implemented")
}
func (UnimplementedMsgServer) UpdateContractAddress(context.Context, *MsgUpdateContractAddress) (*MsgUpdateContractAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContractAddress not implemented")
}
func (UnimplementedMsgServer) DeleteContractAddress(context.Context, *MsgDeleteContractAddress) (*MsgDeleteContractAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContractAddress not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateStakedAmountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateStakedAmountInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateStakedAmountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateStakedAmountInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateStakedAmountInfo(ctx, req.(*MsgCreateStakedAmountInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateStakedAmountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateStakedAmountInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateStakedAmountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateStakedAmountInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateStakedAmountInfo(ctx, req.(*MsgUpdateStakedAmountInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteStakedAmountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteStakedAmountInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteStakedAmountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteStakedAmountInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteStakedAmountInfo(ctx, req.(*MsgDeleteStakedAmountInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateContractAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateContractAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateContractAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateContractAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateContractAddress(ctx, req.(*MsgCreateContractAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateContractAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateContractAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateContractAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateContractAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateContractAddress(ctx, req.(*MsgUpdateContractAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteContractAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteContractAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteContractAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteContractAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteContractAddress(ctx, req.(*MsgDeleteContractAddress))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kepler.symbiotic.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateStakedAmountInfo",
			Handler:    _Msg_CreateStakedAmountInfo_Handler,
		},
		{
			MethodName: "UpdateStakedAmountInfo",
			Handler:    _Msg_UpdateStakedAmountInfo_Handler,
		},
		{
			MethodName: "DeleteStakedAmountInfo",
			Handler:    _Msg_DeleteStakedAmountInfo_Handler,
		},
		{
			MethodName: "CreateContractAddress",
			Handler:    _Msg_CreateContractAddress_Handler,
		},
		{
			MethodName: "UpdateContractAddress",
			Handler:    _Msg_UpdateContractAddress_Handler,
		},
		{
			MethodName: "DeleteContractAddress",
			Handler:    _Msg_DeleteContractAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kepler/symbiotic/tx.proto",
}
