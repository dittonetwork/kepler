// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: kepler/alliance/tx.proto

package alliance

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName            = "/kepler.alliance.Msg/UpdateParams"
	Msg_AddEntropy_FullMethodName              = "/kepler.alliance.Msg/AddEntropy"
	Msg_CreateSharedEntropy_FullMethodName     = "/kepler.alliance.Msg/CreateSharedEntropy"
	Msg_UpdateSharedEntropy_FullMethodName     = "/kepler.alliance.Msg/UpdateSharedEntropy"
	Msg_DeleteSharedEntropy_FullMethodName     = "/kepler.alliance.Msg/DeleteSharedEntropy"
	Msg_CreateQuorumParams_FullMethodName      = "/kepler.alliance.Msg/CreateQuorumParams"
	Msg_UpdateQuorumParams_FullMethodName      = "/kepler.alliance.Msg/UpdateQuorumParams"
	Msg_DeleteQuorumParams_FullMethodName      = "/kepler.alliance.Msg/DeleteQuorumParams"
	Msg_CreateAlliancesTimeline_FullMethodName = "/kepler.alliance.Msg/CreateAlliancesTimeline"
	Msg_UpdateAlliancesTimeline_FullMethodName = "/kepler.alliance.Msg/UpdateAlliancesTimeline"
	Msg_DeleteAlliancesTimeline_FullMethodName = "/kepler.alliance.Msg/DeleteAlliancesTimeline"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	AddEntropy(ctx context.Context, in *MsgAddEntropy, opts ...grpc.CallOption) (*MsgAddEntropyResponse, error)
	CreateSharedEntropy(ctx context.Context, in *MsgCreateSharedEntropy, opts ...grpc.CallOption) (*MsgCreateSharedEntropyResponse, error)
	UpdateSharedEntropy(ctx context.Context, in *MsgUpdateSharedEntropy, opts ...grpc.CallOption) (*MsgUpdateSharedEntropyResponse, error)
	DeleteSharedEntropy(ctx context.Context, in *MsgDeleteSharedEntropy, opts ...grpc.CallOption) (*MsgDeleteSharedEntropyResponse, error)
	CreateQuorumParams(ctx context.Context, in *MsgCreateQuorumParams, opts ...grpc.CallOption) (*MsgCreateQuorumParamsResponse, error)
	UpdateQuorumParams(ctx context.Context, in *MsgUpdateQuorumParams, opts ...grpc.CallOption) (*MsgUpdateQuorumParamsResponse, error)
	DeleteQuorumParams(ctx context.Context, in *MsgDeleteQuorumParams, opts ...grpc.CallOption) (*MsgDeleteQuorumParamsResponse, error)
	CreateAlliancesTimeline(ctx context.Context, in *MsgCreateAlliancesTimeline, opts ...grpc.CallOption) (*MsgCreateAlliancesTimelineResponse, error)
	UpdateAlliancesTimeline(ctx context.Context, in *MsgUpdateAlliancesTimeline, opts ...grpc.CallOption) (*MsgUpdateAlliancesTimelineResponse, error)
	DeleteAlliancesTimeline(ctx context.Context, in *MsgDeleteAlliancesTimeline, opts ...grpc.CallOption) (*MsgDeleteAlliancesTimelineResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddEntropy(ctx context.Context, in *MsgAddEntropy, opts ...grpc.CallOption) (*MsgAddEntropyResponse, error) {
	out := new(MsgAddEntropyResponse)
	err := c.cc.Invoke(ctx, Msg_AddEntropy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateSharedEntropy(ctx context.Context, in *MsgCreateSharedEntropy, opts ...grpc.CallOption) (*MsgCreateSharedEntropyResponse, error) {
	out := new(MsgCreateSharedEntropyResponse)
	err := c.cc.Invoke(ctx, Msg_CreateSharedEntropy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSharedEntropy(ctx context.Context, in *MsgUpdateSharedEntropy, opts ...grpc.CallOption) (*MsgUpdateSharedEntropyResponse, error) {
	out := new(MsgUpdateSharedEntropyResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateSharedEntropy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteSharedEntropy(ctx context.Context, in *MsgDeleteSharedEntropy, opts ...grpc.CallOption) (*MsgDeleteSharedEntropyResponse, error) {
	out := new(MsgDeleteSharedEntropyResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteSharedEntropy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateQuorumParams(ctx context.Context, in *MsgCreateQuorumParams, opts ...grpc.CallOption) (*MsgCreateQuorumParamsResponse, error) {
	out := new(MsgCreateQuorumParamsResponse)
	err := c.cc.Invoke(ctx, Msg_CreateQuorumParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateQuorumParams(ctx context.Context, in *MsgUpdateQuorumParams, opts ...grpc.CallOption) (*MsgUpdateQuorumParamsResponse, error) {
	out := new(MsgUpdateQuorumParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateQuorumParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteQuorumParams(ctx context.Context, in *MsgDeleteQuorumParams, opts ...grpc.CallOption) (*MsgDeleteQuorumParamsResponse, error) {
	out := new(MsgDeleteQuorumParamsResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteQuorumParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateAlliancesTimeline(ctx context.Context, in *MsgCreateAlliancesTimeline, opts ...grpc.CallOption) (*MsgCreateAlliancesTimelineResponse, error) {
	out := new(MsgCreateAlliancesTimelineResponse)
	err := c.cc.Invoke(ctx, Msg_CreateAlliancesTimeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAlliancesTimeline(ctx context.Context, in *MsgUpdateAlliancesTimeline, opts ...grpc.CallOption) (*MsgUpdateAlliancesTimelineResponse, error) {
	out := new(MsgUpdateAlliancesTimelineResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateAlliancesTimeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteAlliancesTimeline(ctx context.Context, in *MsgDeleteAlliancesTimeline, opts ...grpc.CallOption) (*MsgDeleteAlliancesTimelineResponse, error) {
	out := new(MsgDeleteAlliancesTimelineResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteAlliancesTimeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	AddEntropy(context.Context, *MsgAddEntropy) (*MsgAddEntropyResponse, error)
	CreateSharedEntropy(context.Context, *MsgCreateSharedEntropy) (*MsgCreateSharedEntropyResponse, error)
	UpdateSharedEntropy(context.Context, *MsgUpdateSharedEntropy) (*MsgUpdateSharedEntropyResponse, error)
	DeleteSharedEntropy(context.Context, *MsgDeleteSharedEntropy) (*MsgDeleteSharedEntropyResponse, error)
	CreateQuorumParams(context.Context, *MsgCreateQuorumParams) (*MsgCreateQuorumParamsResponse, error)
	UpdateQuorumParams(context.Context, *MsgUpdateQuorumParams) (*MsgUpdateQuorumParamsResponse, error)
	DeleteQuorumParams(context.Context, *MsgDeleteQuorumParams) (*MsgDeleteQuorumParamsResponse, error)
	CreateAlliancesTimeline(context.Context, *MsgCreateAlliancesTimeline) (*MsgCreateAlliancesTimelineResponse, error)
	UpdateAlliancesTimeline(context.Context, *MsgUpdateAlliancesTimeline) (*MsgUpdateAlliancesTimelineResponse, error)
	DeleteAlliancesTimeline(context.Context, *MsgDeleteAlliancesTimeline) (*MsgDeleteAlliancesTimelineResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) AddEntropy(context.Context, *MsgAddEntropy) (*MsgAddEntropyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEntropy not implemented")
}
func (UnimplementedMsgServer) CreateSharedEntropy(context.Context, *MsgCreateSharedEntropy) (*MsgCreateSharedEntropyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSharedEntropy not implemented")
}
func (UnimplementedMsgServer) UpdateSharedEntropy(context.Context, *MsgUpdateSharedEntropy) (*MsgUpdateSharedEntropyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSharedEntropy not implemented")
}
func (UnimplementedMsgServer) DeleteSharedEntropy(context.Context, *MsgDeleteSharedEntropy) (*MsgDeleteSharedEntropyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSharedEntropy not implemented")
}
func (UnimplementedMsgServer) CreateQuorumParams(context.Context, *MsgCreateQuorumParams) (*MsgCreateQuorumParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuorumParams not implemented")
}
func (UnimplementedMsgServer) UpdateQuorumParams(context.Context, *MsgUpdateQuorumParams) (*MsgUpdateQuorumParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuorumParams not implemented")
}
func (UnimplementedMsgServer) DeleteQuorumParams(context.Context, *MsgDeleteQuorumParams) (*MsgDeleteQuorumParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuorumParams not implemented")
}
func (UnimplementedMsgServer) CreateAlliancesTimeline(context.Context, *MsgCreateAlliancesTimeline) (*MsgCreateAlliancesTimelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlliancesTimeline not implemented")
}
func (UnimplementedMsgServer) UpdateAlliancesTimeline(context.Context, *MsgUpdateAlliancesTimeline) (*MsgUpdateAlliancesTimelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlliancesTimeline not implemented")
}
func (UnimplementedMsgServer) DeleteAlliancesTimeline(context.Context, *MsgDeleteAlliancesTimeline) (*MsgDeleteAlliancesTimelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlliancesTimeline not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddEntropy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddEntropy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddEntropy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddEntropy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddEntropy(ctx, req.(*MsgAddEntropy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateSharedEntropy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSharedEntropy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSharedEntropy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateSharedEntropy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSharedEntropy(ctx, req.(*MsgCreateSharedEntropy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSharedEntropy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSharedEntropy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSharedEntropy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateSharedEntropy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSharedEntropy(ctx, req.(*MsgUpdateSharedEntropy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteSharedEntropy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteSharedEntropy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteSharedEntropy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteSharedEntropy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteSharedEntropy(ctx, req.(*MsgDeleteSharedEntropy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateQuorumParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateQuorumParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateQuorumParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateQuorumParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateQuorumParams(ctx, req.(*MsgCreateQuorumParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateQuorumParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateQuorumParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateQuorumParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateQuorumParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateQuorumParams(ctx, req.(*MsgUpdateQuorumParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteQuorumParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteQuorumParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteQuorumParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteQuorumParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteQuorumParams(ctx, req.(*MsgDeleteQuorumParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateAlliancesTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateAlliancesTimeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateAlliancesTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateAlliancesTimeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateAlliancesTimeline(ctx, req.(*MsgCreateAlliancesTimeline))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAlliancesTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAlliancesTimeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAlliancesTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateAlliancesTimeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAlliancesTimeline(ctx, req.(*MsgUpdateAlliancesTimeline))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteAlliancesTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteAlliancesTimeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteAlliancesTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteAlliancesTimeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteAlliancesTimeline(ctx, req.(*MsgDeleteAlliancesTimeline))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kepler.alliance.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "AddEntropy",
			Handler:    _Msg_AddEntropy_Handler,
		},
		{
			MethodName: "CreateSharedEntropy",
			Handler:    _Msg_CreateSharedEntropy_Handler,
		},
		{
			MethodName: "UpdateSharedEntropy",
			Handler:    _Msg_UpdateSharedEntropy_Handler,
		},
		{
			MethodName: "DeleteSharedEntropy",
			Handler:    _Msg_DeleteSharedEntropy_Handler,
		},
		{
			MethodName: "CreateQuorumParams",
			Handler:    _Msg_CreateQuorumParams_Handler,
		},
		{
			MethodName: "UpdateQuorumParams",
			Handler:    _Msg_UpdateQuorumParams_Handler,
		},
		{
			MethodName: "DeleteQuorumParams",
			Handler:    _Msg_DeleteQuorumParams_Handler,
		},
		{
			MethodName: "CreateAlliancesTimeline",
			Handler:    _Msg_CreateAlliancesTimeline_Handler,
		},
		{
			MethodName: "UpdateAlliancesTimeline",
			Handler:    _Msg_UpdateAlliancesTimeline_Handler,
		},
		{
			MethodName: "DeleteAlliancesTimeline",
			Handler:    _Msg_DeleteAlliancesTimeline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kepler/alliance/tx.proto",
}
