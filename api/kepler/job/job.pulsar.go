// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package job

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_Job_10_list)(nil)

type _Job_10_list struct {
	list *[][]byte
}

func (x *_Job_10_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Job_10_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBytes((*x.list)[i])
}

func (x *_Job_10_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Job_10_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Job_10_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Job at list field Signs as it is not of Message kind"))
}

func (x *_Job_10_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Job_10_list) NewElement() protoreflect.Value {
	var v []byte
	return protoreflect.ValueOfBytes(v)
}

func (x *_Job_10_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Job                  protoreflect.MessageDescriptor
	fd_Job_id               protoreflect.FieldDescriptor
	fd_Job_status           protoreflect.FieldDescriptor
	fd_Job_chain_id         protoreflect.FieldDescriptor
	fd_Job_automation_id    protoreflect.FieldDescriptor
	fd_Job_instant_job_id   protoreflect.FieldDescriptor
	fd_Job_tx_hash          protoreflect.FieldDescriptor
	fd_Job_metadata         protoreflect.FieldDescriptor
	fd_Job_executor_address protoreflect.FieldDescriptor
	fd_Job_epoch_id         protoreflect.FieldDescriptor
	fd_Job_signs            protoreflect.FieldDescriptor
	fd_Job_created_at       protoreflect.FieldDescriptor
	fd_Job_executed_at      protoreflect.FieldDescriptor
	fd_Job_signed_at        protoreflect.FieldDescriptor
)

func init() {
	file_kepler_job_job_proto_init()
	md_Job = File_kepler_job_job_proto.Messages().ByName("Job")
	fd_Job_id = md_Job.Fields().ByName("id")
	fd_Job_status = md_Job.Fields().ByName("status")
	fd_Job_chain_id = md_Job.Fields().ByName("chain_id")
	fd_Job_automation_id = md_Job.Fields().ByName("automation_id")
	fd_Job_instant_job_id = md_Job.Fields().ByName("instant_job_id")
	fd_Job_tx_hash = md_Job.Fields().ByName("tx_hash")
	fd_Job_metadata = md_Job.Fields().ByName("metadata")
	fd_Job_executor_address = md_Job.Fields().ByName("executor_address")
	fd_Job_epoch_id = md_Job.Fields().ByName("epoch_id")
	fd_Job_signs = md_Job.Fields().ByName("signs")
	fd_Job_created_at = md_Job.Fields().ByName("created_at")
	fd_Job_executed_at = md_Job.Fields().ByName("executed_at")
	fd_Job_signed_at = md_Job.Fields().ByName("signed_at")
}

var _ protoreflect.Message = (*fastReflection_Job)(nil)

type fastReflection_Job Job

func (x *Job) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Job)(x)
}

func (x *Job) slowProtoReflect() protoreflect.Message {
	mi := &file_kepler_job_job_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Job_messageType fastReflection_Job_messageType
var _ protoreflect.MessageType = fastReflection_Job_messageType{}

type fastReflection_Job_messageType struct{}

func (x fastReflection_Job_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Job)(nil)
}
func (x fastReflection_Job_messageType) New() protoreflect.Message {
	return new(fastReflection_Job)
}
func (x fastReflection_Job_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Job
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Job) Descriptor() protoreflect.MessageDescriptor {
	return md_Job
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Job) Type() protoreflect.MessageType {
	return _fastReflection_Job_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Job) New() protoreflect.Message {
	return new(fastReflection_Job)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Job) Interface() protoreflect.ProtoMessage {
	return (*Job)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Job) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_Job_id, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_Job_status, value) {
			return
		}
	}
	if x.ChainId != "" {
		value := protoreflect.ValueOfString(x.ChainId)
		if !f(fd_Job_chain_id, value) {
			return
		}
	}
	if x.AutomationId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.AutomationId)
		if !f(fd_Job_automation_id, value) {
			return
		}
	}
	if x.InstantJobId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.InstantJobId)
		if !f(fd_Job_instant_job_id, value) {
			return
		}
	}
	if x.TxHash != "" {
		value := protoreflect.ValueOfString(x.TxHash)
		if !f(fd_Job_tx_hash, value) {
			return
		}
	}
	if len(x.Metadata) != 0 {
		value := protoreflect.ValueOfBytes(x.Metadata)
		if !f(fd_Job_metadata, value) {
			return
		}
	}
	if x.ExecutorAddress != "" {
		value := protoreflect.ValueOfString(x.ExecutorAddress)
		if !f(fd_Job_executor_address, value) {
			return
		}
	}
	if x.EpochId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EpochId)
		if !f(fd_Job_epoch_id, value) {
			return
		}
	}
	if len(x.Signs) != 0 {
		value := protoreflect.ValueOfList(&_Job_10_list{list: &x.Signs})
		if !f(fd_Job_signs, value) {
			return
		}
	}
	if x.CreatedAt != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CreatedAt)
		if !f(fd_Job_created_at, value) {
			return
		}
	}
	if x.ExecutedAt != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ExecutedAt)
		if !f(fd_Job_executed_at, value) {
			return
		}
	}
	if x.SignedAt != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SignedAt)
		if !f(fd_Job_signed_at, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Job) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kepler.job.Job.id":
		return x.Id != uint64(0)
	case "kepler.job.Job.status":
		return x.Status != 0
	case "kepler.job.Job.chain_id":
		return x.ChainId != ""
	case "kepler.job.Job.automation_id":
		return x.AutomationId != uint64(0)
	case "kepler.job.Job.instant_job_id":
		return x.InstantJobId != uint64(0)
	case "kepler.job.Job.tx_hash":
		return x.TxHash != ""
	case "kepler.job.Job.metadata":
		return len(x.Metadata) != 0
	case "kepler.job.Job.executor_address":
		return x.ExecutorAddress != ""
	case "kepler.job.Job.epoch_id":
		return x.EpochId != uint64(0)
	case "kepler.job.Job.signs":
		return len(x.Signs) != 0
	case "kepler.job.Job.created_at":
		return x.CreatedAt != uint64(0)
	case "kepler.job.Job.executed_at":
		return x.ExecutedAt != uint64(0)
	case "kepler.job.Job.signed_at":
		return x.SignedAt != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.job.Job"))
		}
		panic(fmt.Errorf("message kepler.job.Job does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Job) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kepler.job.Job.id":
		x.Id = uint64(0)
	case "kepler.job.Job.status":
		x.Status = 0
	case "kepler.job.Job.chain_id":
		x.ChainId = ""
	case "kepler.job.Job.automation_id":
		x.AutomationId = uint64(0)
	case "kepler.job.Job.instant_job_id":
		x.InstantJobId = uint64(0)
	case "kepler.job.Job.tx_hash":
		x.TxHash = ""
	case "kepler.job.Job.metadata":
		x.Metadata = nil
	case "kepler.job.Job.executor_address":
		x.ExecutorAddress = ""
	case "kepler.job.Job.epoch_id":
		x.EpochId = uint64(0)
	case "kepler.job.Job.signs":
		x.Signs = nil
	case "kepler.job.Job.created_at":
		x.CreatedAt = uint64(0)
	case "kepler.job.Job.executed_at":
		x.ExecutedAt = uint64(0)
	case "kepler.job.Job.signed_at":
		x.SignedAt = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.job.Job"))
		}
		panic(fmt.Errorf("message kepler.job.Job does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Job) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kepler.job.Job.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "kepler.job.Job.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "kepler.job.Job.chain_id":
		value := x.ChainId
		return protoreflect.ValueOfString(value)
	case "kepler.job.Job.automation_id":
		value := x.AutomationId
		return protoreflect.ValueOfUint64(value)
	case "kepler.job.Job.instant_job_id":
		value := x.InstantJobId
		return protoreflect.ValueOfUint64(value)
	case "kepler.job.Job.tx_hash":
		value := x.TxHash
		return protoreflect.ValueOfString(value)
	case "kepler.job.Job.metadata":
		value := x.Metadata
		return protoreflect.ValueOfBytes(value)
	case "kepler.job.Job.executor_address":
		value := x.ExecutorAddress
		return protoreflect.ValueOfString(value)
	case "kepler.job.Job.epoch_id":
		value := x.EpochId
		return protoreflect.ValueOfUint64(value)
	case "kepler.job.Job.signs":
		if len(x.Signs) == 0 {
			return protoreflect.ValueOfList(&_Job_10_list{})
		}
		listValue := &_Job_10_list{list: &x.Signs}
		return protoreflect.ValueOfList(listValue)
	case "kepler.job.Job.created_at":
		value := x.CreatedAt
		return protoreflect.ValueOfUint64(value)
	case "kepler.job.Job.executed_at":
		value := x.ExecutedAt
		return protoreflect.ValueOfUint64(value)
	case "kepler.job.Job.signed_at":
		value := x.SignedAt
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.job.Job"))
		}
		panic(fmt.Errorf("message kepler.job.Job does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Job) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kepler.job.Job.id":
		x.Id = value.Uint()
	case "kepler.job.Job.status":
		x.Status = (Job_Status)(value.Enum())
	case "kepler.job.Job.chain_id":
		x.ChainId = value.Interface().(string)
	case "kepler.job.Job.automation_id":
		x.AutomationId = value.Uint()
	case "kepler.job.Job.instant_job_id":
		x.InstantJobId = value.Uint()
	case "kepler.job.Job.tx_hash":
		x.TxHash = value.Interface().(string)
	case "kepler.job.Job.metadata":
		x.Metadata = value.Bytes()
	case "kepler.job.Job.executor_address":
		x.ExecutorAddress = value.Interface().(string)
	case "kepler.job.Job.epoch_id":
		x.EpochId = value.Uint()
	case "kepler.job.Job.signs":
		lv := value.List()
		clv := lv.(*_Job_10_list)
		x.Signs = *clv.list
	case "kepler.job.Job.created_at":
		x.CreatedAt = value.Uint()
	case "kepler.job.Job.executed_at":
		x.ExecutedAt = value.Uint()
	case "kepler.job.Job.signed_at":
		x.SignedAt = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.job.Job"))
		}
		panic(fmt.Errorf("message kepler.job.Job does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Job) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kepler.job.Job.signs":
		if x.Signs == nil {
			x.Signs = [][]byte{}
		}
		value := &_Job_10_list{list: &x.Signs}
		return protoreflect.ValueOfList(value)
	case "kepler.job.Job.id":
		panic(fmt.Errorf("field id of message kepler.job.Job is not mutable"))
	case "kepler.job.Job.status":
		panic(fmt.Errorf("field status of message kepler.job.Job is not mutable"))
	case "kepler.job.Job.chain_id":
		panic(fmt.Errorf("field chain_id of message kepler.job.Job is not mutable"))
	case "kepler.job.Job.automation_id":
		panic(fmt.Errorf("field automation_id of message kepler.job.Job is not mutable"))
	case "kepler.job.Job.instant_job_id":
		panic(fmt.Errorf("field instant_job_id of message kepler.job.Job is not mutable"))
	case "kepler.job.Job.tx_hash":
		panic(fmt.Errorf("field tx_hash of message kepler.job.Job is not mutable"))
	case "kepler.job.Job.metadata":
		panic(fmt.Errorf("field metadata of message kepler.job.Job is not mutable"))
	case "kepler.job.Job.executor_address":
		panic(fmt.Errorf("field executor_address of message kepler.job.Job is not mutable"))
	case "kepler.job.Job.epoch_id":
		panic(fmt.Errorf("field epoch_id of message kepler.job.Job is not mutable"))
	case "kepler.job.Job.created_at":
		panic(fmt.Errorf("field created_at of message kepler.job.Job is not mutable"))
	case "kepler.job.Job.executed_at":
		panic(fmt.Errorf("field executed_at of message kepler.job.Job is not mutable"))
	case "kepler.job.Job.signed_at":
		panic(fmt.Errorf("field signed_at of message kepler.job.Job is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.job.Job"))
		}
		panic(fmt.Errorf("message kepler.job.Job does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Job) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kepler.job.Job.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kepler.job.Job.status":
		return protoreflect.ValueOfEnum(0)
	case "kepler.job.Job.chain_id":
		return protoreflect.ValueOfString("")
	case "kepler.job.Job.automation_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kepler.job.Job.instant_job_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kepler.job.Job.tx_hash":
		return protoreflect.ValueOfString("")
	case "kepler.job.Job.metadata":
		return protoreflect.ValueOfBytes(nil)
	case "kepler.job.Job.executor_address":
		return protoreflect.ValueOfString("")
	case "kepler.job.Job.epoch_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kepler.job.Job.signs":
		list := [][]byte{}
		return protoreflect.ValueOfList(&_Job_10_list{list: &list})
	case "kepler.job.Job.created_at":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kepler.job.Job.executed_at":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kepler.job.Job.signed_at":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kepler.job.Job"))
		}
		panic(fmt.Errorf("message kepler.job.Job does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Job) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kepler.job.Job", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Job) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Job) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Job) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Job) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Job)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		l = len(x.ChainId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.AutomationId != 0 {
			n += 1 + runtime.Sov(uint64(x.AutomationId))
		}
		if x.InstantJobId != 0 {
			n += 1 + runtime.Sov(uint64(x.InstantJobId))
		}
		l = len(x.TxHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Metadata)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ExecutorAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.EpochId != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochId))
		}
		if len(x.Signs) > 0 {
			for _, b := range x.Signs {
				l = len(b)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.CreatedAt != 0 {
			n += 1 + runtime.Sov(uint64(x.CreatedAt))
		}
		if x.ExecutedAt != 0 {
			n += 1 + runtime.Sov(uint64(x.ExecutedAt))
		}
		if x.SignedAt != 0 {
			n += 1 + runtime.Sov(uint64(x.SignedAt))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Job)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.SignedAt != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SignedAt))
			i--
			dAtA[i] = 0x68
		}
		if x.ExecutedAt != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ExecutedAt))
			i--
			dAtA[i] = 0x60
		}
		if x.CreatedAt != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CreatedAt))
			i--
			dAtA[i] = 0x58
		}
		if len(x.Signs) > 0 {
			for iNdEx := len(x.Signs) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Signs[iNdEx])
				copy(dAtA[i:], x.Signs[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Signs[iNdEx])))
				i--
				dAtA[i] = 0x52
			}
		}
		if x.EpochId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochId))
			i--
			dAtA[i] = 0x48
		}
		if len(x.ExecutorAddress) > 0 {
			i -= len(x.ExecutorAddress)
			copy(dAtA[i:], x.ExecutorAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ExecutorAddress)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.Metadata) > 0 {
			i -= len(x.Metadata)
			copy(dAtA[i:], x.Metadata)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Metadata)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.TxHash) > 0 {
			i -= len(x.TxHash)
			copy(dAtA[i:], x.TxHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TxHash)))
			i--
			dAtA[i] = 0x32
		}
		if x.InstantJobId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.InstantJobId))
			i--
			dAtA[i] = 0x28
		}
		if x.AutomationId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AutomationId))
			i--
			dAtA[i] = 0x20
		}
		if len(x.ChainId) > 0 {
			i -= len(x.ChainId)
			copy(dAtA[i:], x.ChainId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ChainId)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x10
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Job)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Job: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Job: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= Job_Status(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ChainId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AutomationId", wireType)
				}
				x.AutomationId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AutomationId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InstantJobId", wireType)
				}
				x.InstantJobId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.InstantJobId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TxHash = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Metadata = append(x.Metadata[:0], dAtA[iNdEx:postIndex]...)
				if x.Metadata == nil {
					x.Metadata = []byte{}
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExecutorAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ExecutorAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
				}
				x.EpochId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Signs", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Signs = append(x.Signs, make([]byte, postIndex-iNdEx))
				copy(x.Signs[len(x.Signs)-1], dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
				}
				x.CreatedAt = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CreatedAt |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExecutedAt", wireType)
				}
				x.ExecutedAt = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ExecutedAt |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SignedAt", wireType)
				}
				x.SignedAt = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SignedAt |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: kepler/job/job.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// job result status
type Job_Status int32

const (
	// unknown status
	Job_STATUS_UNSPECIFIED Job_Status = 0
	// succeed status
	Job_STATUS_EXECUTED Job_Status = 1
	// failed status
	Job_STATUS_FAILED Job_Status = 2
	// invalid status. means that smth wrong happened and committee didnt sign it
	Job_STATUS_INVALID Job_Status = 3
)

// Enum value maps for Job_Status.
var (
	Job_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_EXECUTED",
		2: "STATUS_FAILED",
		3: "STATUS_INVALID",
	}
	Job_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_EXECUTED":    1,
		"STATUS_FAILED":      2,
		"STATUS_INVALID":     3,
	}
)

func (x Job_Status) Enum() *Job_Status {
	p := new(Job_Status)
	*p = x
	return p
}

func (x Job_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Job_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_kepler_job_job_proto_enumTypes[0].Descriptor()
}

func (Job_Status) Type() protoreflect.EnumType {
	return &file_kepler_job_job_proto_enumTypes[0]
}

func (x Job_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Job_Status.Descriptor instead.
func (Job_Status) EnumDescriptor() ([]byte, []int) {
	return file_kepler_job_job_proto_rawDescGZIP(), []int{0, 0}
}

// Job structure
type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// job id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// job status
	Status Job_Status `protobuf:"varint,2,opt,name=status,proto3,enum=kepler.job.Job_Status" json:"status,omitempty"`
	// target chain id
	ChainId string `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// presented if job was created by automation workflow
	AutomationId uint64 `protobuf:"varint,4,opt,name=automation_id,json=automationId,proto3" json:"automation_id,omitempty"`
	// presented if job was created by instant module
	InstantJobId uint64 `protobuf:"varint,5,opt,name=instant_job_id,json=instantJobId,proto3" json:"instant_job_id,omitempty"`
	// presented if job was successful
	TxHash string `protobuf:"bytes,6,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// additional info about reason of failure etc
	Metadata []byte `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// address of executor
	ExecutorAddress string `protobuf:"bytes,8,opt,name=executor_address,json=executorAddress,proto3" json:"executor_address,omitempty"`
	// epoch when job was created
	EpochId uint64 `protobuf:"varint,9,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	// signs of committee participants
	Signs [][]byte `protobuf:"bytes,10,rep,name=signs,proto3" json:"signs,omitempty"`
	// unix seconds time when created
	CreatedAt uint64 `protobuf:"varint,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// unix seconds time when executed or failed
	ExecutedAt uint64 `protobuf:"varint,12,opt,name=executed_at,json=executedAt,proto3" json:"executed_at,omitempty"`
	// unix seconds time when signed
	SignedAt uint64 `protobuf:"varint,13,opt,name=signed_at,json=signedAt,proto3" json:"signed_at,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kepler_job_job_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_kepler_job_job_proto_rawDescGZIP(), []int{0}
}

func (x *Job) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Job) GetStatus() Job_Status {
	if x != nil {
		return x.Status
	}
	return Job_STATUS_UNSPECIFIED
}

func (x *Job) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *Job) GetAutomationId() uint64 {
	if x != nil {
		return x.AutomationId
	}
	return 0
}

func (x *Job) GetInstantJobId() uint64 {
	if x != nil {
		return x.InstantJobId
	}
	return 0
}

func (x *Job) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *Job) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Job) GetExecutorAddress() string {
	if x != nil {
		return x.ExecutorAddress
	}
	return ""
}

func (x *Job) GetEpochId() uint64 {
	if x != nil {
		return x.EpochId
	}
	return 0
}

func (x *Job) GetSigns() [][]byte {
	if x != nil {
		return x.Signs
	}
	return nil
}

func (x *Job) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Job) GetExecutedAt() uint64 {
	if x != nil {
		return x.ExecutedAt
	}
	return 0
}

func (x *Job) GetSignedAt() uint64 {
	if x != nil {
		return x.SignedAt
	}
	return 0
}

var File_kepler_job_job_proto protoreflect.FileDescriptor

var file_kepler_job_job_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6b, 0x65, 0x70, 0x6c, 0x65, 0x72, 0x2f, 0x6a, 0x6f, 0x62, 0x2f, 0x6a, 0x6f, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6b, 0x65, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6a,
	0x6f, 0x62, 0x22, 0xf7, 0x03, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6b, 0x65, 0x70,
	0x6c, 0x65, 0x72, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4a, 0x6f, 0x62, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x69, 0x67, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x69, 0x67, 0x6e,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x22, 0x5c,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x03, 0x42, 0x7a, 0x0a, 0x0e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x65, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6a, 0x6f, 0x62, 0x42, 0x08,
	0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x15, 0x6b, 0x65, 0x70, 0x6c,
	0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6b, 0x65, 0x70, 0x6c, 0x65, 0x72, 0x2f, 0x6a, 0x6f,
	0x62, 0xa2, 0x02, 0x03, 0x4b, 0x4a, 0x58, 0xaa, 0x02, 0x0a, 0x4b, 0x65, 0x70, 0x6c, 0x65, 0x72,
	0x2e, 0x4a, 0x6f, 0x62, 0xca, 0x02, 0x0a, 0x4b, 0x65, 0x70, 0x6c, 0x65, 0x72, 0x5c, 0x4a, 0x6f,
	0x62, 0xe2, 0x02, 0x16, 0x4b, 0x65, 0x70, 0x6c, 0x65, 0x72, 0x5c, 0x4a, 0x6f, 0x62, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0b, 0x4b, 0x65, 0x70,
	0x6c, 0x65, 0x72, 0x3a, 0x3a, 0x4a, 0x6f, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kepler_job_job_proto_rawDescOnce sync.Once
	file_kepler_job_job_proto_rawDescData = file_kepler_job_job_proto_rawDesc
)

func file_kepler_job_job_proto_rawDescGZIP() []byte {
	file_kepler_job_job_proto_rawDescOnce.Do(func() {
		file_kepler_job_job_proto_rawDescData = protoimpl.X.CompressGZIP(file_kepler_job_job_proto_rawDescData)
	})
	return file_kepler_job_job_proto_rawDescData
}

var file_kepler_job_job_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kepler_job_job_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_kepler_job_job_proto_goTypes = []interface{}{
	(Job_Status)(0), // 0: kepler.job.Job.Status
	(*Job)(nil),     // 1: kepler.job.Job
}
var file_kepler_job_job_proto_depIdxs = []int32{
	0, // 0: kepler.job.Job.status:type_name -> kepler.job.Job.Status
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_kepler_job_job_proto_init() }
func file_kepler_job_job_proto_init() {
	if File_kepler_job_job_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kepler_job_job_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kepler_job_job_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kepler_job_job_proto_goTypes,
		DependencyIndexes: file_kepler_job_job_proto_depIdxs,
		EnumInfos:         file_kepler_job_job_proto_enumTypes,
		MessageInfos:      file_kepler_job_job_proto_msgTypes,
	}.Build()
	File_kepler_job_job_proto = out.File
	file_kepler_job_job_proto_rawDesc = nil
	file_kepler_job_job_proto_goTypes = nil
	file_kepler_job_job_proto_depIdxs = nil
}
