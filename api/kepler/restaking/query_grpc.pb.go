// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: kepler/restaking/query.proto

package restaking

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Query_PendingOperators_FullMethodName     = "/kepler.restaking.Query/PendingOperators"
	Query_Validators_FullMethodName           = "/kepler.restaking.Query/Validators"
	Query_NeedValidatorsUpdate_FullMethodName = "/kepler.restaking.Query/NeedValidatorsUpdate"
	Query_OperatorStatus_FullMethodName       = "/kepler.restaking.Query/OperatorStatus"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Query defines the gRPC querier service.
type QueryClient interface {
	// PendingValidators returns currently pending validators of the module.
	PendingOperators(ctx context.Context, in *QueryPendingOperatorsRequest, opts ...grpc.CallOption) (*QueryPendingOperatorsResponse, error)
	// Retrieve a list of all validators.
	Validators(ctx context.Context, in *QueryValidatorsRequest, opts ...grpc.CallOption) (*QueryValidatorsResponse, error)
	// Return true if need update validators set
	NeedValidatorsUpdate(ctx context.Context, in *QueryNeedValidatorsUpdateRequest, opts ...grpc.CallOption) (*QueryNeedValidatorsUpdateResponse, error)
	// Retrieve the status of a validator by its operator address.
	OperatorStatus(ctx context.Context, in *QueryOperatorStatusRequest, opts ...grpc.CallOption) (*QueryOperatorStatusResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) PendingOperators(ctx context.Context, in *QueryPendingOperatorsRequest, opts ...grpc.CallOption) (*QueryPendingOperatorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPendingOperatorsResponse)
	err := c.cc.Invoke(ctx, Query_PendingOperators_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Validators(ctx context.Context, in *QueryValidatorsRequest, opts ...grpc.CallOption) (*QueryValidatorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryValidatorsResponse)
	err := c.cc.Invoke(ctx, Query_Validators_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NeedValidatorsUpdate(ctx context.Context, in *QueryNeedValidatorsUpdateRequest, opts ...grpc.CallOption) (*QueryNeedValidatorsUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryNeedValidatorsUpdateResponse)
	err := c.cc.Invoke(ctx, Query_NeedValidatorsUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OperatorStatus(ctx context.Context, in *QueryOperatorStatusRequest, opts ...grpc.CallOption) (*QueryOperatorStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryOperatorStatusResponse)
	err := c.cc.Invoke(ctx, Query_OperatorStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility.
//
// Query defines the gRPC querier service.
type QueryServer interface {
	// PendingValidators returns currently pending validators of the module.
	PendingOperators(context.Context, *QueryPendingOperatorsRequest) (*QueryPendingOperatorsResponse, error)
	// Retrieve a list of all validators.
	Validators(context.Context, *QueryValidatorsRequest) (*QueryValidatorsResponse, error)
	// Return true if need update validators set
	NeedValidatorsUpdate(context.Context, *QueryNeedValidatorsUpdateRequest) (*QueryNeedValidatorsUpdateResponse, error)
	// Retrieve the status of a validator by its operator address.
	OperatorStatus(context.Context, *QueryOperatorStatusRequest) (*QueryOperatorStatusResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryServer struct{}

func (UnimplementedQueryServer) PendingOperators(context.Context, *QueryPendingOperatorsRequest) (*QueryPendingOperatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingOperators not implemented")
}
func (UnimplementedQueryServer) Validators(context.Context, *QueryValidatorsRequest) (*QueryValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validators not implemented")
}
func (UnimplementedQueryServer) NeedValidatorsUpdate(context.Context, *QueryNeedValidatorsUpdateRequest) (*QueryNeedValidatorsUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NeedValidatorsUpdate not implemented")
}
func (UnimplementedQueryServer) OperatorStatus(context.Context, *QueryOperatorStatusRequest) (*QueryOperatorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorStatus not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}
func (UnimplementedQueryServer) testEmbeddedByValue()               {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	// If the following call pancis, it indicates UnimplementedQueryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_PendingOperators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingOperatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingOperators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PendingOperators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingOperators(ctx, req.(*QueryPendingOperatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Validators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Validators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Validators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Validators(ctx, req.(*QueryValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NeedValidatorsUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNeedValidatorsUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NeedValidatorsUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_NeedValidatorsUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NeedValidatorsUpdate(ctx, req.(*QueryNeedValidatorsUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OperatorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OperatorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OperatorStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OperatorStatus(ctx, req.(*QueryOperatorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kepler.restaking.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PendingOperators",
			Handler:    _Query_PendingOperators_Handler,
		},
		{
			MethodName: "Validators",
			Handler:    _Query_Validators_Handler,
		},
		{
			MethodName: "NeedValidatorsUpdate",
			Handler:    _Query_NeedValidatorsUpdate_Handler,
		},
		{
			MethodName: "OperatorStatus",
			Handler:    _Query_OperatorStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kepler/restaking/query.proto",
}
