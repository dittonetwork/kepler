syntax = "proto3";
package kepler.executors;

import "amino/amino.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "kepler/executors/executor.proto";
import "kepler/executors/params.proto";

option go_package = "github.com/dittonetwork/kepler/x/executors/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/dittonetwork/kepler/executors/params";
  }
  // GetActiveExecutors returns active executors.
  rpc GetActiveExecutors(QueryActiveExecutorsRequest) returns (QueryActiveExecutorsResponse);
  // GetEmergencyExecutors returns a list of emergency executors. They are also active.
  rpc GetEmergencyExecutors(QueryEmergencyExecutorsRequest) returns (QueryEmergencyExecutorsResponse);
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// QueryExecutorsRequest defines a request to fetch all active executors.
message QueryActiveExecutorsRequest {}

message QueryActiveExecutorsResponse {
  // executors list of active executors.
  repeated Executor executors = 1;
}

// QueryEmergencyExecutorsRequest defines a request to fetch emergency executors.
message QueryEmergencyExecutorsRequest {}

message QueryEmergencyExecutorsResponse {
  // executors list of emergency executors.
  repeated Executor executors = 1;
}
