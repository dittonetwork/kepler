syntax = "proto3";
package kepler.xstaking.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

import "amino/amino.proto";

option go_package = "kepler/x/xstaking/types";

// Description defines a validator description.
message Description {
  option (gogoproto.equal) = true;

  // moniker defines a human-readable name for the validator.
  string moniker = 1;
  // identity defines an optional identity signature (ex. UPort or Keybase).
  string identity = 2;
  // website defines an optional website link.
  string website = 3;
  // security_contact defines an optional email for security contact.
  string security_contact = 4;
  // details define other optional details.
  string details = 5;
  // metadata defines extra information about the validator.
  Metadata metadata = 6 [(gogoproto.nullable) = true, (amino.dont_omitempty) = false];
}

// Metadata defines extra information about the validator.
message Metadata {
  option (gogoproto.equal) = true;

  // profile_pic_uri defines a link to the validator profile picture.
  string profile_pic_uri = 1;

  // social_handle_uris defines a string array of uris to the validator's social handles.
  repeated string social_handle_uris = 2;
}

// Validator defines a validator
message Validator {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  /// operator_address defines the address of the validator's operator; bech encoded in JSON.
  string operator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // consensus_pubkey is the consensus public key of the validator, as a Protobuf Any.
  google.protobuf.Any consensus_pubkey = 2 [(cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey"];

  // jailed defined whether the validator has been jailed
  bool jailed = 3;

  // status is the validator status (bonded/unbonding/unbonded/bonding)
  BondStatus status = 4;

  // tokens is abstract tokens converted from external real token in ethereum
  string tokens = 5 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];

  // Description describes the validator.
  Description description = 6 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];

  int64 unbonding_height = 7;

  // unbonding_time is the unix timestamp for unbonding time
  google.protobuf.Timestamp unbonding_time = 8
      [(gogoproto.nullable) = false, (amino.dont_omitempty) = true, (gogoproto.stdtime) = true];

}

// BondStatus is the status of a validator
enum BondStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  // UNSPECIFIED defines an invalid validator status.
  BOND_STATUS_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "Unspecified"];

  // UNBONDED defines a validator that is not bonded.
  BOND_STATUS_UNBONDED = 1 [(gogoproto.enumvalue_customname) = "Unbonded"];

  // UNBONDING defines a validator that is unbonding.
  BOND_STATUS_UNBONDING = 2 [(gogoproto.enumvalue_customname) = "Unbonding"];

  // BONDED defines a validator that is bonded.
  BOND_STATUS_BONDED = 3 [(gogoproto.enumvalue_customname) = "Bonded"];

  // BONDING defines a validator registered in Restaking Protocol but not active in Kepler
  BOND_STATUS_BONDING = 4 [(gogoproto.enumvalue_customname) = "Bonding"];
}

// ValAddressesOfRotatedConsKeys contains the array of validator addresses which rotated their keys
// This is to block the validator's next rotation till unbonding period.
message ValAddressesOfRotatedConsKeys {
  repeated bytes addresses = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}


// ConsPubKeyRotationHistory contains a validator's consensus public key rotation history.
message ConsPubKeyRotationHistory {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // operator_address defines the address of the validator's operator; bech encoded in JSON.
  bytes operator_address = 1;
  // old_cons_pubkey is the old consensus public key of the validator, as a Protobuf Any.
  google.protobuf.Any old_cons_pubkey = 2 [(cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey"];
  // new_cons_pubkey is the new consensus public key of the validator, as a Protobuf Any.
  google.protobuf.Any new_cons_pubkey = 3 [(cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey"];
  // height defines the block height at which the rotation event occurred.
  uint64 height = 4;
}