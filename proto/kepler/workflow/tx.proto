syntax = "proto3";

package kepler.workflow;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "kepler/workflow/automation.proto";
import "kepler/workflow/params.proto";

option go_package = "github.com/dittonetwork/kepler/x/workflow/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  rpc AddAutomation(MsgAddAutomation) returns (MsgAddAutomationResponse);
  rpc CancelAutomation(MsgCancelAutomation) returns (MsgCancelAutomationResponse);
  rpc ActivateAutomation(MsgActivateAutomation) returns (MsgActivateAutomationResponse);
  rpc SubmitJobResult(MsgSubmitJobResult) returns (MsgSubmitJobResultResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "github.com/dittonetwork/kepler/x/workflow/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.

  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgAddAutomation {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  // Trigger object, which can be chained by logical operators in itself
  repeated Trigger triggers = 2;
  // User operation
  UserOp user_op = 3;
}

message MsgAddAutomationResponse {
  uint64 id = 1;
}

message CancelByCommittee {
  // job executors committee id
  string committee_id = 1;
  string chain_id = 2;

  // signs of committee participants
  repeated bytes signs = 3;
  bytes payload = 4;
}

message MsgCancelAutomation {
  option (cosmos.msg.v1.signer) = "creator";
  uint64 id = 1;

  // cancel by creator (user) of the automation
  // can be empty if tx created by committee
  string creator = 2;

  // cancel by committee
  CancelByCommittee committee = 3;
}

message MsgCancelAutomationResponse {}

message MsgActivateAutomation {
  option (cosmos.msg.v1.signer) = "creator";
  uint64 id = 1;

  // creator of the automation
  string creator = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgActivateAutomationResponse {}

message MsgSubmitJobResult {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string status = 2;
  string committee_id = 3;
  string chain_id = 4;
  uint64 automation_id = 5;
  string tx_hash = 6;
  uint64 created_at = 7;
  uint64 executed_at = 8;
  uint64 signed_at = 9;
  repeated bytes signs = 10;
  bytes payload = 11;
}

message MsgSubmitJobResultResponse {}
