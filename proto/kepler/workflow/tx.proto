syntax = "proto3";

package kepler.workflow;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "kepler/workflow/params.proto";
import "kepler/workflow/automation.proto";

option go_package = "kepler/x/workflow/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams  (MsgUpdateParams ) returns (MsgUpdateParamsResponse );
  rpc AddAutomation (MsgAddAutomation) returns (MsgAddAutomationResponse);
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) =                         "authority";
  option           (amino.name) = "kepler/x/workflow/MsgUpdateParams";
  
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgAddAutomation {
  option (cosmos.msg.v1.signer) = "creator";
  string     creator    = 1;
  repeated Trigger triggers = 2; // Trigger object, which can be chained by logical operators in itself
  repeated Action actions = 3; // List of actions
  int64 expire_at = 4; // Expiration timestamp (Unix time)
}

message MsgAddAutomationResponse {
  uint64 id = 1;
}

