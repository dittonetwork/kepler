syntax = "proto3";
package kepler.workflow;

import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";
import "kepler/job/job.proto";

option go_package = "github.com/dittonetwork/kepler/x/workflow/types";

// Automation entity
message Automation {
  uint64 id = 1; // Incremental ID for blockchain consistency
  repeated Trigger triggers = 2; // Trigger object, which can be chained by logical operators in itself
  UserOp user_op = 3; // User operation to be executed
  AutomationStatus status = 4; // Status of the automation (active, expired, paused, failed, done)
  int64 execution_count = 5; // how many times automation has been executed
  int64 failed_execution_streak = 6; // how many times in a row automation has failed its execution
  job.Job last_successful_job = 7; // last successfully executed job
  string creator = 8 [(cosmos_proto.scalar) = "cosmos.AddressString"]; // Creator address
}

// Enumeration for automation status
enum AutomationStatus {
  // AUTOMATION_STATUS_STATUS_UNSPECIFIED - Default unknown status
  AUTOMATION_STATUS_STATUS_UNSPECIFIED = 0;
  // AUTOMATION_STATUS_ACTIVE - Active automation
  AUTOMATION_STATUS_ACTIVE = 1;
  // AUTOMATION_STATUS_EXPIRED - Expired automation
  AUTOMATION_STATUS_EXPIRED = 2;
  // AUTOMATION_STATUS_PAUSED - Paused automation
  AUTOMATION_STATUS_PAUSED = 3;
  // AUTOMATION_STATUS_FAILED - Failed automation
  AUTOMATION_STATUS_FAILED = 4;
  // AUTOMATION_STATUS_DONE - Completed automation
  AUTOMATION_STATUS_DONE = 5;
  // AUTOMATION_STATUS_CANCELED - Canceled automation
  AUTOMATION_STATUS_CANCELED = 6; // Canceled automation
}

// Base trigger with type selection
message Trigger {
  // trigger is a union of all trigger types
  oneof trigger {
    OnChainTrigger on_chain = 1 [(amino.oneof_name) = "on_chain"];
    TimeTrigger time = 2 [(amino.oneof_name) = "time"];
    GasPriceTrigger gas_price = 3 [(amino.oneof_name) = "gas_price"];
    CountTrigger count = 4 [(amino.oneof_name) = "count"];
    BlockIntervalTrigger block_interval = 5 [(amino.oneof_name) = "block_interval"];
    ExpireAtTrigger expire_at = 6 [(amino.oneof_name) = "expire_at"];
  }
}

// UserOp is user operation process
message UserOp {
  bytes contract_address = 1; // Contract address
  string chain_id = 2; // Chain ID
  bytes tx_call_data = 3;
}

// Expire at trigger
message ExpireAtTrigger {
  // timestamp is the Unix timestamp when the trigger should be executed
  int64 timestamp = 1;
}

// On chain trigger
message OnChainTrigger {
  bytes contract_address = 1; // Contract address
  string chain_id = 2; // Chain ID
  bytes tx_call_data = 3;
}

// Time trigger
message TimeTrigger {
  int64 execute_after = 1; // Unix timestamp
}

// Count trigger
message CountTrigger {
  uint64 repeat_count = 1; // Number of executions allowed
}

// Block interval trigger
message BlockIntervalTrigger {
  uint64 block_interval = 1; // Block interval in blocks
}

// GasPriceTrigger activates when the chain's gas price â‰¤ threshold
message GasPriceTrigger {
  string chain_id = 1; // EVM chain ID (e.g., "1" for Ethereum)
  string threshold = 2; // Threshold gas price (in wei, as string to handle large values)
}
