syntax = "proto3";
package kepler.workflow;

option go_package = "kepler/x/workflow/types";

// Automation entity
message Automation {
  uint64 id = 1; // Incremental ID for blockchain consistency
  Trigger triggers = 2; // Trigger object, which can be chained by logical operators in itself
  repeated Action actions = 3; // List of actions
  uint64 expire_at = 4; // Expiration timestamp (Unix time)
  AutomationStatus status = 7; // Status of the automation (active, expired, paused, failed, done)
}

// Enumeration for automation status
enum AutomationStatus {
  AUTOMATION_STATUS_STATUS_UNSPECIFIED = 0; // Default unknown status
  AUTOMATION_STATUS_ACTIVE = 1; // Active automation
  AUTOMATION_STATUS_EXPIRED = 2; // Expired automation
  AUTOMATION_STATUS_PAUSED = 3; // Paused automation
  AUTOMATION_STATUS_FAILED = 4; // Failed automation
  AUTOMATION_STATUS_DONE = 5; // Completed automation
}

// Base trigger with type selection
message Trigger {
  oneof trigger {
    PriceTrigger price = 1;
    TimeTrigger time = 2;
    LogicalTrigger logical = 3;
    CountTrigger count = 4;
  }
}

// Asset price trigger
message PriceTrigger {
  string asset = 1;
  string operator = 2; // ">", "<", "=="
  string target_price = 3;
}

// Time trigger
message TimeTrigger {
  uint64 timestamp = 1;
}

// Logical trigger for trigger chains
message LogicalTrigger {
  LogicalOperator logical_operator = 1; // "AND", "OR"
  repeated Trigger triggers = 2; // List of triggers
}

message CountTrigger {
  uint64 repeat_count = 1; // Number of executions allowed
  uint64 repeat_interval = 3; // Interval between repeated executions allowed in seconds
  repeated Trigger triggers = 5; // List of triggers
}

// Enumeration for logical operator
enum LogicalOperator {
  LOGICAL_OPERATOR_UNSPECIFIED = 0; // Default unknown operator
  LOGICAL_OPERATOR_AND = 1; // Logical AND operator
  LOGICAL_OPERATOR_OR = 2; // Logical OR operator
  LOGICAL_OPERATOR_NOT = 3; // Logical NOT operator
}

message Action {
  bytes tx_call_data = 1;
}