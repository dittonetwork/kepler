syntax = "proto3";
package kepler.workflow;

import "cosmos_proto/cosmos.proto";
import "amino/amino.proto";

option go_package = "github.com/dittonetwork/kepler/x/workflow/types";

// Automation entity
message Automation {
  uint64 id = 1; // Incremental ID for blockchain consistency
  repeated Trigger triggers = 2; // Trigger object, which can be chained by logical operators in itself
  repeated Action actions = 3; // List of actions
  int64 expire_at = 4; // Expiration timestamp (Unix time)
  AutomationStatus status = 7; // Status of the automation (active, expired, paused, failed, done)
  string creator = 8 [(cosmos_proto.scalar) = "cosmos.AddressString"]; // Creator address
}

// Enumeration for automation status
enum AutomationStatus {
  AUTOMATION_STATUS_STATUS_UNSPECIFIED = 0; // Default unknown status
  AUTOMATION_STATUS_ACTIVE = 1; // Active automation
  AUTOMATION_STATUS_EXPIRED = 2; // Expired automation
  AUTOMATION_STATUS_PAUSED = 3; // Paused automation
  AUTOMATION_STATUS_FAILED = 4; // Failed automation
  AUTOMATION_STATUS_DONE = 5; // Completed automation
  AUTOMATION_STATUS_CANCELED = 6; // Canceled automation
}

// Base trigger with type selection
message Trigger {
  oneof trigger {
    OnChainTrigger on_chain =1 [(amino.oneof_name) = "on_chain"];
    TimeTrigger time = 2 [(amino.oneof_name) = "time"];
    GasPriceTrigger gas_price = 3 [(amino.oneof_name) = "gas_price"];
    CountTrigger count = 4 [(amino.oneof_name) = "count"];
    BlockIntervalTrigger block_interval = 5 [(amino.oneof_name) = "block_interval"];
  }
}

// Base action with type selection
message Action {
  oneof action {
    OnChainAction on_chain = 1 [(amino.oneof_name) = "on_chain"];
  }
}

// On chain trigger
message OnChainTrigger {
  bytes contract_address = 1; // Contract address
  string chain_id = 2; // Chain ID
  bytes tx_call_data = 3;
}

// Time trigger
message TimeTrigger {
  int64 execute_after = 1; // Unix timestamp
}

// Count trigger
message CountTrigger {
  uint64 repeat_count = 1; // Number of executions allowed
}

// Block interval trigger
message BlockIntervalTrigger {
  uint64 block_interval = 1; // Block interval in blocks
}

// GasPriceTrigger activates when the chain's gas price â‰¤ threshold
message GasPriceTrigger {
  string chain_id = 1; // EVM chain ID (e.g., "1" for Ethereum)
  string threshold = 2; // Threshold gas price (in wei, as string to handle large values)
}

// On chain action
message OnChainAction {
  bytes contract_address = 1; // Contract address
  string chain_id = 2; // Chain ID
  bytes tx_call_data = 3;
}
