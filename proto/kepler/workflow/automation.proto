syntax = "proto3";
package kepler.workflow;

import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";
import "kepler/job/job.proto";

option go_package = "github.com/dittonetwork/kepler/x/workflow/types";

// Automation entity
message Automation {
  // Incremental ID for blockchain consistency
  uint64 id = 1;
  // Trigger object, which can be chained by logical operators in itself
  repeated Trigger triggers = 2;
  // User operation
  UserOp user_op = 3;
  // Status of the automation
  AutomationStatus status = 4;
  // how many times automation has been executed
  int64 execution_count = 5;
  // how many times in a row automation has failed its execution
  int64 failed_execution_streak = 6;
  // last successfully executed job
  job.Job last_successful_job = 7;
  // Creator address
  string creator = 8 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// Enumeration for automation status
enum AutomationStatus {
  // AUTOMATION_STATUS_STATUS_UNSPECIFIED - Default unknown status
  AUTOMATION_STATUS_STATUS_UNSPECIFIED = 0;
  // AUTOMATION_STATUS_ACTIVE - Active automation
  AUTOMATION_STATUS_ACTIVE = 1;
  // AUTOMATION_STATUS_EXPIRED - Expired automation
  AUTOMATION_STATUS_EXPIRED = 2;
  // AUTOMATION_STATUS_PAUSED - Paused automation
  AUTOMATION_STATUS_PAUSED = 3;
  // AUTOMATION_STATUS_FAILED - Failed automation
  AUTOMATION_STATUS_FAILED = 4;
  // AUTOMATION_STATUS_DONE - Completed automation
  AUTOMATION_STATUS_DONE = 5;
  // AUTOMATION_STATUS_CANCELED - Canceled automation
  AUTOMATION_STATUS_CANCELED = 6; // Canceled automation
}

// Base trigger with type selection
message Trigger {
  oneof trigger {
    OnChainCallTrigger on_chain_call = 1 [(amino.oneof_name) = "on_chain_call"];
    TimeTrigger time = 2 [(amino.oneof_name) = "time"];
    GasLimitTrigger gas_limit = 3 [(amino.oneof_name) = "gas_limit"];
    CountTrigger count = 4 [(amino.oneof_name) = "count"];
    BlockIntervalTrigger block_interval = 5 [(amino.oneof_name) = "block_interval"];
    ScheduleTrigger schedule = 6 [(amino.oneof_name) = "schedule"];
    ValidUntilTrigger valid_until = 7 [(amino.oneof_name) = "valid_until"];
  }
}

// OnChainCallTrigger defines a trigger that calls a smart contract method.
// Instead of just sending raw call data, we now provide a more structured
// approach that includes the method's ABI and the list of arguments.
message OnChainCallTrigger {
  string contract = 1; // Contract address (e.g., "0x1234567890abcdef...")
  string chain_id = 2; // Chain ID (e.g., 1 for Ethereum mainnet)
  MethodABI method_abi = 3; // ABI of the method to be invoked
  bool only_finalized = 4; // If true, trigger will be simulated only on finalized blocks
  repeated string args = 5; // Arguments for the method (as strings)
}

message MethodABI {
  string name = 1; // Method name
  bytes abi = 2; // Method ABI
}

// Time trigger
message TimeTrigger {
  int64 execute_after = 1; // Unix timestamp
}

// Count trigger
message CountTrigger {
  uint64 repeat_count = 1; // Number of executions allowed
}

// Block interval trigger
message BlockIntervalTrigger {
  uint64 block_interval = 1; // Block interval in blocks
}

// ScheduleTrigger activates by a cron expression
message ScheduleTrigger {
  string cron = 1; // Cron expression, with minumum resolution of 1 minute, also accepts descriptors like @every 1h30m
}

// GasLimitTrigger activates when the chain's gas limit â‰¤ threshold
message GasLimitTrigger {
  string max_fee_per_gas = 1; // Maximum total fee per gas (in wei, as string) - covers base fee and priority fee.
  string max_priority_fee_per_gas = 2; // Maximum priority fee (in wei, as string) given as a tip to miners.
}

// UserOp is user operation process
message UserOp {
  bytes contract_address = 1; // Contract address
  string chain_id = 2; // Chain ID
  bytes tx_call_data = 3;
}

// Valid until trigger deactivates the automation when the timestamp is reached
message ValidUntilTrigger {
  // timestamp is the Unix timestamp when the trigger should be executed
  int64 timestamp = 1;
}
