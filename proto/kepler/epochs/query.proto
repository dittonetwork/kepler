syntax = "proto3";
package kepler.epochs;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "kepler/epochs/genesis.proto";

option go_package = "github.com/dittonetwork/kepler/x/epochs/types";

// Query defines the gRPC querier service.
service Query {
  // EpochInfos provide running epochInfos
  rpc EpochInfos(QueryEpochsInfoRequest) returns (EpochsInfoResponse) {
    option (google.api.http).get = "/cosmos/epochs/v1beta1/epochs";
  }
  // CurrentEpoch provide current epoch of specified identifier
  rpc CurrentEpoch(QueryCurrentEpochRequest) returns (QueryCurrentEpochResponse) {
    option (google.api.http).get = "/cosmos/epochs/v1beta1/current_epoch";
  }
}

// QueryEpochsInfoRequest is request type for the Query/Epochs RPC method.
// querying all epoch info.
message QueryEpochsInfoRequest {}

// QueryEpochInfosResponse is response type for the Query/Epochs RPC method.
// querying all epoch info.
message EpochsInfoResponse {
  // epochs holds all the epochInfos of this module.
  repeated EpochInfo epochs = 1 [(gogoproto.nullable) = false];
}

// QueryCurrentEpochRequest is request type for the Query/CurrentEpoch RPC method.
// querying an epoch by its identifier.
message QueryCurrentEpochRequest {
  // identifier is the identifier of the epoch.
  string identifier = 1;
}

// QueryCurrentEpochResponse is response type for the Query/CurrentEpoch RPC method.
// querying an epoch by its identifier.
message QueryCurrentEpochResponse {
  // current_epoch holds the current epoch of this module.
  int64 current_epoch = 1;
}
