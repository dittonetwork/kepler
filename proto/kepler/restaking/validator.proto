syntax = "proto3";
package kepler.restaking;

import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/dittonetwork/kepler/x/restaking/types";

// Validators is a collection of validators.
message Validators {
  // validators defines a list of validators.
  repeated Validator validators = 1 [(gogoproto.nullable) = false];
}

// EmergencyValidators is a collection of emergency validators.
message EmergencyValidators {
  // validators defines a list of emergency validators.
  repeated string addresses = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// Description defines a validator description.
message Description {
  option (gogoproto.equal) = true;

  // moniker defines a human-readable name for the validator.
  string moniker = 1;
  // identity defines an optional identity signature (ex. UPort or Keybase).
  string identity = 2;
  // website defines an optional website link.
  string website = 3;
  // security_contact defines an optional email for security contact.
  string security_contact = 4;
  // details define other optional details.
  string details = 5;
}

// Validator defines a validator in the restaking module.
message Validator {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_getters) = false;

  // operator_address is the Ethereum-style address (hex-encoded, 0x-prefixed) derived from
  // the last 20 bytes of the keccak256 hash of the operator's public key.
  // This address uniquely identifies the validator in the network.
  string operator_address = 1;

  // consensus_pubkey is the consensus ed25519 public key of the validator, as a
  // Protobuf Any.
  google.protobuf.Any consensus_pubkey = 2 [(cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey"];

  // is_emergency defines whether the validator is an emergency validator
  bool is_emergency = 3;

  // status defines the validator's status (bonded/unbonding/unbonded)
  BondStatus status = 4;

  // voting_power is the voting power of the validator
  int64 voting_power = 5;

  // description defines the description terms for the validator.
  Description description = 6 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  google.protobuf.Timestamp unbonding_time = 7 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (gogoproto.stdtime) = true
  ];
}

// BondStatus is the status of a validator
enum BondStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  // UNSPECIFIED indicates that the status of the validator is unknown.
  BOND_STATUS_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "Unspecified"];

  // UNBONDED indicates that the validator is in the process of bonding.
  BOND_STATUS_UNBONDED = 1 [(gogoproto.enumvalue_customname) = "Unbonded"];

  // UNBONDING defines a validator that is unbonding.
  BOND_STATUS_UNBONDING = 2 [(gogoproto.enumvalue_customname) = "Unbonding"];

  // BONDED defines a validator that is bonded.
  BOND_STATUS_BONDED = 3 [(gogoproto.enumvalue_customname) = "Bonded"];
}
