syntax = "proto3";
package kepler.restaking;

import "amino/amino.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "kepler/restaking/update.proto";
import "kepler/restaking/validator.proto";

option go_package = "github.com/dittonetwork/kepler/x/restaking/types";

// Query defines the gRPC querier service.
service Query {
  // PendingValidators returns currently pending validators of the module.
  rpc PendingOperators(QueryPendingOperatorsRequest) returns (QueryPendingOperatorsResponse) {
    option (google.api.http).get = "/dittonetwork/kepler/restaking/v1/pending_operators";
  }

  // Retrieve a list of all validators.
  rpc Validators(QueryValidatorsRequest) returns (QueryValidatorsResponse) {
    option (google.api.http).get = "/dittonetwork/kepler/restaking/validators";
  }

  // Return true if need update validators set
  rpc NeedValidatorsUpdate(QueryNeedValidatorsUpdateRequest) returns (QueryNeedValidatorsUpdateResponse) {
    option (google.api.http).get = "/dittonetwork/kepler/restaking/need_update";
  }

  // Retrieve the status of a validator by its operator address.
  rpc OperatorStatus(QueryOperatorStatusRequest) returns (QueryOperatorStatusResponse) {
    option (google.api.http).get = "/dittonetwork/kepler/restaking/operator_status/{evm_address}";
  }
}

// QueryValidatorStatusRequest is the request type for the Query/ValidatorStatus RPC method.
message QueryOperatorStatusRequest {
  // evm_address is the EVM address on L1.
  string evm_address = 1;
}

// QueryValidatorStatusResponse is the response type for the Query/ValidatorStatus RPC method.
message QueryOperatorStatusResponse {
  // status of the validator.
  enum Status {
    option (gogoproto.goproto_enum_prefix) = false;

    // UnspecifiedStatus is the default status.
    STATUS_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "UnknownOperatorStatus"];
    // ActiveStatus - validator is active and participate in chain.
    STATUS_ACTIVE = 1 [(gogoproto.enumvalue_customname) = "ActiveOperatorStatus"];
    // PendingStatus - validator is pending and waiting for BondValidator tx.
    STATUS_PENDING = 2 [(gogoproto.enumvalue_customname) = "PendingOperatorStatus"];
    // InactiveStatus - validator is inactive and not participate in chain.
    STATUS_INACTIVE = 3 [(gogoproto.enumvalue_customname) = "InactiveOperatorStatus"];
  }

  // status is the status of the validator.
  Status status = 1;

  // operator info
  Operator info = 2 [(gogoproto.nullable) = false];
}

// Empty message params for query/NeedValidatorsUpdate.
message QueryNeedValidatorsUpdateRequest {}

// QueryNeedValidatorsUpdateResponse returns bool result.
message QueryNeedValidatorsUpdateResponse {
  bool result = 1;
}

// QueryPendingValidatorsRequest is the request type for the Query/PendingValidators RPC method.
message QueryPendingOperatorsRequest {}

// QueryPendingValidatorsResponse is the response type for the Query/PendingValidators RPC method.
message QueryPendingOperatorsResponse {
  // Pending is the returned pending validators from the module.
  repeated Operator pending = 1 [(gogoproto.nullable) = false];
}

// QueryValidatorsRequest is the request type for the Query/Validators RPC method.
message QueryValidatorsRequest {
  // status enables to query for validators matching a given status.
  BondStatus status = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryValidatorsResponse is the response type for the Query/Validators RPC method.
message QueryValidatorsResponse {
  // validators is a list of validators.
  repeated Validator validators = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // pagination defines an optional pagination for the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
