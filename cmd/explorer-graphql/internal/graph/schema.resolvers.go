package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"explorer-graphql/internal/graph/model"
	"explorer-graphql/internal/loaders"
)

// Events is the resolver for the events field.
func (r *blockResolver) Events(ctx context.Context, obj *model.Block, offset *int, limit int) ([]*model.Event, error) {
	if obj == nil {
		return nil, nil
	}
	return loaders.GetEvents(ctx, &obj.RowID, offset, limit)
}

// Tx is the resolver for the tx field.
func (r *blockResolver) Tx(ctx context.Context, obj *model.Block, offset *int, limit int) ([]*model.Tx, error) {
	if obj == nil {
		return nil, nil
	}
	return loaders.GetTransactions(ctx, &obj.RowID, offset, limit)
}

// Attributes is the resolver for the attributes field.
func (r *eventResolver) Attributes(ctx context.Context, obj *model.Event) (map[string]interface{}, error) {
	if obj == nil {
		return nil, nil
	}
	return loaders.GetAttributes(ctx, obj.RowID)
}

// Block is the resolver for the block field.
func (r *queryResolver) Block(ctx context.Context, height int) (*model.Block, error) {
	return loaders.GetBlock(ctx, height)
}

// Blocks is the resolver for the blocks field.
func (r *queryResolver) Blocks(ctx context.Context, offset *int, limit int) ([]*model.Block, error) {
	return loaders.GetBlocks(ctx, offset, limit)
}

// Block returns BlockResolver implementation.
func (r *Resolver) Block() BlockResolver { return &blockResolver{r} }

// Event returns EventResolver implementation.
func (r *Resolver) Event() EventResolver { return &eventResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type blockResolver struct{ *Resolver }
type eventResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
